{"type":"layer2","id":"cyber","createdAt":1713364684,"isUnderReview":false,"technology":{"stateCorrectness":{"name":"Fraud proofs are not enabled","description":"OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.","risks":[{"category":"Funds can be stolen if","text":"an invalid state root is submitted to the system.","isCritical":true}],"references":[{"text":"L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function","href":"https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"}]},"dataAvailability":{"name":"Data required to compute fraud proof is published offchain without onchain attestations","description":"The project relies on DA challenges for data availability. If a DA challenger finds that the data behind a tx data commitment is not available, \n      they can submit a challenge which requires locking a bond within 12h. A challenge can be resolved by publishing the preimage data within an additional 12h. \n      In such a case, a portion of the challenger bond is burned, with the exact amount estimated as the cost incurred by the resolver to publish the full data, \n      meaning that the resolver and challenger will approximately lose the same amount of funds. The system is not secure if the malicious sequencer is able to outspend the altruistic challengers. \n      If instead, after a challenge, the preimage data is not published, the chain reorgs to the last fully derivable state. This mechanism fully depends on the derivation rule of the L2 node and can only be verified in its source code, which [can be reviewed here](https://github.com/ethereum-optimism/optimism/releases/tag/v1.9.4).","references":[{"text":"OP Plasma specification","href":"https://github.com/ethereum-optimism/specs/blob/main/specs/experimental/alt-da.md"},{"text":"Universal Plasma and DA Challenges - Ethresear.ch","href":"https://ethresear.ch/t/universal-plasma-and-da-challenges/18629"},{"text":"Derivation: Batch submission - OP Mainnet specs","href":"https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"},{"text":"BatchInbox - Etherscan address","href":"https://etherscan.io/address/0xfF00000000000000000000000000000000001d88"},{"text":"OptimismPortal.sol - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"}],"risks":[{"category":"Funds can be stolen if","text":"the sequencer is malicious and is able to economically outspend the altruistic challengers."},{"category":"Funds can be stolen if","text":"there is no challenger willing to challenge unavailable data commitments."}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"text":"L2OutputOracle.sol - Etherscan source code, CHALLENGER address","href":"https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"},{"text":"L2OutputOracle.sol - Etherscan source code, PROPOSER address","href":"https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.","risks":[],"references":[{"text":"Sequencing Window - OP Mainnet Specs","href":"https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"},{"text":"OptimismPortal.sol - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[{"category":"Funds can be frozen if","text":"the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.","isCritical":true}],"references":[{"text":"OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function","href":"https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"},{"text":"OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function","href":"https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"},{"text":"L2OutputOracle.sol - Etherscan source code, PROPOSER check","href":"https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"text":"Forced withdrawal from an OP Stack blockchain","href":"https://stack.optimism.io/docs/security/forced-withdrawal/"}]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.","risks":[],"references":[{"text":"Introducing EVM Equivalence","href":"https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"}]}]},"permissions":[{"name":"Challenger","description":"Challenger is an actor allowed to challenge or delete state roots proposed by a Proposer.","accounts":[{"address":"0x87bD2cFf3b59d615b1Eac7A7f809B5e5f0Ee6752","type":"EOA"}],"fromRole":true},{"name":"Guardian","description":"Guardian is an actor allowed to pause deposits and withdrawals.","accounts":[{"address":"0x0C883f622b4ccbF1e8ce86217998f87e6d36BCE4","type":"EOA"}],"fromRole":true},{"name":"Proposer","description":"Proposer is an actor allowed to post new state roots of the current layer to the host chain.","accounts":[{"address":"0xF2987f0A626c8D29dFB2E0A21144ca3026d6F1E1","type":"EOA"}],"fromRole":true},{"name":"Sequencer","description":"Sequencer is an actor allowed to commit transactions from the current layer to the host chain.","accounts":[{"address":"0xf0748C52EDC23135d9845CDFB91279Cf61ee14b4","type":"EOA"}],"fromRole":true},{"name":"CyberMultisig","description":"* A Gnosis Safe with 3 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change the configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade the implementation of DataAvailabilityChallenge, SuperchainConfig, OptimismPortal, L1ERC721Bridge, OptimismMintableERC20Factory, SystemConfig, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade the implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading the bridge implementation can give access to all funds escrowed therein.\n","accounts":[{"address":"0xc2259E7Fb719411f97aBdCdf449f6Ba3B9D75398","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xB5b01E638CEF6AE50462A487d70005D6fe85eCf2","type":"EOA"},{"address":"0xaC79765A73eB9dcBd3c427181E6819902AE25b48","type":"EOA"},{"address":"0xa8AC7D03BEb92Fa3E6030AEB21629D00Ffb66dD7","type":"EOA"},{"address":"0x1a76Ed328600489811F819959a74043f106CF0f9","type":"EOA"}]},{"name":"EOA 1","accounts":[{"address":"0x0C883f622b4ccbF1e8ce86217998f87e6d36BCE4","type":"EOA"}],"chain":"ethereum","description":"A Guardian."},{"name":"EOA 2","accounts":[{"address":"0x87bD2cFf3b59d615b1Eac7A7f809B5e5f0Ee6752","type":"EOA"}],"chain":"ethereum","description":"A Challenger."},{"name":"EOA 3","accounts":[{"address":"0xc76C563185d01284AdbC9cF5bb909162dD2F15e7","type":"EOA"}],"chain":"ethereum","description":"* Can change the configuration of DataAvailabilityChallenge - can upgrade the parameters of DA challenges like the bond size or refund percentages, potentially making challenges infeasable or insecure.\n* Can change the configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n"},{"name":"EOA 4","accounts":[{"address":"0xf0748C52EDC23135d9845CDFB91279Cf61ee14b4","type":"EOA"}],"chain":"ethereum","description":"A Sequencer."},{"name":"EOA 5","accounts":[{"address":"0xF2987f0A626c8D29dFB2E0A21144ca3026d6F1E1","type":"EOA"}],"chain":"ethereum","description":"A Proposer."}],"contracts":{"addresses":[{"name":"DataAvailabilityChallenge","isVerified":true,"address":"0x10E34EfE14E4D270C0f77Bf1aF01b6C832161B49","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x0d93eAA86eb6948b977857750A5512Bef6B05C51"]},"chain":"ethereum","description":"The DataAvailabilityChallenge contract is used to challenge the full availability of data behind commimted transaction data hashes. See the technology section for more details.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"L1StandardBridge","isVerified":true,"address":"0x12a580c05466eefb2c467C6b115844cDaF55B255","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x01b46e02fcE5FC0731076711aFFe73bEeCD87997"]},"chain":"ethereum","description":"The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"AddressManager","isVerified":true,"address":"0x19b5804B88F10262A55ac731f28A3BbC4209853a","chain":"ethereum","description":"Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."},{"name":"SuperchainConfig","isVerified":true,"address":"0x1aeC4c3BE47C30d0BEfa7514Cf9D99EaC596959D","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x579f8dFDAF8F180050C67B5D41342d686F2b28a6"]},"chain":"ethereum","description":"This is NOT the shared SuperchainConfig contract of the OP stack Superchain but rather a local fork. It manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"OptimismPortal","isVerified":true,"address":"0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0xACfD93B4887cef4F05cF3440d150D2cE97339142"]},"chain":"ethereum","description":"The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"L1CrossDomainMessenger","isVerified":true,"address":"0x3c01ebF22e9c111528c1E027D68944eDaB08Dfc9","upgradeability":{"proxyType":"resolved delegate proxy","admins":[],"implementations":["0x849d0821B1D313b65f6FF152176F4b6a0AF7aa56"],"immutable":false},"chain":"ethereum","description":"Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."},{"name":"L1ERC721Bridge","isVerified":true,"address":"0x4F4B716627D2Ba0439327Ce8B563b4443aF47Dbd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x1234c7a75f40551Fce5aFf1d58efD72F2ee2AFB1"]},"chain":"ethereum","description":"Used to bridge ERC-721 tokens from host chain to this chain.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"OptimismMintableERC20Factory","isVerified":true,"address":"0x51A00470Eb50D758EcFF3B96DB0bF4A8e86268F4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x985F187489954435ddf9571D45500184566e4B46"]},"chain":"ethereum","description":"A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"SystemConfig","isVerified":true,"address":"0x5D1F4bbaF6D484fA9D5D9705f92dE6063bff6055","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x726C6ac8A53061e56AfB2c890545348ba6f0DF0E"]},"chain":"ethereum","description":"Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"},{"name":"ProxyAdmin","isVerified":true,"address":"0x7E54107731EC43e78DA678DFa5fB6222Ad036e03","chain":"ethereum","description":"* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of DataAvailabilityChallenge, SuperchainConfig, OptimismPortal, L1ERC721Bridge, OptimismMintableERC20Factory, SystemConfig, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading the bridge implementation can give access to all funds escrowed therein.\n"},{"name":"L2OutputOracle","isVerified":true,"address":"0xa669A743b065828682eE16109273F5CFeF5e676d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x93E1c0D8ef27930130fb809CE18ca681A8C32F85"]},"chain":"ethereum","description":"Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.","upgradableBy":["CyberMultisig"],"upgradeDelay":"No delay"}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"milestones":[],"knowledgeNuggets":[{"title":"How Optimism compresses data","url":"https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw","thumbnail":"l2beat-03.jpg"},{"title":"Superchain Explainer","url":"https://docs.optimism.io/stack/explainer","thumbnail":"optimism-03.jpg"},{"title":"Modular Rollup Theory","url":"https://www.youtube.com/watch?v=jnVjhp41pcc","thumbnail":"modular-rollup.jpg"}],"badges":["CustomDA","Superchain","AltLayer","OPStack","EVM"],"discoveryDrivenData":true,"display":{"purposes":["Universal","Social"],"architectureImage":"opstack-dachallenge","reasonsForBeingOther":[{"label":"No proofs","shortDescription":"The proof system isn't fully functional","description":"Projects without a proper proof system fully rely on single entities to safely update the state. A malicious proposer can finalize an invalid state, which can cause loss of funds."},{"label":"No DA bridge","shortDescription":"There is no data availability bridge","description":"Projects without a data availability bridge fully rely on single entities (the sequencer) to honestly rely available data roots on Ethereum. A malicious sequencer can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"name":"Cyber","slug":"cyber","description":"Cyber is a chain designed for social applications using an implementation of OP Plasma with DA challenges.","links":{"websites":["https://cyber.co/"],"apps":["https://cyber-bridge.alt.technology/","https://cyber.co/stake","https://wallet.cyber.co/"],"documentation":["https://docs.cyber.co/"],"explorers":["https://cyberscan.co/","https://7560.routescan.io/"],"repositories":["https://github.com/cyberconnecthq"],"socialMedia":["https://twitter.com/cyberconnecthq","https://discord.com/invite/cUc8VRGmPs","https://cyber.co/blog"]},"activityDataSource":"Blockchain RPC","provider":"OP Stack","category":"Optimium"},"chainConfig":{"name":"cyber","chainId":7560,"explorerUrl":"https://cyberscan.co/","coingeckoPlatform":"cyber","explorerApi":{"url":"https://api.routescan.io/v2/network/mainnet/evm/7560/etherscan/api","type":"etherscan"},"minTimestampForTvl":1713428569,"multicallContracts":[{"sinceBlock":1,"batchSize":150,"address":"0xcA11bde05977b3631167028862bE2a173976CA11","version":"3"}]},"config":{"associatedTokens":["CYBER"],"escrows":[{"address":"0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99","newVersion":true,"sinceTimestamp":1713430391,"tokens":["ETH"],"contract":{"isVerified":true,"address":"0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0xACfD93B4887cef4F05cF3440d150D2cE97339142"]},"chain":"ethereum","description":"Main entry point for users depositing ETH.","upgradableBy":["ProxyAdmin"],"upgradeDelay":"No delay"},"chain":"ethereum","includeInTotal":true},{"address":"0x12a580c05466eefb2c467C6b115844cDaF55B255","newVersion":true,"sinceTimestamp":1713430415,"tokens":"*","contract":{"isVerified":true,"address":"0x12a580c05466eefb2c467C6b115844cDaF55B255","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],"implementations":["0x01b46e02fcE5FC0731076711aFFe73bEeCD87997"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 token that do not require custom gateway.","upgradableBy":["ProxyAdmin"],"upgradeDelay":"No delay"},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"rpc","startBlock":1,"defaultUrl":"https://cyber.alt.technology/","defaultCallsPerMinute":1500}},"dataAvailability":[{"layer":{"value":"Alt-DA Provider","sentiment":"warning","description":"The data is posted to an off-chain data availability provider which is tasked to serve data upon request. Only hashes of the data are published on an onchain inbox."},"bridge":{"value":"None + DA challenges","sentiment":"bad","description":"There is no bridge that can attest if the data has been made available. However, there is a mechanism that allows users to challenge the unavailability of data."},"mode":{"value":"Transaction data","secondLine":"Compressed"}}],"riskView":{"stateValidation":{"value":"None","description":"Currently the system permits invalid state roots. More details in project overview.","sentiment":"bad","definingMetric":null,"secondLine":"7d challenge period"},"dataAvailability":{"value":"External","description":"Proof construction and state derivation rely fully on data that is NOT published onchain. A custom data availability (DA) provider without attestations is used, but data unavailability can be challenged.","sentiment":"bad","sources":[{"contract":"OptimismPortal","references":[]}]},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","definingMetric":-604800,"sources":[{"contract":"OptimismPortal","references":[]}]},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.","sentiment":"good","definingMetric":43200,"secondLine":"12h delay","sources":[{"contract":"OptimismPortal","references":[]}]},"proposerFailure":{"value":"Cannot withdraw","description":"Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.","sentiment":"bad","definingMetric":null,"sources":[{"contract":"L2OutputOracle","references":[]}]}},"stage":{"stage":"NotApplicable"}}