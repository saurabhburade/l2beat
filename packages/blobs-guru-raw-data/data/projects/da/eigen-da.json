{"id":"eigen-da","type":"DaLayer","kind":"DA Service","systemCategory":"public","display":{"name":"EigenDA","slug":"eigenda","description":"EigenDA is a data availability solution built on Eigen Layer.","links":{"websites":["https://www.eigenda.xyz/"],"documentation":["https://docs.eigenda.xyz/overview"],"repositories":["https://github.com/Layr-Labs/eigenda"],"apps":[],"explorers":["https://blobs.eigenda.xyz/"],"socialMedia":["https://x.com/eigen_da"]}},"technology":{"description":"\n\n    ## Architecture\n\n    ![EigenDA architecture](/images/da-layer-technology/eigenda/architecture.png#center)\n\n    EigenDA is composed by three types of off-chain entities: node operators, a disperser and a retriever.\n    - EigenDA **operators** are node operators running the EigenDA node software and are registered to the EigenDA AVS in EigenLayer.\n    - The **disperser** is the entity responsible for collecting the blobs from the sequencer, erasure coding them and generating the encoded blob's KZG commitments for each chunk. Although the disperser could be rollup-operated, it is currently a centralised entity operated by Eigen Labs.\n    - Lastly, the **retriever** client is responsible for querying the EigenDA operators to retrieve blob chunks, verifying their integrity and reconstructs the original blob. \n    \n    ### Operators Registration \n    Operators register with the EigenDAServiceManager via the registerOperatorToAVS() function, enabling them to participate in the data availability network. They are responsible for holding and serving blobs data, and earn rewards for their participation in the network.\n\n    ![EigenDA operator registration](/images/da-layer-technology/eigenda/registration.png#center)\n\n    ### Operators Stake Update  \n    \n    EigenDA operators' stake for quorum verification is fetched from the EigenDA StakeRegistry contract. To keep the stake in sync with changes in share balances in the EigenLayer DelegationManager (e.g., due to tokens delegated/undelegated to operators), the permissionless updateOperators() function on the RegistryCoordinator contract needs to be called periodically. This function updates the operators' quorum weight in the StakeRegistry contract based on the operators' shares in the EigenLayer DelegationManager contract.\n    ![EigenDA operator stake sync](/images/da-layer-technology/eigenda/stakesync.png#center)\n\n    ### Operators Blob Storage and Retrieval \n\n    The process of storing a blob on EigenDA works as follows. A sequencer submits blobs to the EigenDA Disperser, which erasure codes the blobs into chunks and generates KZG commitments and proofs for each chunk, certifying the correctness of the data. The disperser then sends the chunks, KZG commitments, and KZG proofs to the operators.\n    Multiple operators are responsible for storing chunks of the encoded data blobs and their associated KZG commitment and proof.\n    Once the chunks, KZG commitments, and KZG proofs are sent to the operators, each of them generates a signature certifying that they have stored the data. These signatures are then sent to the Disperser which aggregates them and submits them to Ethereum by sending a transaction to the EigenDAServiceManager (the DA bridge).\n    \n    ![EigenDA storing/retrieving](/images/da-layer-technology/eigenda/storing-retrieving.png#center)\n\n    ## L2 Data Availability\n    The Disperser collects the operators' signatures and submits them to the EigenDAServiceManager contract via the confirmBatch() function. This submission includes a call to the BLSRegistry contract to verify signatures and check whether the required quorum of operators' stake has been achieved.\n    Threshold BLS signatures are not used. Instead, the threshold check is performed on the signers' total stake fetched by the StakeRegistry, and the stake threshold percentage to reach is provided in the batch header input data.\n\n    The EigenDARollupUtils.sol library's verifyBlob() function can then be used by L2s to verify that a data blob is included within a confirmed batch in the EigenDAServiceManager. \n    This function is not used by the EigenDAServiceManager contract itself, but rather by L2 systems to prove inclusion of the blob in the EigenDAServiceManager contract, and that their trust assumptions (i.e., batch confirmation threshold) were as expected.\n  ","references":[{"text":"EigenDA - Documentation","href":"https://docs.eigenda.xyz/overview"},{"text":"EigenDA Disperser - Source Code","href":"https://github.com/Layr-Labs/eigenda/blob/2ed86a0c1dd730b56c8235031c19e08a9837bde8/disperser/batcher/batcher.go"},{"text":"EigenDA Rollup Utils - Source Code","href":"https://github.com/Layr-Labs/eigenda-utils/blob/c4cbc9ec078aeca3e4a04bd278e2fb136bf3e6de/src/libraries/EigenDARollupUtils.sol"}],"risks":[{"category":"Users can be censored if","text":"the disperser does not distribute data to EigenDA operators."}]},"bridges":[{"id":"no-bridge","type":"NoBridge","createdAt":1724426960,"display":{"name":"No bridge","slug":"no-bridge","description":"The risk profile in this page refers to L2s that do not integrate with a data availability bridge.","links":{"websites":[],"documentation":[],"repositories":[],"apps":[],"explorers":[],"socialMedia":[]}},"risks":{"committeeSecurity":{"type":"NoBridge","value":"N/A","sentiment":"bad","description":"There is no committee attesting to the availability of data. "},"upgradeability":{"type":"NoBridge","value":"N/A","sentiment":"bad","description":"Without the bridge, users cannot react in time to malicious actions by the sequencer."},"relayerFailure":{"type":"NoBridge","value":"N/A","sentiment":"bad","description":"The relayer does not contribute to the DA bridge liveness since data availability attestations are not integrated in the scaling solution's proof system."}},"technology":{"description":"No DA bridge is selected. Without a DA bridge, Ethereum has no proof of data availability for this project.\n"},"usedIn":[{"id":"donatuz","name":"Donatuz","slug":"donatuz"}],"permissions":{},"contracts":{"risks":[],"addresses":{}}},{"id":"eigenda-bridge","createdAt":1724426960,"chain":1,"type":"DAC","display":{"name":"ServiceManager","slug":"bridge","description":"EigenDA DA attestations are bridged to Ethereum through the EigenDAServiceManager smart contract.","links":{"websites":[],"documentation":[],"repositories":[],"apps":[],"explorers":[],"socialMedia":[]}},"contracts":{"addresses":{"ethereum":[{"name":"EigenDAServiceManager","isVerified":true,"address":"0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8247EF5705d3345516286B72bFE6D690197C2E99"],"implementations":["0x58fDE694Db83e589ABb21A6Fe66cb20Ce5554a07"]},"chain":"ethereum","description":"The EigenDAServiceManager contract is the bridge contract that accepts blob batches data availability attestations. Batches availability is attested by EigenDA operators signatures and relayed to the service manager contract by the EigenDA disperser.","upgradableBy":["EigenDAProxyAdmin"],"upgradeDelay":"No delay"},{"name":"RegistryCoordinator","isVerified":true,"address":"0x0BAAc79acD45A023E19345c352d8a7a83C4e5656","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8247EF5705d3345516286B72bFE6D690197C2E99"],"implementations":["0xdcabf0bE991d4609096CCe316df08d091356E03F"]},"chain":"ethereum","description":"Contract used by operators to register with the EigenDA AVS. The coordinator has three registries: a StakeRegistry that keeps track of operators' stakes, a BLSApkRegistry that keeps track of operators' BLS public keys and aggregate BLS public keys for each quorum, and an IndexRegistry that keeps track of an ordered list of operators for each quorum.","upgradableBy":["EigenDAProxyAdmin"],"upgradeDelay":"No delay"},{"name":"StakeRegistry","isVerified":true,"address":"0x006124Ae7976137266feeBFb3F4D2BE4C073139D","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8247EF5705d3345516286B72bFE6D690197C2E99"],"implementations":["0x1C468cf7089D263c2f53e2579b329B16aBc4dd96"]},"chain":"ethereum","description":"The StakeRegistry contract keeps track of the total stake of each operator.","upgradableBy":["EigenDAProxyAdmin"],"upgradeDelay":"No delay"},{"name":"BLSApkRegistry","isVerified":true,"address":"0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8247EF5705d3345516286B72bFE6D690197C2E99"],"implementations":["0x5d0B9cE2e277Daf508528E9f6Bf6314E79e4eD2b"]},"chain":"ethereum","description":"The BLSApkRegistry contract keeps track of the BLS public keys of each operator and the quorum aggregated keys.","upgradableBy":["EigenDAProxyAdmin"],"upgradeDelay":"No delay"},{"name":"EjectionManager","isVerified":true,"address":"0x130d8EA0052B45554e4C99079B84df292149Bd5E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8247EF5705d3345516286B72bFE6D690197C2E99"],"implementations":["0x33A517608999DF5CEfFa2b2EbA88B4461c26Af6f"]},"chain":"ethereum","description":"The EjectionManager contract is responsible for ejecting operators from a quorum for violating the Service Legal Agreement (SLA).","upgradableBy":["EigenDAProxyAdmin"],"upgradeDelay":"No delay"},{"name":"PauserRegistry","isVerified":true,"address":"0x0c431C66F4dE941d089625E5B423D00707977060","chain":"ethereum","description":"Defines and stores pauser and unpauser roles for EigenLayer contracts and the EigenDAServiceManager."},{"name":"DelegationManager","isVerified":true,"address":"0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444"],"implementations":["0x1784BE6401339Fc0Fedf7E9379409f5c1BfE9dda"]},"chain":"ethereum","description":"The DelegationManager contract is responsible for registering EigenLayer operators and managing the EigenLayer strategies delegations. The EigenDA StakeRegistry contract reads from the DelegationManager to track the total stake of each EigenDA operator.","upgradableBy":["EigenLayerCommunityMultisig","EigenLayerOperationsMultisig"],"upgradeDelay":"10d delay via EigenLayerOperationsMultisig, no delay via EigenLayerCommunityMultisig."},{"name":"StrategyManager","isVerified":true,"address":"0x858646372CC42E1A627fcE94aa7A7033e7CF075A","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444"],"implementations":["0x70f44C13944d49a236E3cD7a94f48f5daB6C619b"]},"chain":"ethereum","description":"The StrategyManager contract is responsible for managing the EigenLayer token strategies. Each EigenDA quorum has at least one strategy that defines the operators quorum stake.","upgradableBy":["EigenLayerCommunityMultisig","EigenLayerOperationsMultisig"],"upgradeDelay":"10d delay via EigenLayerOperationsMultisig, no delay via EigenLayerCommunityMultisig."},{"name":"EigenStrategy","isVerified":true,"address":"0xaCB55C530Acdb2849e6d4f36992Cd8c9D50ED8F7","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444"],"implementations":["0x27e7a3A81741B9fcc5Ad7edCBf9F8a72a5c00428"]},"chain":"ethereum","description":"The EigenStrategy contract is responsible for managing the bEIGEN token strategy, representing the stake for the second EigenDA quorum.","upgradableBy":["EigenLayerCommunityMultisig","EigenLayerOperationsMultisig"],"upgradeDelay":"10d delay via EigenLayerOperationsMultisig, no delay via EigenLayerCommunityMultisig."},{"name":"EIGEN token","isVerified":true,"address":"0xec53bF9167f50cDEB3Ae105f56099aaaB9061F83","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xB8915E195121f2B5D989Ec5727fd47a5259F1CEC"],"implementations":["0x17f56E911C279bad67eDC08acbC9cf3DC4eF26A0"]},"chain":"ethereum","description":"The EIGEN token can be socially forked to slash operators for data withholding attacks (and other intersubjectively attributable faults).\n              EIGEN is a wrapper over a second token, bEIGEN, which will be used solely for intersubjective staking. Forking EIGEN means changing the canonical implementation of the bEIGEN token in the EIGEN token contract.","upgradableBy":["EIGEN Timelock"],"upgradeDelay":"10d delay."}]},"risks":[{"category":"Funds can be lost if","text":"the bridge (EigenDAServiceManager) contract receives a malicious code upgrade. There is no delay on code upgrades."},{"category":"Funds can be lost if","text":"EigenLayer core contracts (DelegationManager, StrategyManager) receive a malicious code upgrade. There is no delay on code upgrades."},{"category":"Funds can be lost if","text":"EigenLayer EIGEN token contract receives a malicious code upgrade. There is a 10d delay on code upgrades."},{"category":"Funds can be lost if","text":"the churn approver or ejectors act maliciously and eject EigenDA operators from a quorum without cause."},{"category":"Funds can be lost if","text":"the bridge accepts an incorrect or malicious data commitment provided by node operators."}]},"technology":{"description":"\n    ## Architecture\n\n    ![EigenDA architecture once stored](/images/da-bridge-technology/eigenda/architecture1.png#center)\n\n    The EigenDAServiceManager acts as a DA bridge smart contract verifying data availability claims from operators via signature verification.\n    The checkSignatures() function checks that the signature of all signers plus non-signers is equal to the registered quorum aggregated public key from the BLS registry. The quorum aggregated public key gets updated every time an operator is registered.\n    The bridge requires a threshold of signatures to be met before the data commitment is accepted. \n    To verify the threshold is met, the function takes the total stake at the reference block for the quorum from the StakeRegistry, and it subtracts the stake of non signers to get the signed stake.\n    Finally, it checks that the signed stake over the total stake is more than the required stake threshold.\n\n    ![EigenDA bridge architecture](/images/da-bridge-technology/eigenda/architecture2.png#center)\n\n    Although thresholds are not enforced onchain by the confirmBatch method, the minimum thresholds that the disperser would need to reach before relaying the batch commitment to Ethereum are set to 55% of the registered stake for the ETH quorum and 55% for the EIGEN token quorum. Meeting these dispersal thresholds allows the system to tolerate up to 33% (quorum 1) and 33% (quorum 2) of the total stake being adversarial, achieving this with approximately 4.5 data redundancy.  \n    The quorum thresholds are set on the EigenDAServiceManager contract and can be changed by the contract owner.\n    There is a maximum of 200 operators that can register for the ETH quorum and 200 for the EIGEN token quorum. Once the cap is reached, new operators must have 10% more weight than the lowest-weighted operator to join the active set. Entering the quorum is subject to the approval of the churn approver. Operators can be ejected from a quorum by the ejectors without delay should they violate the Service Legal Agreement (SLA). \n\n\n    Ejectors can eject maximum 33.33% of the total stake in a 7d window for the ETH quorum, and the same stake percentage over a 3d window for the EIGEN quorum.\n    An ejected operator can rejoin the quorum after 3d. \n  ","references":[{"text":"EigenDA Registry Coordinator - Etherscan","href":"https://etherscan.io/address/0xdcabf0be991d4609096cce316df08d091356e03f"},{"text":"EigenDA Service Manager - Etherscan","href":"https://etherscan.io/address/0x58fDE694Db83e589ABb21A6Fe66cb20Ce5554a07"}],"risks":[{"category":"Funds can be lost if","text":"the relayer posts an invalid commitment and EigenDA operators do not make the data available for verification."},{"category":"Funds can be frozen if","text":"excluding L2-specific DA fallback - the permissioned relayers are unable to submit DA commitments to the bridge contract."},{"category":"Funds can be frozen if","text":"the bridge (EigenDAServiceManager) contract is paused by the pausers."}]},"permissions":{"ethereum":[{"name":"EigenDAProxyAdmin","description":"The contract authorized to upgrade the core EigenDA contracts.","accounts":[{"address":"0x8247EF5705d3345516286B72bFE6D690197C2E99","type":"Contract"}],"participants":[{"address":"0x369e6F597e22EaB55fFb173C6d9cD234BD699111","type":"MultiSig"}]},{"name":"BatchConfirmers","description":"The list of addresses authorized to confirm the availability of blobs batches to the DA bridge.","accounts":[{"address":"0x8ED83c6Bb12E441Ca2C3a544F525d4a3Fb6484D8","type":"EOA"},{"address":"0x5A49Bf6c5690E22dFff3eB37F7dd18254eC361ED","type":"EOA"},{"address":"0x454Ef2f69f91527856E06659f92a66f464C1ca4e","type":"EOA"}]},{"name":"Pausers","description":"The list of addresses authorized to pause the EigenDAServiceManager contract.","accounts":[{"address":"0xBE1685C81aA44FF9FB319dD389addd9374383e90","type":"EOA"},{"address":"0x5050389572f2d220ad927CcbeA0D406831012390","type":"EOA"},{"address":"0x369e6F597e22EaB55fFb173C6d9cD234BD699111","type":"EOA"}]},{"name":"ChurnApprover","description":"The address authorized to approve the replacement of churned EigenDA operators from a quorum.","accounts":[{"address":"0xe0550117Cb066D3b330eBd764B0d75D3BA378734","type":"EOA"}]},{"name":"Ejectors","description":"The list of addresses authorized to eject EigenDA operators from a quorum.","accounts":[{"address":"0xD2Ee81Cf07B12140C793FcE5B26313CDd9d78eA8","type":"EOA"}]},{"name":"EigenLayerProxyAdmin","description":"The contract authorized to upgrade the core EigenLayer contracts.","accounts":[{"address":"0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444","type":"Contract"}],"participants":[{"address":"0x369e6F597e22EaB55fFb173C6d9cD234BD699111","type":"MultiSig"}]},{"name":"EigenLayerExecutorMultisig","description":"A Gnosis Safe with 1 / 2 threshold.  The proxy contract authorized to unpause the EigenDAServiceManager contract and upgrade core contracts through the EigenDAProxyAdmin contract.","accounts":[{"address":"0x369e6F597e22EaB55fFb173C6d9cD234BD699111","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xA6Db1A8C5a981d1536266D2a393c5F8dDb210EAF","type":"Contract"},{"address":"0xFEA47018D632A77bA579846c840d5706705Dc598","type":"MultiSig"}]},{"name":"EigenLayerOperationsMultisig","description":"A Gnosis Safe with 3 / 6 threshold.  This multisig is the owner of the EigenDAServiceManager contract. It holds the power to change the contract state and upgrade the bridge.","accounts":[{"address":"0xBE1685C81aA44FF9FB319dD389addd9374383e90","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xdC541e2B4adD96888b2C79006F49A9748A4f1bDF","type":"EOA"},{"address":"0xa2425B00F9A9457AEdd51d4C36d9917eA1Aa7a02","type":"EOA"},{"address":"0xb7Ae34BB33da55f12797e793E01e63a17B11d108","type":"EOA"},{"address":"0x27ff193A6A1574A611E21c39FDA636fA1d61ba30","type":"EOA"},{"address":"0x422e2F724faFE75F3635458aD7D3Ac803DCD7ff1","type":"EOA"},{"address":"0xe7fFd467F7526abf9c8796EDeE0AD30110419127","type":"EOA"}]},{"name":"EigenLayerCommunityMultisig","description":"A Gnosis Safe with 9 / 13 threshold.  This multisig is one of the owners of EigenLayerExecutorMultisig and can upgrade EigenLayer core contracts without delay.","accounts":[{"address":"0xFEA47018D632A77bA579846c840d5706705Dc598","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x17919FAC7024d5b770322E5Cb81607D247654116","type":"EOA"},{"address":"0x34C37613e1680efD9e203C979658e1d058b4B2BC","type":"EOA"},{"address":"0x72Ff26D9517324eEFA89A48B75c5df41132c4f54","type":"EOA"},{"address":"0x80cb2DA66A3ccb6064f16B15B6ae11d8E089C6D7","type":"EOA"},{"address":"0x313011Ee87b12700E29B0D1136Ae3d64665F3939","type":"EOA"},{"address":"0x97b4A6E0471A7c5906fF1Cc2a5970ed569B04815","type":"EOA"},{"address":"0x65C4799061c0D1e3E87ADdB65b02E92a558F842F","type":"EOA"},{"address":"0xe37756BEdDC89e94A8d557fd5b95a4D2a57e9D60","type":"EOA"},{"address":"0x8ffCF07A59631f0578f3E84B51C48cF0dEADCd95","type":"EOA"},{"address":"0xAF4D94Cd299211de542530399290877E2c85F061","type":"EOA"},{"address":"0xe8F09A9D42aEA0a3B393aD06F25CF512eA51707e","type":"EOA"},{"address":"0x6A662c5DdCe0b76BD081b8A4ec3A4F8a671b0b1f","type":"EOA"},{"address":"0x33E816008E7bc7798A73d0eaa640CC24f34d1626","type":"EOA"}]},{"name":"EigenLayer Timelock","accounts":[{"address":"0xA6Db1A8C5a981d1536266D2a393c5F8dDb210EAF","type":"Contract"}],"chain":"ethereum","description":"The timelock contract for upgrading EigenLayer core contracts via EigenLayerOperationsMultisig."}]},"requiredMembers":0,"membersCount":400,"transactionDataType":{"type":"TransactionData","value":"Transaction data","description":"TODO"},"usedIn":[],"risks":{"committeeSecurity":{"type":"LimitedCommitteeSecurity","value":"Permissioned","sentiment":"warning","description":"The committee requires an honest minority (less than 1/3) of members (or the network stake) to prevent the DA bridge from accepting an unavailable data commitment.\n        There are 204 operators currently registered in the committee, but entry or exit of members is partially controlled by a centralized entity."},"upgradeability":{"type":"LowOrNoDelay","value":"No delay","sentiment":"bad","description":"There is no delay in the upgradeability of the bridge. Users have no time to exit the system before the bridge implementation update is completed."},"relayerFailure":{"type":"NoMechanism","value":"No mechanism","sentiment":"bad","description":"The relayer role is permissioned, and the DA bridge does not have a Security Council or a governance mechanism to propose new relayers. In case of relayer failure, the DA bridge will halt and be unable to recover without the intervention of a centralized entity."}}}],"risks":{"economicSecurity":{"type":"OnChainNotSlashable","value":"No slashing","sentiment":"bad","description":"Node operators are required to stake a minimum of 32 ETH (first quorum) or 1 EIGEN (second quorum) to become members of the DA network. However, there is no slashing mechanism in place for misbehaving nodes. The EIGEN token social forking protocol for intersubjective attributable faults is under active development."},"fraudDetection":{"type":"NoFraudDetection","value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}}}