{"type":"layer2","id":"ink","createdAt":1729797861,"badges":["EVM","EthereumBlobs","OPStack","Superchain","Gelato"],"display":{"name":"Ink","slug":"ink","description":"Ink is an Optimistic Rollup built with the OP Stack by Kraken exchange.","purposes":["Universal"],"category":"Optimistic Rollup","provider":"OP Stack","links":{"websites":["https://inkonchain.com/en-US"],"apps":[],"documentation":[],"explorers":["https://explorer.inkonchain.com","https://okx.com/en-au/web3/explorer/inkchain"],"repositories":["https://github.com/inkonchain"],"socialMedia":["https://x.com/inkonchain","https://discord.com/invite/inkonchain","https://t.me/inkonchain"]},"activityDataSource":"Blockchain RPC","liveness":{"warnings":{"stateUpdates":"Please note, for Optimistic rollups the state is not finalized until the challenge period passes."},"explanation":"Ink is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets confirmed 3d 12h after it has been posted."},"finality":{"finalizationPeriod":302400}},"config":{"escrows":[{"address":"0x5d66C1782664115999C47c9fA5cd031f495D3e4F","newVersion":true,"sinceTimestamp":1733498411,"tokens":["ETH"],"contract":{"isVerified":true,"address":"0x5d66C1782664115999C47c9fA5cd031f495D3e4F","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xe2F826324b2faf99E513D16D266c3F80aE87832B"]},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true},{"address":"0x88FF1e5b602916615391F55854588EFcBB7663f0","newVersion":true,"sinceTimestamp":1733498411,"tokens":"*","contract":{"isVerified":true,"address":"0x88FF1e5b602916615391F55854588EFcBB7663f0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"rpc","defaultUrl":"https://rpc-gel.inkonchain.com","defaultCallsPerMinute":2000,"startBlock":1},"finality":{"type":"OPStack-blob","minTimestamp":1733502012,"genesisTimestamp":1733498411,"l2BlockTimeSeconds":2,"lag":0,"stateUpdate":"disabled"},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"transfer","from":"0x500d7Ea63CF2E501dadaA5feeC1FC19FE2Aa72Ac","to":"0x005969bf0EcbF6eDB6C47E5e94693b1C3651Be97","sinceTimestamp":1733498411}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x10d7B35078d3baabB96Dd45a9143B94be65b12CD","selector":"0x82ecf2f6","functionSignature":"function create(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) payable returns (address proxy_)","sinceTimestamp":1733498411}}]},"dataAvailability":[{"layer":{"value":"Ethereum","secondLine":"Blobs or Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata or blobs."},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted onchain."},"mode":{"value":"Transaction data","secondLine":"Compressed"}}],"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. Only one entity is currently allowed to propose and submit challenges, as only permissioned games are currently allowed.","sentiment":"bad","definingMetric":null},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","definingMetric":null},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","definingMetric":-604800},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.","sentiment":"good","definingMetric":43200,"secondLine":"12h delay"},"proposerFailure":{"value":"Cannot withdraw","description":"Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.","sentiment":"bad","definingMetric":null}},"technology":{"stateCorrectness":{"name":"Fraud proofs ensure state correctness","description":"After some period of time, the published state root is assumed to be correct. For a certain time period, one of the whitelisted actors can submit a fraud proof that shows that the state was incorrect.","risks":[{"category":"Funds can be stolen if","text":"no validator checks the published state. Fraud proofs assume at least one honest and able validator."}],"references":[{"text":"DisputeGameFactory.sol - Etherscan source code, create() function","href":"https://etherscan.io/address/0x10d7B35078d3baabB96Dd45a9143B94be65b12CD#code"},{"text":"PermissionedDisputeGame.sol - Etherscan source code, attack() function","href":"https://etherscan.io/address/0xa8E6a9bF1Ba2dF76C6787EAEbE2273Ae98498059#code"}]},"dataAvailability":{"name":"All data required for proofs is published on chain","description":"All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.","risks":[],"references":[{"text":"Derivation: Batch submission - OP Mainnet specs","href":"https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"},{"text":"BatchInbox - Etherscan address","href":"https://etherscan.io/address/0x005969bf0EcbF6eDB6C47E5e94693b1C3651Be97"},{"text":"OptimismPortal.sol - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.","risks":[],"references":[{"text":"Sequencing Window - OP Mainnet Specs","href":"https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"},{"text":"OptimismPortal.sol - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"}]},"exitMechanisms":[{"name":"Regular exits","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When a state root containing such transaction is settled, the funds become available for withdrawal on L1 after 3d 12h. Withdrawal inclusion can be proven before state root settlement, but a 7d period has to pass before it becomes actionable. The process of state root settlement takes a challenge period of at least 3d 12h to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function","href":"https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"},{"text":"OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function","href":"https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"text":"Forced withdrawal from an OP Stack blockchain","href":"https://stack.optimism.io/docs/security/forced-withdrawal/"}]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.","risks":[],"references":[{"text":"Introducing EVM Equivalence","href":"https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"}]}]},"stateValidation":{"description":"Currently, updates to the system state can only be proposed and challenged by the same entity as the proof system is permissioned. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Proposers submit state roots as children of the latest confirmed state root (called anchor state), by calling the `create` function in the DisputeGameFactory. A state root can have multiple conflicting children. Each proposal requires a stake, currently set to 0.0 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be withdrawn only after the proposal has been confirmed. A state root gets confirmed if the challenge period has passed and it is not countered.","references":[{"text":"OP stack specification: Fault Dispute Game","href":"https://specs.optimism.io/fault-proof/stage-one/fault-dispute-game.html#fault-dispute-game"}]},{"title":"Challenges","description":"Challenges are opened to disprove invalid state roots using bisection games. Each bisection move requires a stake that increases expontentially with the depth of the bisection, with a factor of 1.09493. The maximum depth is 73, and reaching it therefore requires a cumulative stake of 0.00 ETH from depth 0. Actors can participate in any challenge by calling the `defend` or `attack` functions, depending whether they agree or disagree with the latest claim and want to move the bisection game forward. Actors that disagree with the top-level claim are called challengers, and actors that agree are called defenders. Each actor might be involved in multiple (sub-)challenges at the same time, meaning that the protocol operates with [full concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Challengers and defenders alternate in the bisection game, and they pass each other a clock that starts with 3d 12h. If a clock expires, the claim is considered defeated if it was countered, or it gets confirmed if uncountered. Since honest parties can inherit clocks from malicious parties that play both as challengers and defenders (see [freeloader claims](https://specs.optimism.io/fault-proof/stage-one/fault-dispute-game.html#freeloader-claims)), if a clock gets inherited with less than 3h, it generally gets extended by 3h with the exception of 6h right before depth 30, and 1d right before the last depth. The maximum clock extension that a top level claim can get is therefore 10d. Since unconfirmed state roots are independent of one another, users can decide to exit with a subsequent confirmed state root if the previous one is delayed. Winners get the entire losers' stake, meaning that sybils can potentially play against each other at no cost. The final instruction found via the bisection game is then executed onchain in the MIPS one step prover contract who determines the winner. The protocol does not enforce valid bisections, meaning that actors can propose correct initial claims and then provide incorrect midpoints. The protocol can be subject to resource exhaustion attacks ([Spearbit 5.1.3](https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2024_08_report-cb-fault-proofs-non-mips.pdf)).","references":[{"text":"Fraud Proof Wars: OPFP","href":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["Fraud proof submission is not sufficiently decentralized.","Users' withdrawals can be censored by the permissioned operators."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":"UnderReview","description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":false,"description":"Fraud proof submission is not sufficiently decentralized."},{"satisfied":false,"description":"Users' withdrawals can be censored by the permissioned operators."},{"satisfied":true,"description":"In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."},{"satisfied":true,"description":"The Security Council is properly set up."}]},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Fraud proof submission is open only to whitelisted actors."},{"satisfied":false,"description":"Upgrades unrelated to onchain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to onchain provable bugs."}]}],"message":{"type":"underReview","text":"The requirement for available node software is under review"}},"milestones":[],"permissions":[{"name":"Guardian","description":"Guardian is an actor allowed to pause deposits and withdrawals.","accounts":[{"address":"0x0454092516c9A4d636d3CAfA1e82161376C8a748","type":"Contract"},{"address":"0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A","type":"MultiSig"},{"address":"0xc2819DC788505Aac350142A7A707BF9D03E3Bd03","type":"MultiSig"}],"fromRole":true},{"name":"Sequencer","description":"Sequencer is an actor allowed to commit transactions from the current layer to the host chain.","accounts":[{"address":"0x500d7Ea63CF2E501dadaA5feeC1FC19FE2Aa72Ac","type":"EOA"}],"fromRole":true},{"name":"LivenessModule","accounts":[{"address":"0x0454092516c9A4d636d3CAfA1e82161376C8a748","type":"Contract"}],"chain":"ethereum","description":"* Can act on behalf of SecurityCouncilMultisig.\n* A Guardian  (acting via SuperchainGuardianMultisig, SecurityCouncilMultisig).\n* used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the OpFoundationUpgradeSafe takes ownership of the multisig\n"},{"name":"SuperchainProxyAdminOwner","description":"* A Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of SuperchainProxyAdmin, ProxyAdmin.\n* Can change the configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change the configuration of Lib_AddressManager (acting via SuperchainProxyAdmin) - set and change address mappings.\n* Can upgrade the implementation of DisputeGameFactory, DelayedWETH, OptimismPortal2, SystemConfig, L1ERC721Bridge, OptimismMintableERC20Factory, AnchorStateRegistry (acting via ProxyAdmin).\n* Can upgrade the implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading the bridge implementation can give access to all funds escrowed therein.\n* Can upgrade the implementation of SuperchainConfig (acting via SuperchainProxyAdmin).\n","accounts":[{"address":"0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x847B5c174615B1B7fDF770882256e2D3E95b9D92","type":"MultiSig"},{"address":"0xc2819DC788505Aac350142A7A707BF9D03E3Bd03","type":"MultiSig"}]},{"name":"OpFoundationOperationsSafe","description":"* A Gnosis Safe with 5 / 7 threshold. \n* Can act on behalf of DeputyGuardianModule.\n* A Guardian  (acting via SuperchainGuardianMultisig, DeputyGuardianModule).\n","accounts":[{"address":"0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64","type":"MultiSig"},{"address":"0x3041BA32f451F5850c147805F5521AC206421623","type":"EOA"},{"address":"0xE7dEA1306D9F829bA469d1904c50903b46ebd02e","type":"EOA"},{"address":"0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8","type":"EOA"},{"address":"0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15","type":"EOA"},{"address":"0x7cB07FE039a92B3D784f284D919503A381BEC54f","type":"EOA"},{"address":"0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa","type":"EOA"}]},{"name":"GelatoMultisig","description":"* A Gnosis Safe with 4 / 8 threshold. \n* Can change the configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n","accounts":[{"address":"0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xB0C2CBFfCd4C31AFFEe14993b6d48f99D285f621","type":"EOA"},{"address":"0x28bB9385A588EF4747264D19B9A9F1603591680c","type":"EOA"},{"address":"0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2","type":"EOA"},{"address":"0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d","type":"EOA"},{"address":"0xBc0ca6865d6883a83D4aDDD6b862aE042d855E0d","type":"EOA"},{"address":"0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e","type":"EOA"},{"address":"0xf83bC4688979b13Da02CB94c76cEB169540760b5","type":"EOA"},{"address":"0x547D0F472309e4239b296D01e03bEDc101241a26","type":"EOA"}]},{"name":"SecurityCouncilMultisig","description":"* A Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the OpFoundationUpgradeSafe takes ownership of the multisig).\n* Member of SuperchainGuardianMultisig, SuperchainProxyAdminOwner.\n* A Guardian  (acting via SuperchainGuardianMultisig).\n","accounts":[{"address":"0xc2819DC788505Aac350142A7A707BF9D03E3Bd03","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x07dC0893cAfbF810e3E72505041f2865726Fd073","type":"EOA"},{"address":"0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8","type":"EOA"},{"address":"0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e","type":"EOA"},{"address":"0x4A7322258c9E690e4CB8Cea6e5251443E956e61E","type":"EOA"},{"address":"0x51aCb8e1205De850D1b512584FeE9C29C3813dDa","type":"EOA"},{"address":"0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e","type":"EOA"},{"address":"0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865","type":"EOA"},{"address":"0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310","type":"EOA"},{"address":"0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39","type":"EOA"},{"address":"0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4","type":"EOA"},{"address":"0x9Eb11A55132c851b9991F148b3Af791ca498fD7A","type":"EOA"},{"address":"0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9","type":"EOA"},{"address":"0xE895076cD050F1f042d1040E47b5929bE989E514","type":"EOA"}]},{"name":"SuperchainGuardianMultisig","description":"* A Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the OpFoundationOperationsSafe, called the deputy guardian, to act on behalf of the Gnosis Safe).\n* Can act as a Guardian.\n","accounts":[{"address":"0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xc2819DC788505Aac350142A7A707BF9D03E3Bd03","type":"MultiSig"}]},{"name":"GnosisSafe","description":"* A Gnosis Safe with 2 / 2 threshold. \n* Member of OpFoundationUpgradeSafe, OpFoundationOperationsSafe.\n","accounts":[{"address":"0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xb23794fd6BA1CEAd01Cf54D772b8341F2F0197A5","type":"EOA"},{"address":"0x4665374939642965EfD8357D4568D2A77f677429","type":"EOA"}]},{"name":"OpFoundationUpgradeSafe","description":"* A Gnosis Safe with 5 / 7 threshold. \n* Member of SuperchainProxyAdminOwner.\n","accounts":[{"address":"0x847B5c174615B1B7fDF770882256e2D3E95b9D92","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64","type":"MultiSig"},{"address":"0x3041BA32f451F5850c147805F5521AC206421623","type":"EOA"},{"address":"0xE7dEA1306D9F829bA469d1904c50903b46ebd02e","type":"EOA"},{"address":"0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8","type":"EOA"},{"address":"0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15","type":"EOA"},{"address":"0x7cB07FE039a92B3D784f284D919503A381BEC54f","type":"EOA"},{"address":"0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa","type":"EOA"}]},{"name":"EOA 1","accounts":[{"address":"0x500d7Ea63CF2E501dadaA5feeC1FC19FE2Aa72Ac","type":"EOA"}],"chain":"ethereum","description":"A Sequencer."}],"contracts":{"addresses":[{"name":"DisputeGameFactory","isVerified":true,"address":"0x10d7B35078d3baabB96Dd45a9143B94be65b12CD","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xc641A33cab81C559F2bd4b21EA34C290E2440C2B"]},"chain":"ethereum","description":"The dispute game factory allows the creation of dispute games, used to propose state roots and eventually challenge them.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"DelayedWETH","isVerified":true,"address":"0x14773a8040Ff22e3DcBb0C83eC8e33Be7D920D38","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0x71e966Ae981d1ce531a7b6d23DC0f27B38409087"]},"chain":"ethereum","description":"Contract designed to hold the bonded ETH for each game. It is designed as a wrapper around WETH to allow an owner to function as a backstop if a game would incorrectly distribute funds.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"MIPS","isVerified":true,"address":"0x16e83cE5Ce29BF90AD9Da06D2fE6a15d5f344ce4","chain":"ethereum","description":"The MIPS contract is used to execute the final step of the dispute game which objectively determines the winner of the dispute."},{"name":"LivenessGuard","isVerified":true,"address":"0x24424336F04440b1c28685a38303aC33C9D14a25","chain":"ethereum","description":""},{"name":"SuperchainProxyAdmin","isVerified":true,"address":"0x543bA4AADBAb8f9025686Bd03993043599c6fB04","chain":"ethereum","description":"* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig.\n"},{"name":"OptimismPortal2","isVerified":true,"address":"0x5d66C1782664115999C47c9fA5cd031f495D3e4F","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xe2F826324b2faf99E513D16D266c3F80aE87832B"]},"chain":"ethereum","description":"The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals. It specifies which game type can be used for withdrawals, which currently is the PermissionedDisputeGame.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"SystemConfig","isVerified":true,"address":"0x62C0a111929fA32ceC2F76aDba54C16aFb6E8364","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xF56D96B2535B932656d3c04Ebf51baBff241D886"]},"chain":"ethereum","description":"Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"L1ERC721Bridge","isVerified":true,"address":"0x661235a238B11191211fa95D4Dd9E423d521E0Be","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]},"chain":"ethereum","description":"Used to bridge ERC-721 tokens from host chain to this chain.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"L1CrossDomainMessenger","isVerified":true,"address":"0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f","upgradeability":{"proxyType":"resolved delegate proxy","admins":[],"implementations":["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],"immutable":false},"chain":"ethereum","description":"Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."},{"name":"L1StandardBridge","isVerified":true,"address":"0x88FF1e5b602916615391F55854588EFcBB7663f0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]},"chain":"ethereum","description":"The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"SuperchainConfig","isVerified":true,"address":"0x95703e0982140D16f8ebA6d158FccEde42f04a4C","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],"implementations":["0x53c165169401764778F780a69701385eb0FF19B7"]},"chain":"ethereum","description":"Used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"AddressManager","isVerified":true,"address":"0x9b7C9BbD6d540A8A4dEDd935819fC4408Ba71153","chain":"ethereum","description":"Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."},{"name":"PreimageOracle","isVerified":true,"address":"0x9c065e11870B891D214Bc2Da7EF1f9DDFA1BE277","chain":"ethereum","description":"The PreimageOracle contract is used to load the required data from L1 for a dispute game."},{"name":"OptimismMintableERC20Factory","isVerified":true,"address":"0xA8B389A82e088b164cD03230e900980CcED34d29","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]},"chain":"ethereum","description":"A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"},{"name":"PermissionedDisputeGame","isVerified":true,"address":"0xa8E6a9bF1Ba2dF76C6787EAEbE2273Ae98498059","chain":"ethereum","description":"Same as FaultDisputeGame, but only two permissioned addresses are designated as proposer and challenger."},{"name":"ProxyAdmin","isVerified":true,"address":"0xd56045E68956FCe2576E680c95a4750cf8241f79","chain":"ethereum","description":"* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of DisputeGameFactory, DelayedWETH, OptimismPortal2, SystemConfig, L1ERC721Bridge, OptimismMintableERC20Factory, AnchorStateRegistry.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading the bridge implementation can give access to all funds escrowed therein.\n"},{"name":"Lib_AddressManager","isVerified":true,"address":"0xdE1FCfB0851916CA5101820A69b13a4E276bd81F","chain":"ethereum","description":"Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."},{"name":"AnchorStateRegistry","isVerified":true,"address":"0xde744491BcF6b2DD2F32146364Ea1487D75E2509","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xd56045E68956FCe2576E680c95a4750cf8241f79"],"implementations":["0x7A78aa7D5dec2F8B368ca13f00Df2fA4E5De3C3F"]},"chain":"ethereum","description":"Contains the latest confirmed state root that can be used as a starting point in a dispute game.","upgradableBy":["SuperchainProxyAdminOwner"],"upgradeDelay":"No delay"}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. Both regular and emergency upgrades must be approved by both the Security Council and the Foundation. There is no delay on regular upgrades."}]}}