{"type":"layer2","id":"oevnetwork","createdAt":1707313169,"contracts":{"addresses":[{"name":"OneStepProverHostIo","isVerified":true,"address":"0x17e7F68ce50A77e55C7834ddF31AEf86403B8010","chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine."},{"name":"Bridge","isVerified":true,"address":"0x2403Dd9dFa12255Be8f42bc1e644733c9b2d10Dd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (Can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"ValidatorUtils","isVerified":true,"address":"0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF","chain":"ethereum","description":"This contract implements view only utilities for validators."},{"name":"RollupEventInbox","isVerified":true,"address":"0x3401eafd7Ceb84265B2cC4252155e12B446E7c57","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"RollupProxy","isVerified":true,"address":"0x3AAfe635FCfA0E5C19C9368ab5eb384277836006","upgradeability":{"proxyType":"Arbitrum proxy","admins":["0x566e4dA579fd344DF9fbC2Cbf4014faD41DCA0eA"],"implementations":["0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A","0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both held by the Validators).","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"UpgradeExecutor","isVerified":true,"address":"0x566e4dA579fd344DF9fbC2Cbf4014faD41DCA0eA","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x6c21303F5986180B1394d2C89f3e883890E2867b"]},"chain":"ethereum","description":"* Can act on behalf of ProxyAdmin.\n* Can be used to configure RollupProxy  - Pause and unpause and set important roles and parameters in the system contracts.\n* Can be used to upgrade implementation of RollupProxy.\n* Central contract defining the access control permissions for upgrading the system contract implementations.\n","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"OneStepProofEntry","isVerified":true,"address":"0x57EA090Ac0554d174AE0e2855B460e84A1A7C221","chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine."},{"name":"ChallengeManager","isVerified":true,"address":"0x59F75d2730a6a505c3C12b797cE2e7Bdb0C11757","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]},"chain":"ethereum","description":"Contract that allows challenging state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"OneStepProver0","isVerified":true,"address":"0x72B166070781a552D7b95a907eF59ca05d3D5a62","chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine."},{"name":"Inbox","isVerified":true,"address":"0x7EF9d2fe20307165599101e93Ea05b04d46Af159","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"OneStepProverMemory","isVerified":true,"address":"0x8b73Ef238ADaB31EBC7c05423d243c345241a22f","chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine."},{"name":"OneStepProverMath","isVerified":true,"address":"0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38","chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine."},{"name":"ProxyAdmin","isVerified":true,"address":"0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235","chain":"ethereum","description":"Can be used to upgrade implementation of Bridge, RollupEventInbox, UpgradeExecutor, ChallengeManager, Inbox, SequencerInbox, Outbox."},{"name":"SequencerInbox","isVerified":true,"address":"0xD5dD6114a5DC6d1352C0EE47Cbed6a1807F079c7","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"},{"name":"Outbox","isVerified":true,"address":"0xe4F99a0734C87C298d73C161F54874225E416997","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.","upgradableBy":["OevNetworkMultisig"],"upgradeDelay":"No delay"}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"technology":{"dataAvailability":{"name":"Data is not stored on chain","description":"Users transactions are not published onchain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"text":"Inside AnyTrust - Arbitrum documentation","href":"https://developer.offchainlabs.com/inside-anytrust"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"text":"Sequencer - Arbitrum documentation","href":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"text":"SequencerInbox.sol - Etherscan source code, forceInclusion function","href":"https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"},{"text":"Sequencer Isnâ€™t Doing Its Job - Arbitrum documentation","href":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"Transaction lifecycle - Arbitrum documentation","href":"https://developer.offchainlabs.com/tx-lifecycle"},{"text":"L2 to L1 Messages - Arbitrum documentation","href":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"text":"Mainnet for everyone - Arbitrum Blog","href":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Tradeable Bridge Exit","description":"When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.","risks":[],"references":[{"text":"Tradeable Bridge Exits - Arbitrum documentation","href":"https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.","risks":[{"category":"Funds can be lost if","text":"there are mistakes in the highly complex Nitro and WASM one-step prover implementation."}],"references":[{"text":"Inside Arbitrum Nitro","href":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"}]}]},"permissions":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"0x23b6bFACe63BFa288783b8344574c75b78FaEd59","type":"EOA"}],"fromRole":true},{"name":"Validator/Proposer","description":"Can propose new state roots (called nodes) and challenge state roots on the host chain.","accounts":[{"address":"0xd4D2F3cB313e59A34089F6635c5c1c6145298640","type":"EOA"}],"fromRole":true},{"name":"OevNetworkMultisig","description":"* A Gnosis Safe with 4 / 6 threshold. \n* Can act on behalf of UpgradeExecutor.\n* Can change the configuration of RollupProxy (acting via UpgradeExecutor) - Pause and unpause and set important roles and parameters in the system contracts.\n* Can upgrade the implementation of Bridge, RollupEventInbox, UpgradeExecutor, ChallengeManager, Inbox, SequencerInbox, Outbox (acting via ProxyAdmin, UpgradeExecutor).\n* Can upgrade the implementation of RollupProxy (acting via UpgradeExecutor).\n","accounts":[{"address":"0x2bf43034b9559643e986A2fE3cE015a18247b904","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A","type":"EOA"},{"address":"0x356000Cec4fC967f8FC372381D983426760A0391","type":"EOA"},{"address":"0xbf853295743511e8DC5F03809d209C33fC136d24","type":"EOA"},{"address":"0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9","type":"EOA"},{"address":"0xb004d94314a34627C09E4b8f83D9E7420d99BbFC","type":"EOA"},{"address":"0x15D5fF2dEc328a1cF3D64413caaBdcE29bff050A","type":"EOA"}]},{"name":"EOA 1","accounts":[{"address":"0x23b6bFACe63BFa288783b8344574c75b78FaEd59","type":"EOA"}],"chain":"ethereum","description":"A Sequencer  - Can submit transaction batches or commitments to the SequencerInbox contract on the host chain."},{"name":"EOA 2","accounts":[{"address":"0xd4D2F3cB313e59A34089F6635c5c1c6145298640","type":"EOA"}],"chain":"ethereum","description":"A Validator  - Can propose new state roots (called nodes) and challenge state roots on the host chain."}],"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.","risks":[{"category":"Funds can be stolen if","text":"none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.","isCritical":true}],"references":[{"text":"How is fraud proven - Arbitrum documentation FAQ","href":"https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.","references":[{"text":"Fraud Proof Wars: Arbitrum Classic","href":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"badges":["Caldera","DAC","Orbit","EVM"],"discoveryDrivenData":true,"display":{"architectureImage":"orbit-optimium","stateValidationImage":"orbit","purposes":["Universal","Oracles"],"warning":"Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.","reasonsForBeingOther":[{"label":"Closed proofs","shortDescription":"There are less than 5 external actors that can submit challenges","description":"Projects without a sufficiently decentralized set of challengers rely on few entities to safely update the state. A small set of challengers can collude with the proposer to finalize an invalid state, which can cause loss of funds."},{"label":"Small DAC","shortDescription":"There are less than 5 external actors that can attest data availability","description":"Projects without a sufficiently decentralized data availability committee rely on few entities to safely attest data availability on Ethereum. A small set of entities can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"name":"OEV Network","slug":"oev","description":"OEV is an Orbit stack Optimium by API3, designed to capture oracle extractable value and return it to the dApps and users that generated it.","links":{"websites":["https://api3.org/oev/"],"apps":["https://oev.bridge.api3.org/"],"documentation":["https://docs.api3.org/reference/oev-network/","https://medium.com/api3/api3-builds-oev-network-on-arbitrum-orbit-b29f8f5d7dcf"],"explorers":["https://oev.explorer.api3.org/"],"repositories":["https://github.com/API3DAO"],"socialMedia":["https://x.com/OEVNetwork","https://discord.com/invite/api3dao","https://medium.com/api3"]},"activityDataSource":"Blockchain RPC","provider":"Arbitrum","category":"Optimium","finality":{"finalizationPeriod":549816}},"stage":{"stage":"NotApplicable"},"dataAvailability":[{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"1/1 DAC Members","sentiment":"bad","description":"There is a threshold of 1/1 members that must sign and attest that the data is correct and available."},"mode":{"value":"Transaction data","secondLine":"Compressed"}}],"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.","sentiment":"bad","definingMetric":1,"secondLine":"6d 8h challenge period"},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.","sentiment":"bad","definingMetric":1},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","definingMetric":-86400},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.","sentiment":"good","definingMetric":86400,"secondLine":"1d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.","sentiment":"good","definingMetric":1099632,"secondLine":"12d 17h delay"}},"config":{"escrows":[{"address":"0x2403Dd9dFa12255Be8f42bc1e644733c9b2d10Dd","newVersion":true,"sinceTimestamp":1715834807,"tokens":["ETH"],"contract":{"isVerified":true,"address":"0x2403Dd9dFa12255Be8f42bc1e644733c9b2d10Dd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xb6fbC59CF12d77C35d58B82Deee76cfc934F1235"],"implementations":["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":["ProxyAdmin"],"upgradeDelay":"No delay"},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"rpc","startBlock":1,"defaultUrl":"https://oev.rpc.api3.org/http","defaultCallsPerMinute":1500}}}