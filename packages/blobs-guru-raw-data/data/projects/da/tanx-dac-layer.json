{"id":"tanx-dac-layer","kind":"DAC","type":"DaLayer","systemCategory":"custom","display":{"name":"tanX DAC","slug":"tanx","description":"Set of parties responsible for signing and attesting to the availability of data.","links":{"websites":["https://tanx.fi/"],"apps":["https://trade.tanx.fi/"],"documentation":["https://docs.tanx.fi/"],"explorers":[],"repositories":[],"socialMedia":["https://twitter.com/tanXfinance","https://discord.gg/wMAnf3gVTh","https://youtube.com/channel/UCUG2L75yvKJBK9QFUaXTdyA","https://linkedin.com/company/tanx-fi"]}},"technology":{"description":"\n    ## Architecture\n    ![starkex architecture](/images/da-layer-technology/starkex/architecture4.png#center)\n\n    The Starkware application utilizes a data availability solution that relies on a Committee Service to ensure data persistence. This architecture comprises the following components:\n\n    - **Availability Gateway**: The primary interface provided by the operator for committee members to access new batch information and submit signed availability claims.\n    - **Data Availability Committee (DAC)**: A group of nodes responsible for storing state data associated with each Merkle root and attesting to data availability by signing claims.\n    - **Data Batches**: Collections of transactions processed in batches that update the state of accounts, resulting in a new Merkle root representing the updated state.\n    \n    Committee members run services that interact with the Availability Gateway to obtain information about new batches and submit their signed availability claims. Each batch includes a unique batch_id, a reference to a previous batch, and a list of account updates. \n    Committee members combine this information with data from the reference batch to compute the new state and verify the Merkle root.\n    \n    When the operator produces a new batch, it must be signed by a minimum number of committee members—as defined by the application's configuration—for it to be accepted onchain. \n    This includes all members designated as mandatory signers. If the operator attempts to submit a batch without the required signatures, it will be rejected, thereby ensuring that data remains available and consistent.\n    \n    Committee members are expected to maintain a database that stores the data associated with each batch, making use of storage solutions with a replication factor of at least 2.\n  \n    ","references":[{"text":"StarkEx Committee Service - Source Code","href":"https://github.com/starkware-libs/starkex-data-availability-committee"}]},"bridges":[{"id":"tanx-dac-bridge","type":"DAC","usedIn":[{"id":"brine","name":"tanX","slug":"tanx"}],"createdAt":1723211933,"contracts":{"addresses":{"ethereum":[{"name":"Committee","isVerified":true,"address":"0x4F8B2dd49D958b6ac3e5f4705Bf1a9aDA5Bc4446","chain":"ethereum","description":"Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."}]},"risks":[]},"permissions":{"ethereum":[{"name":"Committee Members","description":"List of addresses authorized to sign data commitments for the DA bridge.","accounts":[{"address":"0x502FffBcdcaA61f19deFBb9b60e799F74FB48Bc1","type":"EOA"},{"address":"0xC37a598468A59D5d6DCeb889847B5824aD61697e","type":"EOA"},{"address":"0xfceC0b967e4390Eb7Cd4f2318c247eD193fE78E9","type":"EOA"},{"address":"0xFE4913D959064ee0b026ba0cE3Faccc1c5834a00","type":"EOA"}]}]},"chain":1,"requiredMembers":2,"membersCount":4,"transactionDataType":{"type":"StateDiffs","value":"State diffs","description":"TODO"},"display":{"name":"DA Bridge","slug":"dac","description":"tanX DAC on Ethereum.","links":{"apps":[],"documentation":[],"explorers":[],"repositories":[],"socialMedia":[],"websites":[]}},"technology":{"description":"\n    ## DA Bridge Architecture\n    ![starkex bridge architecture](/images/da-bridge-technology/starkex/architectureL2.png#center)\n      The DA commitments are posted to the L1 chain, using the Committee Verifier contract as a DA bridge.\n      The DA commitment consists of a data hash of the transaction batch the Committee has signed off on and a concatenation of ec-signatures by signatories.\n      The Committee Verifier contract verifies the signatures and the data hash and if the required threshold of Committee members has signed off on the data, the hash is stored as a registeredFact in the StarkEx contract.\n      In a separate transaction, the operator calls the updateState() function on the StarkEx contract to update the state.\n      Before the state update is accepted, the StarkEx contract verifies the transaction public inputs by calling the isValid() function, which verifies the hash derived from state update inputs matches the hash stored by the Committee Verifier contract.\n    ","risks":[{"category":"Funds can be lost if","text":"a malicious committee signs a data availability attestation for an unavailable transaction batch."}]},"risks":{"committeeSecurity":{"type":"Auto","value":"2/4","sentiment":"bad","description":"The committee does not meet basic security standards, either due to insufficient size, lack of member diversity, or poorly defined threshold parameters. The system lacks an effective DA bridge and it is reliant on the assumption of an honest sequencer, creating significant risks to data integrity and availability."},"upgradeability":{"type":"Immutable","value":"Immutable","sentiment":"bad","description":"The bridge smart contract is immutable and cannot be updated. The bridge committee security is low and cannot be improved."},"relayerFailure":{"type":"SelfPropose","value":"Self propose","sentiment":"good","description":"Anyone can relay data availability commitments to the DA bridge. In case of current relayer failure, users can collect attestations from committee members and propose new data availability commitments to the DA bridge."}}}],"risks":{"economicSecurity":{"type":"Unknown","value":"None","sentiment":"bad","description":"There are no onchain assets at risk of being slashed in case of a data withholding attack, and the committee members are not publicly known."},"fraudDetection":{"type":"NoFraudDetection","value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}}}