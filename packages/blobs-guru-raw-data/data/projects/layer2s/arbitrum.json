{"type":"layer2","id":"arbitrum","addedAt":1623153328,"capability":"universal","display":{"architectureImage":"arbitrumwithbold","stateValidationImage":"bold","purposes":["Universal"],"name":"Arbitrum One","slug":"arbitrum","description":"Arbitrum One is a general-purpose Optimistic Rollup built by Offchain Labs and governed by the Arbitrum DAO.","links":{"websites":["https://arbitrum.io/","https://arbitrum.foundation/","https://forum.arbitrum.foundation/"],"bridges":["https://bridge.arbitrum.io"],"documentation":["https://docs.arbitrum.io","https://docs.arbitrum.foundation/"],"explorers":["https://arbiscan.io","https://explorer.arbitrum.io/","https://arbitrum.blockscout.com/"],"repositories":["https://github.com/ArbitrumFoundation/docs","https://github.com/ArbitrumFoundation/governance","https://github.com/OffchainLabs/nitro","https://github.com/OffchainLabs/nitro-contracts"],"socialMedia":["https://twitter.com/arbitrum","https://arbitrumfoundation.medium.com/","https://discord.gg/Arbitrum","https://youtube.com/@Arbitrum","https://t.me/arbitrum"],"rollupCodes":"https://rollup.codes/arbitrum-one"},"liveness":{"warnings":{"stateUpdates":"Please note, for Optimistic rollups the state is not finalized until the challenge period passes."},"explanation":"Arbitrum One is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1. Forced txs can be delayed up to 1d. The state root gets finalized 6d 8h after it has been posted."},"stacks":["Arbitrum"]},"proofSystem":{"type":"Optimistic","name":"BoLD"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve.","secondLine":"8d 8h challenge + execution delay","sentiment":"good","orderHint":null},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","orderHint":null},"exitWindow":{"value":"10d","description":"Non-emergency upgrades are initiated on L2 and go through a 8d delay on L2 and a 3d delay on L1. Since there is a 1d delay to force a tx (forcing the inclusion in the following state update), users have 10d to exit.","sentiment":"warning","orderHint":864000,"warning":{"value":"The Security Council can upgrade with no delay.","sentiment":"bad"}},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There can be up to a 1d delay on this operation.","sentiment":"good","orderHint":86400,"secondLine":"1d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can be a Proposer and propose new roots to the L1 bridge.","sentiment":"good","orderHint":0}},"stage":{"stage":"Stage 1","missing":{"nextStage":"Stage 2","requirements":["Upgrades unrelated to onchain provable bugs provide less than 30d to exit.","The Security Council's actions are not confined to onchain provable bugs."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":true,"description":"There are at least 5 external actors who can submit fraud proofs."},{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":true,"description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/OffchainLabs/nitro/)"}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"Users are able to exit without the help of the permissioned operators."},{"satisfied":true,"description":"In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."},{"satisfied":true,"description":"The Security Council is properly set up."}],"principle":{"satisfied":true,"description":"Compromising ≥75% of the Security Council is the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal)."}},{"stage":"Stage 2","requirements":[{"satisfied":true,"description":"Fraud proof submission is open to everyone."},{"satisfied":false,"description":"Upgrades unrelated to onchain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to onchain provable bugs."}]}]},"config":{"associatedTokens":["ARB"],"escrows":[{"address":"0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a","sinceTimestamp":1661457944,"tokens":["ETH"],"contract":{"isVerified":true,"address":"eth:0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":[{"name":"ProxyAdmin","delay":"no"}]},"chain":"ethereum","includeInTotal":true},{"address":"0xcEe284F754E854890e311e3280b767F80797180d","sinceTimestamp":1623867835,"tokens":"*","excludedTokens":["USDT"],"premintedTokens":["SQD"],"contract":{"isVerified":true,"address":"eth:0xcEe284F754E854890e311e3280b767F80797180d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],"implementations":["eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens that require minting custom tokens on L2.","upgradableBy":[{"name":"SecurityCouncil","delay":"no"},{"name":"L1Timelock","delay":"17d 8h"}]},"chain":"ethereum","includeInTotal":true},{"address":"0xa3A7B6F88361F48403514059F1F16C8E78d60EeC","sinceTimestamp":1623784100,"tokens":"*","excludedTokens":["SolvBTC","SolvBTC.BBN","PEPE","rsETH"],"premintedTokens":["LOGX","AIUS","YBR","FFM"],"contract":{"isVerified":true,"address":"eth:0xa3A7B6F88361F48403514059F1F16C8E78d60EeC","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],"implementations":["eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.","upgradableBy":[{"name":"SecurityCouncil","delay":"no"},{"name":"L1Timelock","delay":"17d 8h"}]},"chain":"ethereum","includeInTotal":true},{"address":"0xA10c7CE4b876998858b1a9E12b10092229539400","sinceTimestamp":1632133470,"tokens":["DAI","USDS","sUSDS"],"contract":{"isVerified":true,"address":"eth:0xA10c7CE4b876998858b1a9E12b10092229539400","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Maker/Sky-controlled vault for DAI, USDS and sUSDS bridged with canonical messaging."},"chain":"ethereum","includeInTotal":true,"source":"external","bridgedUsing":{"bridges":[{"name":"Custom escrow"}]}},{"address":"0x0F25c1DC2a9922304f2eac71DCa9B07E310e8E5a","sinceTimestamp":1659608791,"tokens":["wstETH"],"contract":{"isVerified":true,"address":"eth:0x0F25c1DC2a9922304f2eac71DCa9B07E310e8E5a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],"implementations":["eth:0xc4E3ff0b5B106f88Fc64c43031BE8b076ee9F21C"]},"chain":"ethereum","description":"wstETH Vault for custom wstETH Gateway. Fully controlled by Lido governance."},"chain":"ethereum","includeInTotal":true,"source":"external","bridgedUsing":{"bridges":[{"name":"Custom escrow"}]}},{"address":"0x6A23F4940BD5BA117Da261f98aae51A8BFfa210A","sinceTimestamp":1644777090,"tokens":["LPT"],"contract":{"isVerified":true,"address":"eth:0x6A23F4940BD5BA117Da261f98aae51A8BFfa210A","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"LPT Vault for custom Livepeer Token Gateway."},"chain":"ethereum","includeInTotal":true,"source":"external","bridgedUsing":{"bridges":[{"name":"Custom escrow"}]}},{"address":"0x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515","chain":"ethereum","sinceTimestamp":1622243344,"tokens":["ETH"],"isHistorical":true}],"activityConfig":{"type":"block","startBlock":1,"adjustCount":{"type":"SubtractOne"}},"daTracking":[{"type":"ethereum","daLayer":"ethereum","sinceBlock":15411056,"inbox":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","sequencers":["0x0237e0EA0d86D53aF18dCf4CbE8182037b44ef1A","0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D","0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc"]}],"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0xe0bc9729","functionSignature":"function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x8f111f3c","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x37501551","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes quote)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x3e5aa082","functionSignature":"function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x6e620055","functionSignature":"function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x917cf8ac","functionSignature":"function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","selector":"0x69cacded","functionSignature":"function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1661457944}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840","selector":"0xa04cee60","functionSignature":"function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external","sinceTimestamp":1661457944}}]},"contracts":{"addresses":{"ethereum":[{"name":"SequencerInbox","isVerified":true,"address":"eth:0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **batchPosterManager**: Arbitrum Multisig 1\n  * **batchPosters**: EOA 1, EOA 2, EOA 3","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupProxy","isVerified":true,"address":"eth:0x4DCeB440657f21083db8aDd07665f8ddBe1DCfc0","upgradeability":{"proxyType":"Arbitrum proxy","admins":["eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"],"implementations":["eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17","eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new assertions (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both called Validators).\n* Roles:\n  * **admin**: UpgradeExecutor; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **owner**: UpgradeExecutor; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"Bridge","isVerified":true,"address":"eth:0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **mainOutboxAddress**: Outbox","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"EdgeChallengeManager","isVerified":true,"address":"eth:0xA5565d266c3c3Ee90B16Be8A5b13d587ef559fB0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea"]},"chain":"ethereum","description":"Contract that implements the main challenge protocol logic of the fraud proof system.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeExecutor","isVerified":true,"address":"eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],"implementations":["eth:0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]},"chain":"ethereum","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: UpgradeExecutorAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **executors**: Arbitrum Security Council, L1Timelock","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"L1Timelock","isVerified":true,"address":"eth:0xE6841D92B0C345144506576eC13ECf5103aC7f49","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],"implementations":["eth:0x61dC65001A8De4138DAD5167e43FF0FB0AB8D3B3"]},"chain":"ethereum","description":"A timelock with access control. The current minimum delay is 3d. Proposals that passed their minimum delay can be executed by the anyone.\n* Roles:\n  * **admin**: UpgradeExecutorAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **canceller**: UpgradeExecutor; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose\n  * **proposer**: Bridge; ultimately CoreGovernor, L2SecurityCouncilPropose\n  * **timelockAdmin**: UpgradeExecutor; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"Outbox","isVerified":true,"address":"eth:0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1. Is also used to relay governance action messages from Arbitrum One to Ethereum, allowing the L2Timelock and its Governance actors on L2 to act as this address and inherit all its listed permissions.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"Inbox","isVerified":true,"address":"eth:0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"L1ERC20Gateway","isVerified":true,"address":"eth:0xa3A7B6F88361F48403514059F1F16C8E78d60EeC","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],"implementations":["eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]},"chain":"ethereum","description":"Escrows deposited ERC-20 assets for the canonical Bridge. Upon depositing, a generic token representation will be minted at the destination. Withdrawals are initiated by the Outbox contract.\n* Roles:\n  * **admin**: GatewaysAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"wstETHEscrow","isVerified":true,"address":"eth:0x0F25c1DC2a9922304f2eac71DCa9B07E310e8E5a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],"implementations":["eth:0xc4E3ff0b5B106f88Fc64c43031BE8b076ee9F21C"]},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"LPTL1Escrow","isVerified":true,"address":"eth:0x6A23F4940BD5BA117Da261f98aae51A8BFfa210A","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"GatewayRouter","isVerified":true,"address":"eth:0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],"implementations":["eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]},"chain":"ethereum","description":"This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.\n* Roles:\n  * **admin**: GatewaysAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"L1Escrow","isVerified":true,"address":"eth:0xA10c7CE4b876998858b1a9E12b10092229539400","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Simple escrow that accepts tokens and allows to configure permissioned addresses that can access the tokens.\n","discoveryDrivenData":true},{"name":"L1CustomGateway","isVerified":true,"address":"eth:0xcEe284F754E854890e311e3280b767F80797180d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],"implementations":["eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]},"chain":"ethereum","description":"Escrows deposited assets for the canonical bridge that are externally governed or need custom token contracts with e.g. minting rights or upgradeability.\n* Roles:\n  * **admin**: GatewaysAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"L1DaiGateway","isVerified":true,"address":"eth:0xD3B5b60020504bc3489D6949d545893982BA3011","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Counterpart of the L2DaiGateway. Allows for bridging DAI from L1 to L2.\n","discoveryDrivenData":true},{"name":"OneStepProver0","isVerified":true,"address":"eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ParentToChildRewardRouter","isVerified":true,"address":"eth:0x40Cd7D713D7ae463f95cE5d342Ea6E7F5cF7C999","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Collects the excess stake when rival nodes are created and allows to send them to the L2 treasury.\n","discoveryDrivenData":true},{"name":"OneStepProofEntry","isVerified":true,"address":"eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"RollupEventInbox","isVerified":true,"address":"eth:0x57Bd336d579A51938619271a7Cc137a46D0501B1","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.\n* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"OutboxV0","isVerified":true,"address":"eth:0x667e23ABd27E623c11d4CC00ca3EC4d0bD63337a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x263a68002876E307804168795519da0B32CC62fE"]},"chain":"ethereum","description":"* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"OutboxV1","isVerified":true,"address":"eth:0x760723CD2e632826c38Fef8CD438A4CC7E7E1A40","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],"implementations":["eth:0x360861b7b245c968128F0a53d281aDb1Df760711"]},"chain":"ethereum","description":"* Roles:\n  * **admin**: ArbitrumProxyAdmin; ultimately Arbitrum Security Council, CoreGovernor, L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilPropose","delay":"17d 8h"},{"name":"CoreGovernor","delay":"17d 8h"},{"name":"Arbitrum Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProverHostIo","isVerified":true,"address":"eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMath","isVerified":true,"address":"eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMemory","isVerified":true,"address":"eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true}],"arbitrum":[{"name":"L2Timelock","isVerified":true,"address":"arb1:0x34d45e99f7D8c45ed05B5cA72D54bbD1fb3F98f0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x41740588b86B4e0629b83A4e28786FF94361c3A3"]},"chain":"arbitrum","description":"Delays constitutional AIPs from the CoreGovernor by 8d.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency\n  * **canceller**: CoreGovernor\n  * **proposer**: CoreGovernor, L2SecurityCouncilPropose, SecurityCouncilManager\n  * **timelockAdmin**: L2UpgradeExecutor; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"TreasuryGovernor","isVerified":true,"address":"arb1:0x789fC99093B09aD01C34DC7251D0C89ce743e5a4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x065620d99E1785Ccf56Fa95462d3012Eb844FDC9"]},"chain":"arbitrum","description":"Token governance contract used for creating non-constitutional AIPs, or “treasury proposals”, e.g., transferring founds out of the DAO Treasury. Also enforces the 3% quorum for proposals.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"SecurityCouncilNomineeElectionGovernor","isVerified":true,"address":"arb1:0x8a1cDA8dee421cD06023470608605934c16A05a0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0xd3Ae921B220bedC2f94a5968E25535a476A9518C"]},"chain":"arbitrum","description":"Token governance contract for the Security Council nominee elections.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"TreasuryTimelock","isVerified":true,"address":"arb1:0xbFc1FECa8B09A5c5D3EFfE7429eBE24b9c09EF58","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x41740588b86B4e0629b83A4e28786FF94361c3A3"]},"chain":"arbitrum","description":"Delays treasury proposals from the TreasuryGovernor by 259200 seconds. Is used as the main recipient for the ETH from L2SurplusFee and L2BaseFee contracts.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2UpgradeExecutor","isVerified":true,"address":"arb1:0xCF57572261c7c2BCF21ffD220ea7d1a27D40A827","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x7A013834D54e9B22d1978aAe3aaDDC909Aa79115"]},"chain":"arbitrum","description":"This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2).\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency\n  * **executors**: L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"SecurityCouncilManager","isVerified":true,"address":"arb1:0xD509E5f5aEe2A205F554f36E8a7d56094494eDFC","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x468dA0eE5570Bdb1Dd81bFd925BAf028A93Dce64"]},"chain":"arbitrum","description":"This contract enforces the rules for changing members and cohorts of the SecurityCouncil and creates crosschain messages to Ethereum and Arbitrum Nova to keep the configuration in sync.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency\n  * **cohortReplacer**: SecurityCouncilMemberElectionGovernor\n  * **defaultAdmin**: L2UpgradeExecutor; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency\n  * **memberAdder**: L2SecurityCouncilPropose\n  * **memberRemover**: L2SecurityCouncilPropose, SecurityCouncilMemberRemovalGovernor\n  * **memberReplacer**: L2SecurityCouncilPropose\n  * **memberRotator**: L2SecurityCouncilPropose","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2ERC20Gateway","isVerified":true,"address":"arb1:0x09e9222E96E7B4AE2a407B98d48e330053351EEe","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],"implementations":["arb1:0x1DCf7D03574fbC7C205F41f2e116eE094a652e93"]},"chain":"arbitrum","description":"Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2GatewayRouter","isVerified":true,"address":"arb1:0x5288c571Fd7aD117beA99bF60FE0846C4E84F933","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],"implementations":["arb1:0xe80eb0238029333e368e0bDDB7acDf1b9cb28278"]},"chain":"arbitrum","description":"Router managing token <–> gateway mapping on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2WethGateway","isVerified":true,"address":"arb1:0x6c411aD3E74De3E7Bd422b94A27770f5B86C623B","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],"implementations":["arb1:0x806421D09cDb253aa9d128a658e60c0B95eFFA01"]},"chain":"arbitrum","description":"Counterpart to the Bridge on L1. Mints and burns WETH on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2ARBGateway","isVerified":true,"address":"arb1:0xCaD7828a19b363A2B44717AFB1786B5196974D8E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0x5D96786d3Eb13CAd05c9Fd7d0f7bb9560b4E5056"]},"chain":"arbitrum","description":"ARB sent from L2 to L1 is escrowed in this contract and minted on L1.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"L2DAIGateway","isVerified":true,"address":"arb1:0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"Counterpart to the L1DaiGateway. Can mint (deposit to L2) and burn (withdraw to L1) DAI tokens on L2.\n","discoveryDrivenData":true},{"name":"L2LPTGateway","isVerified":true,"address":"arb1:0x6D2457a4ad276000A615295f7A80F79E48CcD318","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"Counterpart to the L1LPTGateway. Can mint (deposit to L2) and burn (withdraw to L1) LPT on L2.\n","discoveryDrivenData":true},{"name":"ConstitutionHash","isVerified":true,"address":"arb1:0x1D62fFeB72e4c360CcBbacf7c965153b00260417","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"Keeps the current hash of the ArbitrumDAO Constitution. Settable by the L2UpgradeExecutor.\n","discoveryDrivenData":true},{"name":"L2SurplusFee","isVerified":true,"address":"arb1:0x32e7AF5A8151934F3787d0cD59EB6EDd0a736b1d","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients.\n","discoveryDrivenData":true},{"name":"StandardArbERC20","isVerified":true,"address":"arb1:0x3f770Ac673856F105b586bb393d122721265aD46","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"","discoveryDrivenData":true},{"name":"BeaconProxyFactory","isVerified":true,"address":"arb1:0x3fE38087A94903A9D946fa1915e1772fe611000f","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"","discoveryDrivenData":true},{"name":"UpgradeExecRouteBuilder","isVerified":true,"address":"arb1:0x7481716f05E315Fc4C4a64E56DcD9bc1D6F24C0a","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"","discoveryDrivenData":true},{"name":"L2ArbitrumToken","isVerified":true,"address":"arb1:0x912CE59144191C1204E64559FE8253a0e49E6548","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb1:0xdb216562328215E010F819B5aBe947bad4ca961e"],"implementations":["arb1:0xC4ed0A9Ea70d5bCC69f748547650d32cC219D882"]},"chain":"arbitrum","description":"The ARB token contract. Supply can be increased by the owner once per year by a maximum of 2%.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock_l2alias, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock_l2alias","delay":"no"}],"discoveryDrivenData":true},{"name":"SecurityCouncilMemberSyncAction","isVerified":true,"address":"arb1:0x9BF7b8884Fa381a45f8CB2525905fb36C996297a","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"Contract used by the security council management system to sync SecurityCouncil members between the L1 and the L2.\n","discoveryDrivenData":true},{"name":"L2BaseFee","isVerified":true,"address":"arb1:0xbF5041Fc07E1c866D15c749156657B8eEd0fb649","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"This contract receives all BaseFees: The transaction fee component that covers the minimum cost of Arbitrum transaction execution. They are withdrawable to a configurable set of recipients.\n","discoveryDrivenData":true},{"name":"L2GatewaysProxyAdmin","isVerified":true,"address":"arb1:0xd570aCE65C43af47101fC6250FD6fC63D1c22a86","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"* Roles:\n  * **owner**: L2UpgradeExecutor","discoveryDrivenData":true},{"name":"L2ProxyAdmin","isVerified":true,"address":"arb1:0xdb216562328215E010F819B5aBe947bad4ca961e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"* Roles:\n  * **owner**: L2UpgradeExecutor","discoveryDrivenData":true},{"name":"UpgradeableBeacon","isVerified":true,"address":"arb1:0xE72ba9418b5f2Ce0A6a40501Fe77c6839Aa37333","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"arbitrum","description":"","discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 17d 8h delay on code upgrades unless upgrade is initiated by the     Security Council in which case there is no delay."}]},"chainConfig":{"name":"arbitrum","chainId":42161,"explorerUrl":"https://arbiscan.io","coingeckoPlatform":"arbitrum-one","sinceTimestamp":1622240100,"multicallContracts":[{"address":"0xcA11bde05977b3631167028862bE2a173976CA11","batchSize":150,"sinceBlock":7654707,"version":"3"},{"sinceBlock":821923,"batchSize":150,"address":"0x842eC2c7D803033Edf55E478F461FC547Bc54EB2","version":"2"}],"apis":[{"type":"rpc","url":"https://arb1.arbitrum.io/rpc","callsPerMinute":1500},{"type":"etherscan","chainId":42161},{"type":"blockscoutV2","url":"https://arbitrum.blockscout.com/api/v2"}],"gasTokens":["ETH"]},"technology":{"sequencing":{"name":"Buffered forced transactions","description":"To force transactions from the host chain, users must first enqueue \"delayed\" messages in the \"delayed\" inbox of the Bridge contract. Only authorized Inboxes are allowed to enqueue delayed messages, and the so-called Inbox contract is the one used as the entry point by calling the `sendMessage` or `sendMessageFromOrigin` functions. If the centralized sequencer doesn't process the request within some time bound, users can call the `forceInclusion` function on the SequencerInbox contract to include the message in the canonical chain. The time bound is defined to be the minimum between 1d and the time left in the delay buffer. The delay buffer gets replenished over time and gets consumed every time the sequencer doesn't timely process a message. Only messages processed with a delay greater than 30m consume the buffer. The buffer is capped at 2d. The replenish rate is currently set at 1m every 20m. Even if the buffer is fully consumed, messages are still allowed to be delayed up to 30m.","references":[{"title":"Sequencer and censorship resistance - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer"}],"risks":[]},"dataAvailability":{"name":"All data required for proofs is published on chain","description":"All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.","risks":[],"references":[{"title":"Sequencing followed by deterministic execution - Arbitrum documentation","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"},{"title":"SequencerInbox.sol - source code, addSequencerL2BatchFromOrigin function","url":"https://etherscan.io/address/0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7#code"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Sequencer - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"title":"SequencerInbox.sol - source code, forceInclusion function","url":"https://etherscan.io/address/0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7#code"},{"title":"Sequencer Isn't Doing Its Job - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[],"references":[{"title":"Transaction lifecycle - Arbitrum documentation","url":"https://developer.offchainlabs.com/tx-lifecycle"},{"title":"L2 to L1 Messages - Arbitrum documentation","url":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"title":"Mainnet for everyone - Arbitrum Blog","url":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible and Stylus smart contracts are supported","description":"Arbitrum One supports smart contracts written in Solidity and other programming languages (Rust, C++) that compile to WASM. Such smart contracts are executed by nodes using either a geth fork or [a fork of wasmer](https://github.com/OffchainLabs/wasmer) inside the Nitro node, and can be proven with the onchain WASM VM.","risks":[],"references":[{"title":"Inside Arbitrum Nitro","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"},{"title":"A gentle introduction: Stylus","url":"https://docs.arbitrum.io/stylus/stylus-gentle-introduction"}]},{"name":"Arbitrum DAO is in charge of upgrades","description":"Arbitrum DAO allows $ARB token holders to propose and vote on changes to the organization and the technologies it governs. The governance smart contracts are implemented on Arbitrum One rollup chain. The DAO can upgrade the Arbitrum One contracts on L2 with 8d delay and - using L2 --> L1 Governance Relay, update contracts on L1 with additional 3d delay + 6d 8h delay for all L2 --> L1 messages (in total a delay of 17d 8h). The Security Council can upgrade the contracts without any delay. It can also cancel any upgrades initiated by the DAO.","risks":[],"references":[{"title":"Arbitrum DAO","url":"https://docs.arbitrum.foundation/concepts/arbitrum-dao"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"eth:0x0237e0EA0d86D53aF18dCf4CbE8182037b44ef1A","type":"EOA","isVerified":true,"name":"0x0237…ef1A","url":"https://etherscan.io/address/0x0237e0EA0d86D53aF18dCf4CbE8182037b44ef1A"},{"address":"eth:0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D","type":"EOA","isVerified":true,"name":"0x0C59…E32D","url":"https://etherscan.io/address/0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D"},{"address":"eth:0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc","type":"EOA","isVerified":true,"name":"0xC1b6…47cc","url":"https://etherscan.io/address/0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"Arbitrum Security Council","description":"A Multisig with 9/12 threshold. It uses the following modules: UpgradeExecutor (Central contract defining the access control permissions for upgrading the system contract implementations).\n* Can upgrade **with no delay**\n  * Outbox [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * SequencerInbox [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → UpgradeExecutorAdmin]\n  * Inbox [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * RollupProxy [via: UpgradeExecutor]\n  * RollupEventInbox [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * OutboxV0 [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → GatewaysAdmin]\n  * OutboxV1 [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * Bridge [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1ERC20Gateway [via: UpgradeExecutor → GatewaysAdmin]\n  * EdgeChallengeManager [via: UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1CustomGateway [via: UpgradeExecutor → GatewaysAdmin]\n  * L1Timelock [via: UpgradeExecutor → UpgradeExecutorAdmin]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]\n* Can interact with L1Timelock\n  * cancel queued transactions [via: UpgradeExecutor]\n  * update the minimum delay and manage all access control roles of the timelock [via: UpgradeExecutor]","accounts":[{"address":"eth:0xF06E95eF589D9c38af242a8AAee8375f14023F85","type":"Contract","isVerified":true,"name":"0xF06E…3F85","url":"https://etherscan.io/address/0xF06E95eF589D9c38af242a8AAee8375f14023F85"}],"chain":"ethereum","references":[{"title":"Security Council members - Arbitrum Foundation Docs","url":"https://docs.arbitrum.foundation/security-council-members"}],"participants":[{"address":"eth:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E","type":"EOA","isVerified":true,"name":"fred - Arbitrum 2","url":"https://etherscan.io/address/0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E"},{"address":"eth:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392","type":"EOA","isVerified":true,"name":"Michael Lewellen - blockaid","url":"https://etherscan.io/address/0xBBD2E01eFB88ce00F8f5b6B9a696966070089392"},{"address":"eth:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D","type":"EOA","isVerified":true,"name":"Certora 2","url":"https://etherscan.io/address/0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D"},{"address":"eth:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B","type":"EOA","isVerified":true,"name":"DennisonBertram-Tally","url":"https://etherscan.io/address/0x59c8535419BbCb8AdFFDB3C835435E907e3B183B"},{"address":"eth:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67","type":"EOA","isVerified":true,"name":"JohnMorrow-Gauntlet","url":"https://etherscan.io/address/0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67"},{"address":"eth:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8","type":"EOA","isVerified":true,"name":"GoncaloMagalhaes-Immunefi","url":"https://etherscan.io/address/0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8"},{"address":"eth:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33","type":"EOA","isVerified":true,"name":"gzeon-OffchainLabs","url":"https://etherscan.io/address/0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33"},{"address":"eth:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93","type":"EOA","isVerified":true,"name":"EmilianoBonassi-Conduit","url":"https://etherscan.io/address/0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93"},{"address":"eth:0x882c6FCb3D358b9d70B97c6999159cea64168B6F","type":"EOA","isVerified":true,"name":"GriffGreen-Giveth","url":"https://etherscan.io/address/0x882c6FCb3D358b9d70B97c6999159cea64168B6F"},{"address":"eth:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC","type":"EOA","isVerified":true,"name":"StevenThornton-OpenZeppelin","url":"https://etherscan.io/address/0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC"},{"address":"eth:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA","isVerified":true,"name":"bartek.eth-L2BEAT","url":"https://etherscan.io/address/0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae"},{"address":"eth:0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA","isVerified":true,"name":"yoav.eth-EF","url":"https://etherscan.io/address/0x475816ca2a31D601B4e336f5c2418A67978aBf09"}],"discoveryDrivenData":true},{"name":"Arbitrum Multisig 1","description":"A Multisig with 4/6 threshold. \n* Can interact with SequencerInbox\n  * Add/remove batchPosters (Sequencers) ","accounts":[{"address":"eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B","type":"Contract","isVerified":true,"name":"0xd0FD…679B","url":"https://etherscan.io/address/0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x375906ADFD34D93236084F462BB2dB0D92129Fe1","type":"EOA","isVerified":true,"name":"0x3759…9Fe1","url":"https://etherscan.io/address/0x375906ADFD34D93236084F462BB2dB0D92129Fe1"},{"address":"eth:0xfE2bf40f2A9183774BF8E871d634A4E50255158B","type":"EOA","isVerified":true,"name":"0xfE2b…158B","url":"https://etherscan.io/address/0xfE2bf40f2A9183774BF8E871d634A4E50255158B"},{"address":"eth:0x64379Dee676ab442B48925Ed603771f386510Ee7","type":"EOA","isVerified":true,"name":"0x6437…0Ee7","url":"https://etherscan.io/address/0x64379Dee676ab442B48925Ed603771f386510Ee7"},{"address":"eth:0x290Aa3E7533c873B3326DabFe7579e86ed951428","type":"EOA","isVerified":true,"name":"0x290A…1428","url":"https://etherscan.io/address/0x290Aa3E7533c873B3326DabFe7579e86ed951428"},{"address":"eth:0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C","type":"EOA","isVerified":true,"name":"0x4d9A…f49C","url":"https://etherscan.io/address/0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C"},{"address":"eth:0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe","type":"EOA","isVerified":true,"name":"0x79D3…9fCe","url":"https://etherscan.io/address/0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe"}],"discoveryDrivenData":true}]},"arbitrum":{"roles":[],"actors":[{"name":"L2SecurityCouncilPropose","description":"A Multisig with 9/12 threshold. It uses the following modules: L2UpgradeExecutor (This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2)).\n* Can upgrade **with 17d 8h delay**\n  * Outbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * SequencerInbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * UpgradeExecutor [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → UpgradeExecutorAdmin]\n  * Inbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * RollupProxy [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n  * RollupEventInbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * OutboxV0 [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * GatewayRouter [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * OutboxV1 [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * Bridge [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1ERC20Gateway [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * EdgeChallengeManager [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1CustomGateway [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * L1Timelock [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → UpgradeExecutorAdmin]\n* Can interact with L2Timelock\n  * propose transactions \n* Can interact with SecurityCouncilManager\n  * schedule a proposal to add a new member to the Security Council \n  * schedule a proposal to remove a Security Council member \n  * schedule a proposal to replace a Security Council member \n  * schedule a proposal to rotate a Security Council member (same member, new address) \n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n* Can interact with L1Timelock\n  * cancel queued transactions **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n  * propose transactions **with 14d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge]\n  * update the minimum delay and manage all access control roles of the timelock **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]","accounts":[{"address":"arb1:0xADd68bCb0f66878aB9D37a447C7b9067C5dfa941","type":"Contract","isVerified":true,"name":"0xADd6…a941","url":"https://arbiscan.io/address/0xADd68bCb0f66878aB9D37a447C7b9067C5dfa941"}],"chain":"arbitrum","references":[],"participants":[{"address":"arb1:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E","type":"EOA","isVerified":true,"name":"fred - Arbitrum 2","url":"https://arbiscan.io/address/0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E"},{"address":"arb1:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392","type":"EOA","isVerified":true,"name":"Michael Lewellen - blockaid","url":"https://arbiscan.io/address/0xBBD2E01eFB88ce00F8f5b6B9a696966070089392"},{"address":"arb1:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D","type":"EOA","isVerified":true,"name":"Certora 2","url":"https://arbiscan.io/address/0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D"},{"address":"arb1:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B","type":"EOA","isVerified":true,"name":"DennisonBertram-Tally","url":"https://arbiscan.io/address/0x59c8535419BbCb8AdFFDB3C835435E907e3B183B"},{"address":"arb1:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67","type":"EOA","isVerified":true,"name":"JohnMorrow-Gauntlet","url":"https://arbiscan.io/address/0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67"},{"address":"arb1:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8","type":"EOA","isVerified":true,"name":"GoncaloMagalhaes-Immunefi","url":"https://arbiscan.io/address/0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8"},{"address":"arb1:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33","type":"EOA","isVerified":true,"name":"gzeon-OffchainLabs","url":"https://arbiscan.io/address/0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33"},{"address":"arb1:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93","type":"EOA","isVerified":true,"name":"EmilianoBonassi-Conduit","url":"https://arbiscan.io/address/0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93"},{"address":"arb1:0x882c6FCb3D358b9d70B97c6999159cea64168B6F","type":"EOA","isVerified":true,"name":"GriffGreen-Giveth","url":"https://arbiscan.io/address/0x882c6FCb3D358b9d70B97c6999159cea64168B6F"},{"address":"arb1:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC","type":"EOA","isVerified":true,"name":"StevenThornton-OpenZeppelin","url":"https://arbiscan.io/address/0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC"},{"address":"arb1:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA","isVerified":true,"name":"bartek.eth-L2BEAT","url":"https://arbiscan.io/address/0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae"},{"address":"arb1:0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA","isVerified":true,"name":"yoav.eth-EF","url":"https://arbiscan.io/address/0x475816ca2a31D601B4e336f5c2418A67978aBf09"}],"discoveryDrivenData":true},{"name":"CoreGovernor","accounts":[{"address":"arb1:0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9","type":"Contract","isVerified":true,"name":"0xf07D…95B9","url":"https://arbiscan.io/address/0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9"}],"chain":"arbitrum","description":"Token governance contract accepting and managing constitutional Arbitrum Improvement Proposals (AIPs, core proposals) and, among other formal parameters, enforcing the 4.5% quorum for proposals.\n* Can upgrade **with 17d 8h delay**\n  * Outbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * SequencerInbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * UpgradeExecutor [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → UpgradeExecutorAdmin]\n  * Inbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * RollupProxy [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n  * RollupEventInbox [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * OutboxV0 [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * GatewayRouter [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * OutboxV1 [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * Bridge [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1ERC20Gateway [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * EdgeChallengeManager [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → ArbitrumProxyAdmin]\n  * L1CustomGateway [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → GatewaysAdmin]\n  * L1Timelock [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor → UpgradeExecutorAdmin]\n* Can interact with L2Timelock\n  * cancel queued transactions \n  * propose transactions \n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n* Can interact with L1Timelock\n  * cancel queued transactions **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]\n  * propose transactions **with 14d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge]\n  * update the minimum delay and manage all access control roles of the timelock **with 17d 8h delay** [via: L2Timelock with 8d delay → Outbox with 6d 8h delay → Bridge → L1Timelock with 3d delay → UpgradeExecutor]","discoveryDrivenData":true},{"name":"L2SecurityCouncilEmergency","description":"A Multisig with 9/12 threshold. It uses the following modules: L2UpgradeExecutor (This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2)).\n* Can upgrade **with no delay**\n  * L2ERC20Gateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2Timelock [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilMemberElectionGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2GatewayRouter [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2WethGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * SecurityCouncilMemberRemovalGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * TreasuryGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilNomineeElectionGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ArbitrumToken [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * TreasuryTimelock [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ARBGateway [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2UpgradeExecutor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilManager [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * CoreGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n* Can interact with L2Timelock\n  * manage all access control roles and change the minimum delay **with 8d delay** [via: L2UpgradeExecutor with 8d delay]\n* Can interact with SecurityCouncilManager\n  * manage all access control roles [via: L2UpgradeExecutor]","accounts":[{"address":"arb1:0x423552c0F05baCCac5Bfa91C6dCF1dc53a0A1641","type":"Contract","isVerified":true,"name":"0x4235…1641","url":"https://arbiscan.io/address/0x423552c0F05baCCac5Bfa91C6dCF1dc53a0A1641"}],"chain":"arbitrum","references":[],"participants":[{"address":"arb1:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E","type":"EOA","isVerified":true,"name":"fred - Arbitrum 2","url":"https://arbiscan.io/address/0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E"},{"address":"arb1:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392","type":"EOA","isVerified":true,"name":"Michael Lewellen - blockaid","url":"https://arbiscan.io/address/0xBBD2E01eFB88ce00F8f5b6B9a696966070089392"},{"address":"arb1:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D","type":"EOA","isVerified":true,"name":"Certora 2","url":"https://arbiscan.io/address/0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D"},{"address":"arb1:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B","type":"EOA","isVerified":true,"name":"DennisonBertram-Tally","url":"https://arbiscan.io/address/0x59c8535419BbCb8AdFFDB3C835435E907e3B183B"},{"address":"arb1:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67","type":"EOA","isVerified":true,"name":"JohnMorrow-Gauntlet","url":"https://arbiscan.io/address/0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67"},{"address":"arb1:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8","type":"EOA","isVerified":true,"name":"GoncaloMagalhaes-Immunefi","url":"https://arbiscan.io/address/0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8"},{"address":"arb1:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33","type":"EOA","isVerified":true,"name":"gzeon-OffchainLabs","url":"https://arbiscan.io/address/0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33"},{"address":"arb1:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93","type":"EOA","isVerified":true,"name":"EmilianoBonassi-Conduit","url":"https://arbiscan.io/address/0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93"},{"address":"arb1:0x882c6FCb3D358b9d70B97c6999159cea64168B6F","type":"EOA","isVerified":true,"name":"GriffGreen-Giveth","url":"https://arbiscan.io/address/0x882c6FCb3D358b9d70B97c6999159cea64168B6F"},{"address":"arb1:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC","type":"EOA","isVerified":true,"name":"StevenThornton-OpenZeppelin","url":"https://arbiscan.io/address/0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC"},{"address":"arb1:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA","isVerified":true,"name":"bartek.eth-L2BEAT","url":"https://arbiscan.io/address/0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae"},{"address":"arb1:0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA","isVerified":true,"name":"yoav.eth-EF","url":"https://arbiscan.io/address/0x475816ca2a31D601B4e336f5c2418A67978aBf09"}],"discoveryDrivenData":true},{"name":"SecurityCouncilMemberElectionGovernor","accounts":[{"address":"arb1:0x467923B9AE90BDB36BA88eCA11604D45F13b712C","type":"Contract","isVerified":true,"name":"0x4679…712C","url":"https://arbiscan.io/address/0x467923B9AE90BDB36BA88eCA11604D45F13b712C"}],"chain":"arbitrum","description":"Token governance contract for the Security Council member elections.\n* Can interact with SecurityCouncilManager\n  * schedule a proposal to replace a Security Council member cohort ","discoveryDrivenData":true},{"name":"SecurityCouncilMemberRemovalGovernor","accounts":[{"address":"arb1:0x6f3a242cA91A119F872f0073BC14BC8a74a315Ad","type":"Contract","isVerified":true,"name":"0x6f3a…15Ad","url":"https://arbiscan.io/address/0x6f3a242cA91A119F872f0073BC14BC8a74a315Ad"}],"chain":"arbitrum","description":"Token governance contract for the Security Council member removals.\n* Can interact with SecurityCouncilManager\n  * schedule a proposal to remove a Security Council member ","discoveryDrivenData":true},{"name":"GnosisSafeL2","description":"A Multisig with 3/5 threshold. ","accounts":[{"address":"arb1:0xc610984d9C96a7CE54Bcd335CEee9b0e3874380C","type":"Contract","isVerified":true,"name":"0xc610…380C","url":"https://arbiscan.io/address/0xc610984d9C96a7CE54Bcd335CEee9b0e3874380C"}],"chain":"arbitrum","references":[],"participants":[{"address":"arb1:0xf3b0B40e54Be009C852dBD3577F34D1D27bC07F6","type":"EOA","isVerified":true,"name":"0xf3b0…07F6","url":"https://arbiscan.io/address/0xf3b0B40e54Be009C852dBD3577F34D1D27bC07F6"},{"address":"arb1:0xa98290a7A282d8249544D35b288E160A5580D57E","type":"EOA","isVerified":true,"name":"0xa982…D57E","url":"https://arbiscan.io/address/0xa98290a7A282d8249544D35b288E160A5580D57E"},{"address":"arb1:0xc43a77b64b34551beA865C9E85A116B444EF44B1","type":"EOA","isVerified":true,"name":"0xc43a…44B1","url":"https://arbiscan.io/address/0xc43a77b64b34551beA865C9E85A116B444EF44B1"},{"address":"arb1:0x0adc7D8eB4C01219858a579C9539780CD9575035","type":"EOA","isVerified":true,"name":"0x0adc…5035","url":"https://arbiscan.io/address/0x0adc7D8eB4C01219858a579C9539780CD9575035"},{"address":"arb1:0xdE82B19aA75d93EB9Fca9a284dD0EB643d5e35C2","type":"EOA","isVerified":true,"name":"0xdE82…35C2","url":"https://arbiscan.io/address/0xdE82B19aA75d93EB9Fca9a284dD0EB643d5e35C2"}],"discoveryDrivenData":true},{"name":"L1Timelock_l2alias","accounts":[{"address":"arb1:0xf7951D92B0C345144506576eC13Ecf5103aC905a","type":"EOA","isVerified":true,"name":"0xf795…905a","url":"https://arbiscan.io/address/0xf7951D92B0C345144506576eC13Ecf5103aC905a"}],"chain":"arbitrum","description":"* Can upgrade **with no delay**\n  * L2ERC20Gateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2Timelock [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilMemberElectionGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2GatewayRouter [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2WethGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * SecurityCouncilMemberRemovalGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * TreasuryGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilNomineeElectionGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ArbitrumToken [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * TreasuryTimelock [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ARBGateway [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2UpgradeExecutor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * SecurityCouncilManager [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * CoreGovernor [via: L2UpgradeExecutor → L2ProxyAdmin]\n* Can interact with L2Timelock\n  * manage all access control roles and change the minimum delay **with 8d delay** [via: L2UpgradeExecutor with 8d delay]\n* Can interact with SecurityCouncilManager\n  * manage all access control roles [via: L2UpgradeExecutor]","discoveryDrivenData":true}]}},"stateDerivation":{"nodeSoftware":"The rollup node (Arbitrum Nitro) consists of four parts. The base layer is the core Geth server (with minor modifications to add hooks) that emulates the execution of EVM contracts and maintains Ethereum's state and [a fork of wasmer](https://github.com/OffchainLabs/wasmer) that is used for native WASM execution. The middle layer, ArbOS, provides additional Layer 2 functionalities such as decompressing data batches, accounting for Layer 1 gas costs, and supporting cross-chain bridge functionalities. The top layer consists of node software, primarily from Geth, that handles client connections (i.e., regular RPC node). [View Code](https://github.com/OffchainLabs/nitro/)","compressionScheme":"The Sequencer's batches are compressed using a general-purpose data compression algorithm known as [Brotli](https://github.com/google/brotli), configured to its highest compression setting.","genesisState":"They performed a regenesis from Classic to Nitro, and that file represents the [last Classic state](https://snapshot.arbitrum.foundation/arb1/nitro-genesis.tar). To sync from the initial Classic state, instructions can be found [here](https://docs.arbitrum.io/migration/state-migration).","dataFormat":"Nitro supports Ethereum's data structures and formats by incorporating the core code of the popular go-ethereum (\"Geth\") Ethereum node software. The batch is composed of a header and a compressed blob, which results from compressing concatenated RLP-encoded transactions using the standard RLP encoding."},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by anyone who has sufficient funds. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. State roots are referred to as \"assertions\" within the contracts. Each chain of assertions only requires one stake, and validators staked on assertions with a child are considered inactive and can either move their stake to a new node or withdraw it. The function used to propose a new assertion is the `stakeOnNewAssertion` function. The stake is currently set to 3600.0 ETH, and it can be slashed if the proposal is proven incorrect via a fraud proof. The protocol allows such funds to be trustlessly pooled together if necessary. New nodes cannot be created faster than the minimum assertion period, currently set to 15m. An assertion without \"rivals\" can be confirmed after the challenge period has passed, currently set to 6d 8h. If a rival is present, then it is checked that the assertion is the winner in the challenge protocol.","risks":[],"references":[{"title":"BoLD paper","url":"https://arxiv.org/pdf/2404.10491"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `createLayerZeroEdge` function in the `ChallengeManager` contract. Edges represent assertions, or bisected assertions, within the challenge protocol. Challenges are played via a bisection game, where asserters and challengers play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner. An edge can only be bisected when rivaled. The bisection process requires no new stake as their validity is checked against a parent \"history root\" that contains all intermediate states. An edge can also be confirmed if itself or its descendants spend enough time being unrivaled. Such time is set to 6d 8h. If both actors play as slow as possible, the maximum time to confirm an edge is double such value, i.e. 12d 17h. Due to the complexities of maintaining the history root, the challenge protocol is divided into 3 levels, where the lowest level represents assertions over blocks, the highest level represents assertions over single WASM instructions, and intermediate levels represent assertions over chunks of WASM instructions. When moving between levels, a new stake is required. Level 0 (block level) requires a stake of 0.0 ETH, level 1 requires a stake of 555.0 ETH, level 2 requires a stake of 79.0 ETH. The ratio between such stakes can be exploited to perform resource exhaustion attacks.","risks":[{"category":"Funds can be stolen if","text":"an attacker successfully performs a resource exhaustion attack."}],"references":[{"title":"Fraud Proof Wars: Arbitrum BoLD","url":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"milestones":[{"title":"ArbOS 40, Callisto Upgrade","url":"https://www.tally.xyz/gov/arbitrum/proposal/13108804573775967668959825241666341617107666532012387058509418598838035461528?govId=eip155:42161:0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9","date":"2025-06-18T00:00:00Z","type":"general"},{"title":"Timeboost transaction ordering policy introduced","url":"https://www.tally.xyz/gov/arbitrum/proposal/14881197137069494959448952699217598923721993392617887469969318742509097999570?govId=eip155:42161:0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9","date":"2025-04-29T00:00:00Z","type":"general"},{"title":"BoLD, permissionless proof system, deployed","url":"https://x.com/arbitrum/status/1889710151332245837","date":"2025-02-15T00:00:00Z","type":"general"},{"title":"Exit window extension to 7 days","url":"https://www.tally.xyz/gov/arbitrum/proposal/27888300053486667232765715922683646778055572080881341292116987136155397805421?govId=eip155:42161:0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9","date":"2024-10-25T00:00:00Z","type":"general"},{"title":"ArbOS 32 Emergency upgrade","url":"https://github.com/OffchainLabs/nitro/releases/tag/v3.2.0","date":"2024-09-25T00:00:00Z","description":"SecurityCouncil emergency upgrades to fix attack vectors related to Stylus resource pricing.","type":"incident"},{"title":"ArbOS 31 Bianca upgrade","url":"https://www.tally.xyz/gov/arbitrum/proposal/108288822474129076868455956066667369439381709547570289793612729242368710728616","date":"2024-09-03T00:00:00Z","description":"Arbitrum upgrades to ArbOS 31 activating Stylus (new languages for smart contracts).","type":"general"},{"title":"Arbitrum starts using blobs","url":"https://twitter.com/arbitrum/status/1768306107318178061","date":"2024-03-14T00:00:00Z","description":"Arbitrum starts publishing data to blobs.","type":"general"},{"title":"ARB token airdrop","url":"https://twitter.com/arbitrum/status/1638888588443111425","date":"2023-03-23T00:00:00Z","description":"ARB token launched as a governance token for Arbitrum DAO.","type":"general"},{"title":"Nitro Upgrade","url":"https://medium.com/offchainlabs/arbitrum-nitro-one-small-step-for-l2-one-giant-leap-for-ethereum-bc9108047450","date":"2022-08-31T00:00:00Z","description":"Upgrade is live, introducing new architecture, increased throughput and lower fees.","type":"general"},{"title":"Odyssey paused","url":"https://twitter.com/arbitrum/status/1542159109511847937","date":"2022-06-29T00:00:00Z","description":"Due to the heavy load being put on the chain, Odyssey program got paused.","type":"incident"},{"title":"Odyssey started","url":"https://twitter.com/arbitrum/status/1539292126105706496","date":"2022-06-21T00:00:00Z","description":"Incentives program to onboard new users has started.","type":"general"},{"title":"Mainnet for everyone","description":"Whitelist got removed, there are no restrictions on who can transact with the network.","url":"https://twitter.com/arbitrum/status/1432817424752128008","date":"2021-08-31T00:00:00Z","type":"general"}],"badges":[{"id":"Nitro","type":"Stack","name":"Built on Arbitrum Nitro","description":"The project is built on Arbitrum Nitro","action":{"type":"scalingFilter","id":"stack","value":"Arbitrum"}},{"id":"EthereumBlobs","type":"DA","name":"Ethereum with blobs","description":"This project is posting its data to Ethereum as blobs","action":{"type":"publicDaHighlight","slug":"ethereum"}},{"id":"WasmVM","type":"VM","name":"WasmVM","description":"This project uses a WebAssembly Virtual Machine to run its smart contracts","action":{"type":"scalingFilter","id":"vm","value":"WasmVM"}},{"id":"Governance","type":"Other","name":"Governance","description":"This project features token voting","action":{"type":"scalingFilter","id":"other","value":"Governance"}},{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}}],"dataAvailability":{"layer":{"value":"Ethereum","secondLine":"Blobs or Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata or blobs.","projectId":"ethereum"},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted onchain.","projectId":"ethereum"},"mode":{"value":"Transaction data","secondLine":"Compressed"}},"scopeOfAssessment":{"inScope":["L1 core contracts","L2 core contracts","Gas token","Derivation logic spec","Source code to program hash mapping"],"notInScope":["Source code implementation of the spec","Sequencer policy","Non-gas tokens"]},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"arbitrum":1755156465,"ethereum":1755156465},"hasDiscoUi":false},"ecosystemInfo":{"id":"arbitrum-orbit"},"upgradesAndGovernance":"\nAll critical system smart contracts are upgradeable (can be arbitrarily changed). This permission is governed by the Arbitrum Decentralized Autonomous Organization (DAO)\nand their elected Security Council. The Arbitrum DAO controls Arbitrum One and Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s.\nWhile the DAO governs through token-weighted governance in their associated ARB token, the Security Council can directly act through\nmultisigs on all three chains. Although they are technically separate and connect to different target permissions,\ntheir member- and threshold configuration is kept in sync by a manager contract on Arbitrum One sending crosschain transactions.\n\nRegular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (Proposer-) Security Council on Arbitrum One\nand pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs\n(one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts.\nThese two general paths have the same destination: the respective UpgradeExecutor smart contract.\n\nRegular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a\nCoreGovernor-enforced 4.5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 8d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h.\nWhen that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited,\nand, in the case of the final L1 timelock, cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner restricted functions of the respective destination smart contracts\nthrough the UpgradeExecutor on Ethereum. If the predefined  transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\n\nOperator roles like the Sequencers and Validators are managed using the same paths.\nSequencer changes can be delegated to a Batch Poster Manager role.\n\nTransactions targeting the Arbitrum DAO Treasury can be scheduled in the 3d\nTreasury Timelock by meeting a TreasuryGovernor-enforced 3% threshold of votable ARB tokens. The Security Council cannot regularly cancel\nthese transactions or schedule different ones but can overwrite them anyway by having upgrade permissions for all the underlying smart contracts."}