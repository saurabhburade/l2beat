{"type":"layer2","id":"canvasconnect","capability":"universal","addedAt":1623153328,"archivedAt":1715644800,"display":{"name":"Canvas Connect","slug":"canvasconnect","warning":"Canvas Connect is currently open only to whitelisted institutional clients.","description":"Canvas Connect is a Layer 2 solution based on StarkEx technology, specifically designed to provide centralized investment and trading services to financial institutions.","purposes":["Privacy","Exchange"],"stacks":["StarkEx"],"category":"Validium","links":{"websites":["https://canvas.co/"],"documentation":["https://docs.starkware.co/starkex/index.html"],"repositories":["https://github.com/starkware-libs/starkex-contracts"],"socialMedia":["https://twitter.com/canvas_defi","https://canvasdefi.medium.com/","https://linkedin.com/company/canvasblockchaingroup","https://canvas.co/content","https://youtube.com/@canvas_defi"]}},"proofSystem":{"type":"Validity"},"stage":{"stage":"NotApplicable"},"config":{"escrows":[{"address":"0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d","sinceTimestamp":1675209600,"tokens":["ETH","USDC"],"contract":{"isVerified":true,"address":"eth:0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d","upgradeability":{"proxyType":"StarkWare diamond","admins":["eth:0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A"],"implementations":["eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583","eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12","eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb","eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D","eth:0x613ee54C54D5548627064B4D648942bF3648f376","eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F","eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"],"immutable":false},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true}]},"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"1/2 DAC Members","sentiment":"bad","description":"There is a threshold of 1/2 members that must sign and attest that the data is correct and available.","orderHint":-0.02},"mode":{"value":"State diffs"}},"riskView":{"stateValidation":{"value":"Validity proofs (ST)","description":"STARKs are zero knowledge proofs that ensure state correctness.","sentiment":"good","orderHint":null},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.","sentiment":"bad","orderHint":0.5},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":-604800},"sequencerFailure":{"value":"Force via L1","description":"Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.","sentiment":"good","orderHint":604800},"proposerFailure":{"value":"Use escape hatch","description":"Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.","sentiment":"good","orderHint":null}},"stateValidation":{"categories":[{"title":"Validity proofs","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.","risks":[],"references":[{"title":"Enforcing Consistency on the On-Chain State - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"}]}]},"technology":{"dataAvailability":{"name":"Data is not stored on chain","description":"The balances of the users are not published onchain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted onchain only if at least a quorum of the committee members sign a state update.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"title":"Data Availability Modes - StarkEx documentation","url":"https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"},{"title":"Validium - StarkEx documentation","url":"https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"},{"title":"Availability Verifiers - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Operator - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"}]},"forceTransactions":{"name":"Users can force exit the system","description":"Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract onchain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."}],"references":[{"title":"Censorship Prevention - StarkEx documentation","url":"https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is settled the funds become available for withdrawal on L1.ZK proofs are required to settle blocks. Finally the user submits an L1 transaction to claim the funds. When withdrawing NFTs they are minted on L1.","risks":[],"references":[{"title":"Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/withdrawal.html"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"title":"Forced Operations - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"},{"title":"Full Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"}]},{"name":"Emergency exit","description":"If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.","risks":[],"references":[{"title":"Forced Operations - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"},{"title":"Full Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"}]}]},"contracts":{"addresses":{"ethereum":[{"name":"StarkExchange","isVerified":true,"address":"eth:0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d","upgradeability":{"proxyType":"StarkWare diamond","admins":["eth:0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A"],"implementations":["eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583","eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12","eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb","eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D","eth:0x613ee54C54D5548627064B4D648942bF3648f376","eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F","eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"],"immutable":false},"chain":"ethereum","description":"Central Validium contract. Receives (verified) state roots from the Operator, allows users to consume L2 -> L1 messages and send L1 -> L2 messages. Critical configuration values for the L2's logic are defined here by various governance roles.\n* Roles:\n  * **admin**: EOA 1\n  * **operators**: EOA 2, EOA 4\n  * **tokenAdmins**: EOA 3","upgradableBy":[{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"DACommittee","isVerified":true,"address":"eth:0x8B3A6662809195453645e37C2005d655f57ca818","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Data Availability Committee (DAC) contract verifying and storing data availability claims from DAC Members (via a multisignature check). The threshold of valid signatures is 1.\n","discoveryDrivenData":true},{"name":"SHARPVerifierCallProxy","isVerified":true,"address":"eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60","upgradeability":{"proxyType":"StarkWare proxy","admins":["eth:0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"],"implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],"immutable":false},"chain":"ethereum","description":"Upgradable call proxy contract through which the SHARPVerifier can be called. A call proxy does not delegatecall and the storage context remains at the target contract. It allows SHARP Multisig to change the otherwise immutable verifier contract with 8d delay.\n* Roles:\n  * **admin**: SHARP Multisig","upgradableBy":[{"name":"SHARP Multisig","delay":"8d"}],"discoveryDrivenData":true},{"name":"SHARPVerifier","isVerified":true,"address":"eth:0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Shared Starkware SHARP verifier used collectively by Starknet and other SN stack and StarkEx projects. It receives STARK proofs from the Prover and verifies the integrity of the offchain execution including a correctly computed state root which is part of the Program Output.\n","discoveryDrivenData":true},{"name":"GpsFactRegistryAdapter","isVerified":true,"address":"eth:0x5339AB7557b3152b91A57D10B0Caf5da88Db5143","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Adapter between the core contract and the SHARPVerifierCallProxy. Stores the Cairo programHash (`16830627573509542901909952446321116535677491650708854009406762893086223513`).\n","discoveryDrivenData":true},{"name":"OrderRegistry","isVerified":true,"address":"eth:0x806d435a82B0381bD884540c2235147c13B97fe6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Helper contract for registering limit orders from L1.\n","discoveryDrivenData":true},{"name":"MemoryPageFactRegistry","isVerified":true,"address":"eth:0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Auxiliary to the SHARPVerifier contract: Verified 'memory fact pages' get stored here. This is important as it registers all necessary onchain data produced by the verifier.\n","discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"permissions":{"ethereum":{"roles":[{"name":"Operator","description":"Permissioned to regularly update the state roots of the L2 on L1. Each state update must have been proven via the SHARP verifier and contains commitments to the data that is itself kept offchain.","accounts":[{"address":"eth:0x107691bD4F590270B9793c807cB912DD278e8cB5","type":"EOA","isVerified":true,"name":"0x1076…8cB5","url":"https://etherscan.io/address/0x107691bD4F590270B9793c807cB912DD278e8cB5"},{"address":"eth:0x5751a83170BeA11fE7CdA5D599B04153C021f21A","type":"EOA","isVerified":true,"name":"0x5751…f21A","url":"https://etherscan.io/address/0x5751a83170BeA11fE7CdA5D599B04153C021f21A"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Governor","description":"Permissioned to manage the Operator role, finalize state and change critical parameters like the programHash, configHash, or message cancellation delay in the core contract.","accounts":[{"address":"eth:0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A","type":"EOA","isVerified":true,"name":"EOA 1","url":"#EOA 1"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"SHARP Multisig","description":"A Multisig with 2/4 threshold. \n* Can upgrade **with 8d delay**\n  * SHARPVerifierCallProxy [via: - acting directly with 8d delay]","accounts":[{"address":"eth:0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4","type":"Contract","isVerified":true,"name":"0x21F9…AEc4","url":"https://etherscan.io/address/0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x0405107a60391Eb51821be373ff978115Ee58488","type":"EOA","isVerified":true,"name":"0x0405…8488","url":"https://etherscan.io/address/0x0405107a60391Eb51821be373ff978115Ee58488"},{"address":"eth:0x59232aC80E6d403b6381393e52f4665ECA328558","type":"EOA","isVerified":true,"name":"0x5923…8558","url":"https://etherscan.io/address/0x59232aC80E6d403b6381393e52f4665ECA328558"},{"address":"eth:0xebc8416179fE90854fe8B3f774801165572cfD7F","type":"EOA","isVerified":true,"name":"0xebc8…fD7F","url":"https://etherscan.io/address/0xebc8416179fE90854fe8B3f774801165572cfD7F"},{"address":"eth:0x955B978F3ee7818dA71fA25c676062E6BC462Fec","type":"EOA","isVerified":true,"name":"0x955B…2Fec","url":"https://etherscan.io/address/0x955B978F3ee7818dA71fA25c676062E6BC462Fec"}],"discoveryDrivenData":true},{"name":"EOA 1","accounts":[{"address":"eth:0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A","type":"EOA","isVerified":true,"name":"0xc7C7…8C7A","url":"https://etherscan.io/address/0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A"}],"chain":"ethereum","description":"* Can upgrade **with no delay**\n  * StarkExchange \n* Can interact with StarkExchange\n  * manage the token admin role \n* A Governor - acting directly","discoveryDrivenData":true},{"name":"EOA 3","accounts":[{"address":"eth:0x3e10FD04BfCE4dBF496d72F39172347Bf887ac1D","type":"EOA","isVerified":true,"name":"0x3e10…ac1D","url":"https://etherscan.io/address/0x3e10FD04BfCE4dBF496d72F39172347Bf887ac1D"}],"chain":"ethereum","description":"* Can interact with StarkExchange\n  * Can regsiter new tokens for deposits and withdrawals ","discoveryDrivenData":true}]}},"milestones":[],"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1747113875},"hasDiscoUi":false}}