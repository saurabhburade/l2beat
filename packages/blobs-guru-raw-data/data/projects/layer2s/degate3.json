{"archivedAt":1752041971,"type":"layer2","id":"degate3","capability":"appchain","addedAt":1684838286,"badges":[{"id":"AppChain","type":"VM","name":"Application-specific chain","description":"This project is built to operate a specific application","action":{"type":"scalingFilter","id":"vm","value":"AppChain"}},{"id":"EthereumCalldata","type":"DA","name":"Ethereum with calldata","description":"This project is posting its data to Ethereum as calldata","action":{"type":"publicDaHighlight","slug":"ethereum"}},{"id":"LoopringFork","type":"Fork","name":"Fork of Loopring","description":"The project is fork of Loopring","action":{"type":"scalingFilter","id":"stack","value":"Loopring"}}],"display":{"name":"DeGate V1","slug":"degate3","description":"DeGate is a ZK Rollup enabling a decentralized order book exchange. DeGate smart contracts are forked from Loopring V3.","purposes":["Exchange","NFT"],"stacks":["Loopring"],"headerWarning":"A system **shutdown** [was triggered](https://etherscan.io/tx/0xa3a340cfebbdbf9999e61cc3838f67d21610944704f9b2546e2fe95435134d5c#eventlog) on 2025-06-27. This irreversible action freezes the L2 state and allows users to withdraw their funds with the help of the operator. Degate announced that they [will withdraw all funds automatically](https://medium.com/degate/announcement-sunsetting-of-orderbook-f9c0d3389e51). If the operator does not cooperate, a withdrawal mode can still be activated, allowing users to withdraw their funds on their own by providing merkle proofs.","links":{"websites":["https://degate.com/"],"bridges":["https://app.degate.com/"],"documentation":["https://docs.degate.com/"],"repositories":["https://github.com/degatedev/protocols"],"socialMedia":["https://twitter.com/DeGateDex","https://discord.gg/degate","https://youtube.com/@degatedex1718","https://medium.com/degate","https://mirror.xyz/0x078a601f492043C8e7D0E15B0F8815f58b4c342f"]},"liveness":{"explanation":"DeGate is a ZK rollup based on Loopring’s code base that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. "}},"proofSystem":{"type":"Validity","zkCatalogId":"loopringprover"},"chainConfig":{"name":"degate3","apis":[{"type":"degate3","url":"https://v1-mainnet-backend.degate.com/order-book-api","callsPerMinute":120}]},"config":{"associatedTokens":["DG"],"escrows":[{"address":"0x54D7aE423Edb07282645e740C046B9373970a168","sinceTimestamp":1699746983,"tokens":"*","contract":{"isVerified":true,"address":"eth:0x54D7aE423Edb07282645e740C046B9373970a168","upgradeability":{"proxyType":"ZeppelinOS proxy","admins":["eth:0xf2991507952d9594E71A44A54fb19f3109D213A5"],"implementations":["eth:0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1699747043,"transactionHash":"0xb1e5bc43a9a516618be17e0075ca12b7420b5daa42e377af2906a2c8d9619bdc","implementations":["eth:0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"]}]},"chain":"ethereum","includeInTotal":true}],"activityConfig":{"type":"block"},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD","selector":"0x377bb770","functionSignature":"function submitBlocks(bool isDataCompressed,bytes data)","sinceTimestamp":1699747007}}],"liveness":{"duplicateData":{"from":"stateUpdates","to":"proofSubmissions"}}},"scopeOfAssessment":{"inScope":["L1 core contracts","Gas token","Derivation logic spec"],"notInScope":["Source code implementation of the spec","Source code to verification keys mapping","Trusted setup","Sequencer policy","Non-gas tokens"]},"dataAvailability":{"layer":{"value":"Ethereum","secondLine":"Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata.","projectId":"ethereum"},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted onchain.","projectId":"ethereum"},"mode":{"value":"State diffs"}},"riskView":{"stateValidation":{"value":"Validity proofs (SN)","description":"SNARKs are succinct zero knowledge proofs that ensure state correctness, but require trusted setup.","sentiment":"good","orderHint":null,"executionDelay":0},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","orderHint":null},"exitWindow":{"value":"1mo","description":"Users have 1mo to exit funds in case of an unwanted regular upgrade. There is a 1mo 15d delay before a regular upgrade is applied, and withdrawals can take up to 15d to be processed.","sentiment":"good","orderHint":2592000},"sequencerFailure":{"value":"Force via L1","description":"Users can force the sequencer to include a withdrawal transaction by submitting a request through L1 with a 0.01 ETH fee. If the sequencer is down for more than 15d, users can use the exit hatch to withdraw their funds. The sequencer can censor individual deposits, but in such case after 15d users can get their funds back.","sentiment":"good","orderHint":1296000},"proposerFailure":{"value":"Use escape hatch","description":"Users are able to trustlessly exit by submitting a Merkle proof of funds.","sentiment":"good","orderHint":null}},"stage":{"stage":"Stage 2","summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":true,"description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/degatedev/degate-state-recover)"}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"Users are able to exit without the help of the permissioned operators."}],"principle":{"satisfied":true,"description":"Compromising ≥75% of the Security Council is the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal) with a <7d exit window."}},{"stage":"Stage 2","requirements":[{"satisfied":true,"description":"Users have at least 30d to exit as the system upgrades have a 45d delay."}]}],"additionalConsiderations":{"short":"Degate provides an orderbook decentralized exchange for spot trading. Arbitrary contracts are not supported.","long":"Degate provides an orderbook decentralized exchange for spot trading. Arbitrary contracts are not supported."}},"technology":{"dataAvailability":{"name":"All data required for proofs is published onchain","description":"All the data that is used to construct the system state is published onchain in the form of cheap calldata. This ensures that it will always be available when needed.","risks":[],"references":[{"title":"Introduction - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#design-features"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"ExchangeV3.sol#L341-L348 - DeGate source code","url":"https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L341"},{"title":"LoopringIOExchangeOwner.sol#L98-L101 - DeGate source code","url":"https://etherscan.io/address/0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD#code#F1#L98"}]},"forceTransactions":{"name":"Users can force exit the system","description":"Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract onchain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."}],"references":[{"title":"Forced Withdrawals - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is settled the funds become available for withdrawal on L1. ZK proofs are required to settle blocks. Finally the user submits an L1 transaction to claim the funds.","risks":[],"references":[{"title":"Withdraw - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#normal-withdrawal"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"title":"Forced Request Handling - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"},{"title":"ExchangeV3.sol#L392 - DeGate source code, forceWithdraw function","url":"https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L392"}]},{"name":"Emergency exit","description":"If the 15d deadline passes and the forced exit is still ignored the user can put the system into Withdrawal Mode, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.","risks":[],"references":[{"title":"Forced Request Handling - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#exodus-mode"},{"title":"ExchangeV3.sol#L420 - DeGate source code, withdrawFromMerkleTree function","url":"https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L420"}]}]},"stateDerivation":{"nodeSoftware":"Node software source code can be found [here](https://github.com/degatedev/degate-state-recover).","compressionScheme":"No compression is used.","genesisState":"The system does not begin with a genesis state; instead, it initiates from a zero state, as referenced in [`CreateEmptyState`](https://github.com/degatedev/degate-state-recover/blob/main/statemanager/state.go#L28).","dataFormat":"DeGate bundles off-chain transactions into [zkBlocks](https://github.com/degatedev/protocols/blob/degate_mainnet/Circuit%20Design.md#zkblock) and submits them to the blockchain. zkBlock data definition is documented [here](https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#zkblock-data-definition)."},"stateValidation":{"description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","categories":[{"title":"ZK Circuits","description":"DeGate utilizes Groth16 for their proving system. The source code of the circuits can be found [here](https://github.com/degatedev/protocols/tree/degate_mainnet/packages/loopring_v3/circuit).","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}]},{"title":"Verification Keys Generation","description":"Groth16 requires a circuit specific trusted setup, so they run their own ceremony. The first phase is run using Powers of Tau ceremony. Some of the instructions on how to regenerate the verification keys can be found [here](https://github.com/degatedev/trusted_setup/tree/master)."},{"title":"Validity proofs","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","risks":[],"references":[{"title":"Operator - DeGate design doc","url":"https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"}]}],"proofVerification":{"shortDescription":"DeGate is a DEX rollup on Ethereum, based on Loopring V3.","aggregation":false,"requiredTools":[{"name":"Custom tool","version":"v1.1.0","link":"https://github.com/degatedev/trusted_setup/tree/master"}],"verifiers":[{"name":"BlockVerifier","description":"DeGate utilizes Groth16 for their proving system.","verified":"no","contractAddress":"0xE3B7fE3ce0fa54C5AC7F48E7ED9E52dA045bE4d6","chainId":1,"subVerifiers":[{"name":"Main circuit","proofSystem":"Groth16","mainArithmetization":"R1CS+QAP","mainPCS":"N/A","trustedSetup":"?","link":"https://github.com/degatedev/protocols/tree/degate_mainnet/packages/loopring_v3/circuit"}]}]}},"permissions":{"ethereum":{"actors":[{"id":"BlockVerifier Owner","name":"BlockVerifier Owner","accounts":[{"address":"eth:0xacD3A62F3eED1BfE4fF0eC8240d645c1F5477F82","type":"EOA","isVerified":true,"name":"0xacD3…7F82","url":"https://etherscan.io/address/0xacD3A62F3eED1BfE4fF0eC8240d645c1F5477F82"}],"description":"This address is the owner of the BlockVerifier contract.","chain":"ethereum"},{"id":"Block Submitters","name":"Block Submitters","accounts":[{"address":"eth:0x4e3FE240B50A445fc6137a6363aC3593Af173b8a","type":"EOA","isVerified":true,"name":"0x4e3F…3b8a","url":"https://etherscan.io/address/0x4e3FE240B50A445fc6137a6363aC3593Af173b8a"}],"description":"Actors who can submit new blocks, updating the L2 state on L1.","chain":"ethereum"},{"id":"Degate HomeDAO2 Multisig","name":"Degate HomeDAO2 Multisig","accounts":[{"address":"eth:0x2028834B2c0A36A918c10937EeA71BE4f932da52","type":"Contract","isVerified":true,"name":"0x2028…da52","url":"https://etherscan.io/address/0x2028834B2c0A36A918c10937EeA71BE4f932da52"}],"description":"Actor allowed to upgrade the ExchangeV3 and DefaultDepositContract contracts. This address is the owner of the following contracts: LoopringIOExchangeOwner, LoopringV3, DefaultDepositContract. Can add or remove block submitters. Can change the forced withdrawal fee up to 0.25 ETH. Can change a way that balance is calculated per contract during the deposit, allowing the support of non-standard tokens.","chain":"ethereum"}]}},"contracts":{"addresses":{"ethereum":[{"name":"ExchangeV3","isVerified":true,"address":"eth:0x9C07A72177c5A05410cA338823e790876E79D73B","upgradeability":{"proxyType":"ZeppelinOS proxy","admins":["eth:0x0D2eC0a5858730E7D49f5B4aE6f2C665e46c1d9d"],"implementations":["eth:0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1699747019,"transactionHash":"0x618d6d6bdaa4be3257aa4c695f9c10806e261f0e9759fc3133a5798fed43c062","implementations":["eth:0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b"]}],"description":"Main ExchangeV3 contract.","upgradableBy":[{"name":"Degate HomeDAO2 Multisig","delay":"1mo 15d"}]},{"name":"LoopringIOExchangeOwner","isVerified":true,"address":"eth:0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract used by the Prover to submit exchange blocks with zkSNARK proofs that are later processed and verified by the BlockVerifier contract."},{"name":"DefaultDepositContract","isVerified":true,"address":"eth:0x54D7aE423Edb07282645e740C046B9373970a168","upgradeability":{"proxyType":"ZeppelinOS proxy","admins":["eth:0xf2991507952d9594E71A44A54fb19f3109D213A5"],"implementations":["eth:0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1699747043,"transactionHash":"0xb1e5bc43a9a516618be17e0075ca12b7420b5daa42e377af2906a2c8d9619bdc","implementations":["eth:0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"]}],"description":"ERC 20 token basic deposit contract. Handles user deposits and withdrawals.","upgradableBy":[{"name":"Degate HomeDAO2 Multisig","delay":"1mo 15d"}]},{"name":"LoopringV3","isVerified":true,"address":"eth:0x9385aCd9d78dFE854c543294770d0C94c2B07EDC","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract for setting exchange fee parameters."},{"name":"BlockVerifier","isVerified":true,"address":"eth:0xE3B7fE3ce0fa54C5AC7F48E7ED9E52dA045bE4d6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"zkSNARK Verifier based on ethsnarks library."},{"name":"TimeLock1","isVerified":true,"address":"eth:0x0D2eC0a5858730E7D49f5B4aE6f2C665e46c1d9d","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"This timelock contract is set as the proxyOwner of the ExchangeV3 contract. There is a 1mo 15d time delay for upgrading the contract."},{"name":"TimeLock2","isVerified":true,"address":"eth:0xf2991507952d9594E71A44A54fb19f3109D213A5","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"This timelock contract is set as the proxyOwner of the DefaultDepositContract contract. There is a 1mo 15d time delay for upgrading the contract."}]},"risks":[]},"milestones":[{"title":"Shutdown mode activated","url":"https://medium.com/degate/announcement-sunsetting-of-orderbook-f9c0d3389e51","date":"2025-06-26T00:00:00Z","description":"Shutdown mode prevents further state updates and allows users to withdraw their funds.","type":"incident"},{"title":"DeGate Mainnet Beta Redeploy","url":"https://medium.com/degate/degate-mainnet-beta-redeployment-oct-2023-e07c8eeaec4c","date":"2023-11-13T00:00:00Z","description":"DeGate redeploys Mainnet Beta due to a bug, with the ability to upgrade the smart contracts.","type":"incident"}],"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"baseTimestamp":1751034767,"hasDiscoUi":false}}