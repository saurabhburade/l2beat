{"type":"layer2","id":"edgex","capability":"appchain","addedAt":1760313600,"badges":[{"id":"CairoVM","type":"VM","name":"CairoVM","description":"This project uses the Cairo Virtual Machine to run its smart contracts and supports the Cairo programming language","action":{"type":"scalingFilter","id":"vm","value":"CairoVM"}},{"id":"DAC","type":"DA","name":"Data Availability Committee","description":"There is a Data Availability Committee that provides/attests to data availability","action":{"type":"selfDaHighlight"}},{"id":"StarkEx","type":"Stack","name":"StarkEx","description":"This project was deployed utilizing the StarkEx technology from StarkWare","action":{"type":"scalingFilter","id":"stack","value":"StarkEx"}},{"id":"SHARP","type":"Infra","name":"Uses SHARP","description":"The project uses a shared prover contract - SHARP","action":{"type":"scalingFilter","id":"infrastructure","value":"SHARP"}}],"reasonsForBeingOther":[{"label":"Low DAC threshold","shortDescription":"The data availability committee threshold is too low","description":"Projects with a low DAC threshold rely on the honesty of few entities to safely attest data availability on Ethereum. These entities can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"display":{"name":"EdgeX","slug":"edgex","stacks":["SN Stack","StarkEx"],"description":"EdgeX is a high-performance on-chain trading platform, build as an L2 on Starknet's StarkEx tech.","purposes":["Exchange"],"links":{"websites":["https://edgex.exchange"],"documentation":["https://edgex-1.gitbook.io/edgeX-documentation"],"bridges":["https://pro.edgex.exchange"],"socialMedia":["https://x.com/edgeX_exchange","https://discord.com/invite/edgeX","https://medium.com/@edgexexchange","https://t.me/edgeX_exchange"]}},"proofSystem":{"type":"Validity","zkCatalogId":"stone"},"stage":{"stage":"NotApplicable"},"chainConfig":{"name":"edgex","apis":[{"type":"starkex","product":["edgex"]}]},"config":{"activityConfig":{"type":"day","sinceTimestamp":1720435943,"resyncLastDays":7,"batchSize":10,"dataSource":"StarkEx Aggregations API"},"escrows":[{"address":"0xfAaE2946e846133af314d1Df13684c89fA7d83DD","sinceTimestamp":1720435859,"tokens":["USDT"],"contract":{"isVerified":true,"address":"eth:0xfAaE2946e846133af314d1Df13684c89fA7d83DD","upgradeability":{"proxyType":"StarkWare diamond","admins":["eth:0x17b287122363a0a6dBA7F185347DFcfb9816dA6e"],"implementations":["eth:0x8C43C9bec15d82D153C52518030e0a9590ABD35d","eth:0x540Ad8576d2F90f28994ab001622F964945854A8","eth:0x1BC9C618B7FA6b5EfAAD31DC801eB55c608B9310","eth:0x45de249eEa8f9CDB70943B17CceDeb42F5BA0175","eth:0x31e2d974BaC547101413c24C23443AD488423f64"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1720435943,"transactionHash":"0xb4a37a973c29b0213d2622a6ab1faac67ac73ca271c14664818b3f9604cb7eaf","implementations":["eth:0x8C43C9bec15d82D153C52518030e0a9590ABD35d","eth:0x540Ad8576d2F90f28994ab001622F964945854A8","eth:0x1BC9C618B7FA6b5EfAAD31DC801eB55c608B9310","eth:0x45de249eEa8f9CDB70943B17CceDeb42F5BA0175","eth:0x31e2d974BaC547101413c24C23443AD488423f64"]}]},"chain":"ethereum","includeInTotal":true}]},"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"1/5 DAC Members","sentiment":"bad","description":"There is a threshold of 1/5 members that must sign and attest that the data is correct and available.","orderHint":-0.05},"mode":{"value":"State diffs"}},"riskView":{"stateValidation":{"value":"Validity proofs (ST)","description":"STARKs are zero knowledge proofs that ensure state correctness.","sentiment":"good","orderHint":null},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/5 that is tasked with protecting and supplying the data.","sentiment":"bad","orderHint":0.2},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":-604800},"sequencerFailure":{"value":"Force via L1","description":"Users can force the sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for 7d, users can use the exit hatch to withdraw their funds. Users are required to find a counterparty for the trade by out of system means.","sentiment":"good","orderHint":604800,"secondLine":"7d delay"},"proposerFailure":{"value":"Use escape hatch","description":"Users are able to trustlessly exit by submitting a Merkle proof of funds. Positions will be closed using the average price from the last batch state update.","sentiment":"good","orderHint":null}},"stateValidation":{"categories":[{"title":"Validity proofs","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.","risks":[],"references":[{"title":"Enforcing Consistency on the On-Chain State - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"}]}]},"technology":{"dataAvailability":{"name":"Data is not stored on chain","description":"The balances of the users are not published onchain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted onchain only if at least a quorum of the committee members sign a state update.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"title":"Data Availability Modes - StarkEx documentation","url":"https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"},{"title":"Validium - StarkEx documentation","url":"https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"},{"title":"Availability Verifiers - StarkEx documentation","url":"https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Operator - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"}]},"forceTransactions":{"name":"Users can force exit the system","description":"Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract onchain.  The request must be served within 7d. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds. Perpetual positions can also be force closed before withdrawing, however this requires the user to find the counterparty for the trade themselves.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."},{"category":"Funds can be lost if","text":"the user is unable to find the counterparty for the force trade."}],"references":[{"title":"Censorship Prevention - StarkEx documentation","url":"https://docs.starkware.co/starkex/architecture/overview-architecture.html#8_censorship_prevention"},{"title":"Forced Trade - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/forced-actions-escape-hatch-perpetual.html#forcedtrade"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is settled the funds become available for withdrawal on L1. ZK proofs are required to settle blocks. Finally the user submits an L1 transaction to claim the funds.","risks":[],"references":[{"title":"Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"title":"Forced Operations - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"},{"title":"Forced Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"},{"title":"Forced Trade - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"}]},{"name":"Emergency exit","description":"If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.","risks":[],"references":[{"title":"Forced Operations - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"},{"title":"Forced Withdrawal - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"},{"title":"Forced Trade - StarkEx documentation","url":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"}]}]},"contracts":{"addresses":{"ethereum":[{"name":"StarkPerpetual","isVerified":true,"address":"eth:0xfAaE2946e846133af314d1Df13684c89fA7d83DD","upgradeability":{"proxyType":"StarkWare diamond","admins":["eth:0x17b287122363a0a6dBA7F185347DFcfb9816dA6e"],"implementations":["eth:0x8C43C9bec15d82D153C52518030e0a9590ABD35d","eth:0x540Ad8576d2F90f28994ab001622F964945854A8","eth:0x1BC9C618B7FA6b5EfAAD31DC801eB55c608B9310","eth:0x45de249eEa8f9CDB70943B17CceDeb42F5BA0175","eth:0x31e2d974BaC547101413c24C23443AD488423f64"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1720435943,"transactionHash":"0xb4a37a973c29b0213d2622a6ab1faac67ac73ca271c14664818b3f9604cb7eaf","implementations":["eth:0x8C43C9bec15d82D153C52518030e0a9590ABD35d","eth:0x540Ad8576d2F90f28994ab001622F964945854A8","eth:0x1BC9C618B7FA6b5EfAAD31DC801eB55c608B9310","eth:0x45de249eEa8f9CDB70943B17CceDeb42F5BA0175","eth:0x31e2d974BaC547101413c24C23443AD488423f64"]}],"description":"Central Validium contract. Receives (verified) state roots from the Operator, allows users to consume L2 -> L1 messages and send L1 -> L2 messages. Critical configuration values for the L2's logic are defined here by various governance roles.\n* Roles:\n  * **admin**: EOA 1\n  * **operators**: EOA 1, EOA 3\n  * **tokenAdmins**: EOA 2","upgradableBy":[{"id":"EOA-1","name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"SHARPVerifierCallProxy","isVerified":true,"address":"eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60","upgradeability":{"proxyType":"StarkWare proxy","admins":["eth:0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"],"implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],"immutable":false},"chain":"ethereum","pastUpgrades":[{"timestamp":1635080785,"transactionHash":"0x80ebb7a22a207d00e26464db2f8a719d43eb3b836740a693aad13d5ef922f5e4","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1651510161,"transactionHash":"0x604e235c6207b7909f6fc8dc0bd86b410e935dcf2f6f6bd37a5567a89379353a","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1659869409,"transactionHash":"0xc31b74237a0c68aa1b95fe2ed28ad54cf6d7df42a8beab1ea947532c95dda20a","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1678106063,"transactionHash":"0xbaa8ffb1b7e5177dbf75de753b9b2ff2fc313b244ff910cfd6d7f1f6254b6e1a","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1708939523,"transactionHash":"0x31e3caf3940dde662a1e98580259f79963dc5e098793b6519311e201d4e19312","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1708939523,"transactionHash":"0x31e3caf3940dde662a1e98580259f79963dc5e098793b6519311e201d4e19312","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1722161267,"transactionHash":"0x7c71592ea4c455371365d843f1a21bbf647aad7d6fae12f7187650ce24805f00","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1722197315,"transactionHash":"0x4b25445a8e86b4620b9a19f747122b518d8973975ea73aa474b210395e277b66","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]},{"timestamp":1747066175,"transactionHash":"0x0764cd09cc5c9a96b151dd222bf14b9c33111c80bdddf27721a6406f4c0e1f3f","implementations":["eth:0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"]}],"description":"Upgradable call proxy contract through which the SHARPVerifier can be called. A call proxy does not delegatecall and the storage context remains at the target contract. It allows SHARP Multisig to change the otherwise immutable verifier contract with 8d delay.\n* Roles:\n  * **admin**: SHARP Multisig","upgradableBy":[{"name":"SHARP Multisig","delay":"8d"}],"discoveryDrivenData":true},{"name":"SHARPVerifier","isVerified":true,"address":"eth:0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Shared Starkware SHARP verifier used collectively by Starknet and other SN stack and StarkEx projects. It receives STARK proofs from the Prover and verifies the integrity of the offchain execution including a correctly computed state root which is part of the Program Output.\n","discoveryDrivenData":true},{"name":"AggregationRouterV5","isVerified":true,"address":"eth:0x1111111254EEB25477B68fb85Ed929f73A960582","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"1inch DEX aggregator supporting RFQ fills, limit-order fills and direct DEX swaps.\n* Roles:\n  * **owner**: GnosisSafe","discoveryDrivenData":true},{"name":"FinalizableCommittee","isVerified":true,"address":"eth:0x23bf3dcc14680162b7f5355aAbb56D31823c946e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"DAC with admin funtions to manage members. Admins are not discoverable and thus not shown here.\n","discoveryDrivenData":true},{"name":"GpsFactRegistryAdapter","isVerified":true,"address":"eth:0x4abBc1826389aC0FEaA49E70c30a041b665e8562","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Adapter between the core contract and the SHARPVerifierCallProxy. Stores the Cairo programHash (`2530337539466159944237001094809327283009177793361359619481044346150483328860`).\n","discoveryDrivenData":true},{"name":"PerpetualEscapeVerifier","isVerified":true,"address":"eth:0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Special verifier for the escape() function.\n","discoveryDrivenData":true},{"name":"EdgeXDepositor","isVerified":true,"address":"eth:0xC0a1a1e4AF873E9A37a0caC37F3aB81152432Cc5","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"A deposit wrapper that allows users to deposit arbitrary tokens to EdgeX. Tokens are swapped to USDT via 1inch and deposited to edgeX. This deposit wrapper also has fast withdrawal support using liquidity providers, but it seems deprecated in practice. Standard direct deposits and withdrawals of USDT at the StarkPerpetual contract are fully supported.\n* Roles:\n  * **signers**: EOA 4, EOA 5, EOA 6","discoveryDrivenData":true},{"name":"MemoryPageFactRegistry","isVerified":true,"address":"eth:0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Auxiliary to the SHARPVerifier contract: Verified 'memory fact pages' get stored here. This is important as it registers all necessary onchain data produced by the verifier.\n","discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"permissions":{"ethereum":{"roles":[{"id":"Operator","name":"Operator","description":"Permissioned to regularly update the state of the L2 on L1. Each state update must have been proven via the SHARP verifier and contains state diffs for data availability.","accounts":[{"address":"eth:0x17b287122363a0a6dBA7F185347DFcfb9816dA6e","type":"EOA","isVerified":true,"name":"EOA 1","url":"#EOA-1"},{"address":"eth:0xCBe6fbf5e3c427013688E04D0fDE56705890c4bE","type":"EOA","isVerified":true,"name":"EOA 3","url":"#EOA-3"}],"chain":"ethereum","discoveryDrivenData":true},{"id":"Governor","name":"Governor","description":"Permissioned to manage the Operator role, finalize state and change critical parameters like the programHash, configHash, or message cancellation delay in the core contract.","accounts":[{"address":"eth:0x17b287122363a0a6dBA7F185347DFcfb9816dA6e","type":"EOA","isVerified":true,"name":"EOA 1","url":"#EOA-1"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"id":"SHARP Multisig","name":"SHARP Multisig","description":"A Multisig with 2/4 threshold. \n* Can upgrade **with 8d delay**\n  * SHARPVerifierCallProxy [via: - acting directly with 8d delay]","accounts":[{"address":"eth:0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4","type":"Contract","isVerified":true,"name":"0x21F9…AEc4","url":"https://etherscan.io/address/0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x0405107a60391Eb51821be373ff978115Ee58488","type":"EOA","isVerified":true,"name":"0x0405…8488","url":"https://etherscan.io/address/0x0405107a60391Eb51821be373ff978115Ee58488"},{"address":"eth:0x59232aC80E6d403b6381393e52f4665ECA328558","type":"EOA","isVerified":true,"name":"0x5923…8558","url":"https://etherscan.io/address/0x59232aC80E6d403b6381393e52f4665ECA328558"},{"address":"eth:0xebc8416179fE90854fe8B3f774801165572cfD7F","type":"EOA","isVerified":true,"name":"0xebc8…fD7F","url":"https://etherscan.io/address/0xebc8416179fE90854fe8B3f774801165572cfD7F"},{"address":"eth:0x955B978F3ee7818dA71fA25c676062E6BC462Fec","type":"EOA","isVerified":true,"name":"0x955B…2Fec","url":"https://etherscan.io/address/0x955B978F3ee7818dA71fA25c676062E6BC462Fec"}],"discoveryDrivenData":true},{"id":"GnosisSafe","name":"GnosisSafe","description":"A Multisig with 2/3 threshold. \n* Can interact with AggregationRouterV5\n  * destroy the contract and rescue funds from it ","accounts":[{"address":"eth:0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1","type":"Contract","isVerified":true,"name":"0x5E89…d7D1","url":"https://etherscan.io/address/0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0xB1A308e7F02798377b7acF685E997E3D774c5863","type":"EOA","isVerified":true,"name":"0xB1A3…5863","url":"https://etherscan.io/address/0xB1A308e7F02798377b7acF685E997E3D774c5863"},{"address":"eth:0x3A6ED6885608Ead8174789a81Eb2B05600ca89F8","type":"EOA","isVerified":true,"name":"0x3A6E…89F8","url":"https://etherscan.io/address/0x3A6ED6885608Ead8174789a81Eb2B05600ca89F8"},{"address":"eth:0x2BB718a3986C36c6E02D8d15cdA4370820D08169","type":"EOA","isVerified":true,"name":"0x2BB7…8169","url":"https://etherscan.io/address/0x2BB718a3986C36c6E02D8d15cdA4370820D08169"}],"discoveryDrivenData":true},{"id":"EOA-1","name":"EOA 1","accounts":[{"address":"eth:0x17b287122363a0a6dBA7F185347DFcfb9816dA6e","type":"EOA","isVerified":true,"name":"0x17b2…dA6e","url":"https://etherscan.io/address/0x17b287122363a0a6dBA7F185347DFcfb9816dA6e"}],"chain":"ethereum","description":"* Can upgrade **with no delay**\n  * StarkPerpetual \n* Can interact with StarkPerpetual\n  * manage the token admin role \n* A Governor - acting directly\n* An Operator - acting directly","discoveryDrivenData":true},{"id":"EOA-2","name":"EOA 2","accounts":[{"address":"eth:0x8847c33C6AEB53bf9a43D6b5579e9146478e6D3a","type":"EOA","isVerified":true,"name":"0x8847…6D3a","url":"https://etherscan.io/address/0x8847c33C6AEB53bf9a43D6b5579e9146478e6D3a"}],"chain":"ethereum","description":"* Can interact with StarkPerpetual\n  * manage supported tokens ","discoveryDrivenData":true},{"id":"EOA-3","name":"EOA 3","accounts":[{"address":"eth:0xCBe6fbf5e3c427013688E04D0fDE56705890c4bE","type":"EOA","isVerified":true,"name":"0xCBe6…c4bE","url":"https://etherscan.io/address/0xCBe6fbf5e3c427013688E04D0fDE56705890c4bE"}],"chain":"ethereum","description":"* An Operator - acting directly","discoveryDrivenData":true},{"id":"EOA-4,-EOA-5-and-EOA-6","name":"EOA 4, EOA 5 and EOA 6","accounts":[{"address":"eth:0x38ACC82ED19e303841e222d7e933846001F969F8","type":"EOA","isVerified":true,"name":"0x38AC…69F8","url":"https://etherscan.io/address/0x38ACC82ED19e303841e222d7e933846001F969F8"},{"address":"eth:0x5C37D9fCD71F8d0D9E11a58b73D49148cf3A0323","type":"EOA","isVerified":true,"name":"0x5C37…0323","url":"https://etherscan.io/address/0x5C37D9fCD71F8d0D9E11a58b73D49148cf3A0323"},{"address":"eth:0x811aBa59F2486A0a6D93b8c708086d9A789dcFe2","type":"EOA","isVerified":true,"name":"0x811a…cFe2","url":"https://etherscan.io/address/0x811aBa59F2486A0a6D93b8c708086d9A789dcFe2"}],"chain":"ethereum","description":"* Can interact with EdgeXDepositor\n  * withdraw any funds from this deposit wrapper contract by reaching a threshold of 2 signers ","discoveryDrivenData":true}]}},"milestones":[{"title":"edgeX live on Mainnet","date":"2024-08-03T00:00:00Z","url":"https://x.com/edgeX_exchange/status/1819614179760001039","description":"edgeX, a non-custodial decentralized exchange powered by StarkeX, is now live on Mainnet.","type":"general"}],"customDa":{"type":"Data Availability Committee","description":"Set of parties responsible for signing and attesting to the availability of data.","dac":{"membersCount":5,"requiredMembers":1},"technology":{"description":"\n## Architecture\n![starkex architecture](/images/da-layer-technology/starkex/architecture.png#center)\n\nThe Starkware application utilizes a data availability solution that relies on a Committee Service to ensure data persistence. This architecture comprises the following components:\n\n- **Availability Gateway**: The primary interface provided by the operator for committee members to access new batch information and submit signed availability claims.\n- **Data Availability Committee (DAC)**: A group of nodes responsible for storing state data associated with each Merkle root and attesting to data availability by signing claims.\n- **Data Batches**: Collections of transactions processed in batches that update the state of accounts, resulting in a new Merkle root representing the updated state.\n\nCommittee members run services that interact with the Availability Gateway to obtain information about new batches and submit their signed availability claims. Each batch includes a unique batch_id, a reference to a previous batch, and a list of account updates. \nCommittee members combine this information with data from the reference batch to compute the new state and verify the Merkle root.\n\nWhen the operator produces a new batch, it must be signed by a minimum number of committee members—as defined by the application's configuration—for it to be accepted onchain. \nThis includes all members designated as mandatory signers. If the operator attempts to submit a batch without the required signatures, it will be rejected, thereby ensuring that data remains available and consistent.\n\nCommittee members are expected to maintain a database that stores the data associated with each batch, making use of storage solutions with a replication factor of at least 2.\n\n## DA Bridge Architecture\n![starkex bridge architecture](/images/da-bridge-technology/starkex/architectureL2.png#center)\n\nThe DA commitments are posted to the destination chain, using the Committee Verifier contract as a DA bridge.\nThe DA commitment consists of a data hash of the transaction batch the Committee has signed off on and a concatenation of ec-signatures by signatories.\n\nThe Committee Verifier contract verifies the signatures and the data hash and if the required threshold of Committee members has signed off on the data, the hash is stored as a registeredFact in the StarkEx contract.\nIn a separate transaction, the operator calls the updateState() function on the StarkEx contract to update the state.\nBefore the state update is accepted, the StarkEx contract verifies the transaction public inputs by calling the isValid() function, which verifies the hash derived from state update inputs matches the hash stored by the Committee Verifier contract.\n","risks":[{"category":"Funds can be lost if","text":"a malicious committee signs a data availability attestation for an unavailable transaction batch."}],"references":[{"title":"StarkEx Committee Service - Source Code","url":"https://github.com/starkware-libs/starkex-data-availability-committee"}]},"risks":{"committeeSecurity":{"value":"1/5","sentiment":"bad","description":"The committee does not meet basic security standards, either due to insufficient size, lack of member diversity, or poorly defined threshold parameters. The system lacks an effective DA bridge and it is reliant on the assumption of an honest sequencer, creating significant risks to data integrity and availability.","orderHint":-0.05},"upgradeability":{"value":"Immutable","sentiment":"bad","description":"The bridge smart contract is immutable and cannot be updated. The bridge committee security is low and cannot be improved."},"relayerFailure":{"value":"Self propose","sentiment":"good","description":"Anyone can relay data availability commitments to the DA bridge. In case of current relayer failure, users can collect attestations from committee members and propose new data availability commitments to the DA bridge."},"economicSecurity":{"value":{"value":"None","sentiment":"bad","description":"There are no onchain assets at risk of being slashed in case of a data withholding attack, and the committee members are not publicly known."},"adjustSecurityRisk":false},"fraudDetection":{"value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"baseTimestamp":1760431807,"hasDiscoUi":false}}