{"type":"layer2","id":"everclear","addedAt":1726617600,"capability":"universal","display":{"architectureImage":"orbit-optimium-fastconfirm","stateValidationImage":"orbit","purposes":["Universal","Interoperability"],"name":"Everclear Hub","slug":"everclear","description":"Everclear Hub is an AnyTrust Optimium on Ethereum, built on the Orbit stack. It is used as a liquidity hub (clearing layer) to solve the liquidity fragmentation between modular scaling solutions.","links":{"websites":["https://everclear.org"],"bridges":["https://bridge.gelato.network/bridge/everclear-mainnet"],"documentation":["https://docs.everclear.org"],"explorers":["https://scan.everclear.org/"],"repositories":["https://github.com/connext"],"socialMedia":["https://x.com/everclearorg","https://discord.gg/everclear","https://blog.everclear.org/"]},"warning":"Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.","stacks":["Arbitrum"]},"proofSystem":{"type":"Optimistic"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow 6 WHITELISTED actors watching the chain to prove that the state is incorrect. There are fewer than 5 Challengers external to the Operator among these. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.","secondLine":"6d 8h challenge period","sentiment":"bad","orderHint":6},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.","sentiment":"bad","orderHint":0.5},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":-345600},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There can be up to a 4d delay on this operation.","sentiment":"good","orderHint":345600,"secondLine":"4d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.","sentiment":"good","orderHint":1099632,"secondLine":"12d 17h delay"}},"stage":{"stage":"NotApplicable"},"config":{"associatedTokens":["NEXT","CLEAR"],"escrows":[{"address":"0x4eb4fB614e1aa3634513319F4Ec7334bC4321356","sinceTimestamp":1725539051,"tokens":["ETH"],"contract":{"isVerified":true,"address":"eth:0x4eb4fB614e1aa3634513319F4Ec7334bC4321356","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":[{"name":"ProxyAdmin","delay":"no"}]},"chain":"ethereum","includeInTotal":true}],"activityConfig":{"type":"block","startBlock":1,"adjustCount":{"type":"SubtractOne"}},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0xe0bc9729","functionSignature":"function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x8f111f3c","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x37501551","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes quote)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x3e5aa082","functionSignature":"function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x6e620055","functionSignature":"function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x917cf8ac","functionSignature":"function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x7B0517E0104dB60198f9d573C0aB8d480207827E","selector":"0x69cacded","functionSignature":"function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1725539051}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x38fB6Ad5908f61dC0bCeffbeDf4Bf781CbeA22Aa","selector":"0xa04cee60","functionSignature":"function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external","sinceTimestamp":1725539051}}]},"contracts":{"addresses":{"ethereum":[{"name":"Bridge","isVerified":true,"address":"eth:0x4eb4fB614e1aa3634513319F4Ec7334bC4321356","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"SequencerInbox","isVerified":true,"address":"eth:0x7B0517E0104dB60198f9d573C0aB8d480207827E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x734B78823c4d979045EC23F38B54A070df7769FF"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig\n  * **batchPosters**: EOA 1, EOA 2, EOA 3, EOA 4, EOA 5","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupProxy","isVerified":true,"address":"eth:0xc6CAd31D83E33Fc8fBc855f36ef9Cb2fCE070f5C","upgradeability":{"proxyType":"Arbitrum proxy","admins":["eth:0xb0d7A2d1eBA69dbcff839037D060E4f8B5c4431B"],"implementations":["eth:0x9B56A789fEDD5df27dBaB53b085F7157397cA17D","eth:0x5607Ea4b5F6e3F610bD346B36D3143FFf46d1C34"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both held by the Validators).\n* Roles:\n  * **admin**: UpgradeExecutor; ultimately Gelato Multisig\n  * **anyTrustFastConfirmer**: EverclearFastconfirmerMultisig; ultimately EOA 10\n  * **owner**: UpgradeExecutor; ultimately Gelato Multisig\n  * **validators**: EOA 10, EOA 6, EOA 7, EOA 8, EOA 9, EverclearFastconfirmerMultisig; ultimately EOA 10","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"ChallengeManager","isVerified":true,"address":"eth:0xCdA94226d0BAFA963D6011fb2A06dEc7333646e8","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x02E05A9245C5853f895daDcc3A8216C953C8736B"]},"chain":"ethereum","description":"Contract that allows challenging state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeExecutor","isVerified":true,"address":"eth:0xb0d7A2d1eBA69dbcff839037D060E4f8B5c4431B","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x6c21303F5986180B1394d2C89f3e883890E2867b"]},"chain":"ethereum","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig\n  * **executors**: Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"ERC20Gateway","isVerified":true,"address":"eth:0x149e3df73d9D48cb6573555De9256cc1456F50B5","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0xf43bce5D32742FFC862eA182b0b5544CbDBB0F02"]},"chain":"ethereum","description":"Escrows deposited ERC-20 assets for the canonical Bridge. Upon depositing, a generic token representation will be minted at the destination. Withdrawals are initiated by the Outbox contract.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"Outbox","isVerified":true,"address":"eth:0x38fB6Ad5908f61dC0bCeffbeDf4Bf781CbeA22Aa","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"Inbox","isVerified":true,"address":"eth:0x97FdC935c5E25613AA13a054C7Aa71cf751DB495","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0xf3830309BdfADcC7eEEF99C2EeA879D5fA6C756C"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"GatewayRouter","isVerified":true,"address":"eth:0xA880b3fC75928695ac75e06793277aC4bEA84a3E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x6525137BfF366fbc0A89E3e5A4d244B5A0090a6D"]},"chain":"ethereum","description":"This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProverHostIo","isVerified":true,"address":"eth:0x0003A96B27ce73505b43ea1b71a5aB06bec568C4","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMemory","isVerified":true,"address":"eth:0x1cD76B9C33b2e3b04D7B181399d492B3e49AD7fB","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ValidatorUtils","isVerified":true,"address":"eth:0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"This contract implements view only utilities for validators.\n","discoveryDrivenData":true},{"name":"OneStepProver0","isVerified":true,"address":"eth:0x2dCCAbE89cF76132619a9B18e9F9e48E837222b5","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"OneStepProofEntry","isVerified":true,"address":"eth:0x8Faa21891B0b928afEbd5314D1D313f8f7B34DaC","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMath","isVerified":true,"address":"eth:0xCf4b98cFF2976E4eb579B9498f398b5bd279A6eD","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"RollupEventInbox","isVerified":true,"address":"eth:0xdE3fdE71a026236b6b5C35505643FF4155EAb20D","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],"implementations":["eth:0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Gelato Multisig","upgradableBy":[{"name":"Gelato Multisig","delay":"no"}],"discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"chainConfig":{"name":"everclear","chainId":25327,"apis":[{"type":"rpc","url":"https://rpc.everclear.raas.gelato.cloud","callsPerMinute":1500},{"type":"blockscout","url":"https://scan.everclear.org/api"}],"sinceTimestamp":1725539051,"gasTokens":["ETH"]},"technology":{"sequencing":{"name":"Delayed forced transactions","description":"To force transactions from the host chain, users must first enqueue \"delayed\" messages in the \"delayed\" inbox of the Bridge contract. Only authorized Inboxes are allowed to enqueue delayed messages, and the so-called Inbox contract is the one used as the entry point by calling the `sendMessage` or `sendMessageFromOrigin` functions. If the centralized sequencer doesn't process the request within some time bound, users can call the `forceInclusion` function on the SequencerInbox contract to include the message in the canonical chain. The time bound is hardcoded to be 4d.","references":[],"risks":[]},"dataAvailability":{"name":"Data is not stored on chain","description":"Users transactions are not published onchain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"title":"Inside AnyTrust - Arbitrum documentation","url":"https://developer.offchainlabs.com/inside-anytrust"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Sequencer - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 4d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"title":"SequencerInbox.sol - source code, forceInclusion function","url":"https://etherscan.io/address/0x734B78823c4d979045EC23F38B54A070df7769FF#code"},{"title":"Sequencer Isn't Doing Its Job - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[],"references":[{"title":"Transaction lifecycle - Arbitrum documentation","url":"https://developer.offchainlabs.com/tx-lifecycle"},{"title":"L2 to L1 Messages - Arbitrum documentation","url":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"title":"Mainnet for everyone - Arbitrum Blog","url":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.","risks":[],"references":[{"title":"Inside Arbitrum Nitro","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"eth:0x0181F0f0260Ac4149CA7Abf6c53d3E8053f95715","type":"EOA","isVerified":true,"name":"0x0181…5715","url":"https://etherscan.io/address/0x0181F0f0260Ac4149CA7Abf6c53d3E8053f95715"},{"address":"eth:0x7D9A25f61865D5A211a8be80a4Ef6bd201112717","type":"EOA","isVerified":true,"name":"0x7D9A…2717","url":"https://etherscan.io/address/0x7D9A25f61865D5A211a8be80a4Ef6bd201112717"},{"address":"eth:0xC410B8657FBB2CdbF0c5c5d5128576974467ba5e","type":"EOA","isVerified":true,"name":"0xC410…ba5e","url":"https://etherscan.io/address/0xC410B8657FBB2CdbF0c5c5d5128576974467ba5e"},{"address":"eth:0xCD795E6003Da105f4a1E11F73fb64b58B5C0f325","type":"EOA","isVerified":true,"name":"0xCD79…f325","url":"https://etherscan.io/address/0xCD795E6003Da105f4a1E11F73fb64b58B5C0f325"},{"address":"eth:0xf244224843657bb59A6456754992Ea973655D918","type":"EOA","isVerified":true,"name":"0xf244…D918","url":"https://etherscan.io/address/0xf244224843657bb59A6456754992Ea973655D918"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Validator","description":"Can propose new state roots (called nodes) and challenge state roots on the host chain.","accounts":[{"address":"eth:0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f","type":"EOA","isVerified":true,"name":"0xe778…615f","url":"https://etherscan.io/address/0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f"},{"address":"eth:0x262711cA4DA6409Da795D8af9E18DDaF47397f80","type":"EOA","isVerified":true,"name":"0x2627…7f80","url":"https://etherscan.io/address/0x262711cA4DA6409Da795D8af9E18DDaF47397f80"},{"address":"eth:0x3648e2c562F00DeEA11B0b335Cf55C5EB2Df3A5F","type":"EOA","isVerified":true,"name":"0x3648…3A5F","url":"https://etherscan.io/address/0x3648e2c562F00DeEA11B0b335Cf55C5EB2Df3A5F"},{"address":"eth:0x75feC8Bb2d99076D776A5D46D1E3d42686520eF1","type":"EOA","isVerified":true,"name":"0x75fe…0eF1","url":"https://etherscan.io/address/0x75feC8Bb2d99076D776A5D46D1E3d42686520eF1"},{"address":"eth:0xD19ee3f6Bf22A3A23eCd25B5ED0C655a2a56F65E","type":"EOA","isVerified":true,"name":"0xD19e…F65E","url":"https://etherscan.io/address/0xD19ee3f6Bf22A3A23eCd25B5ED0C655a2a56F65E"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"AnyTrust FastConfirmer","description":"Can finalize a state root before the challenge period has passed. This allows withdrawing from the bridge based on the state root.","accounts":[{"address":"eth:0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f","type":"EOA","isVerified":true,"name":"0xe778…615f","url":"https://etherscan.io/address/0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"Gelato Multisig","description":"A Multisig with 4/9 threshold. \n* Can upgrade **with no delay**\n  * ERC20Gateway [via: UpgradeExecutor → ProxyAdmin]\n  * Outbox [via: UpgradeExecutor → ProxyAdmin]\n  * Bridge [via: UpgradeExecutor → ProxyAdmin]\n  * SequencerInbox [via: UpgradeExecutor → ProxyAdmin]\n  * Inbox [via: UpgradeExecutor → ProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → ProxyAdmin]\n  * RollupProxy [via: UpgradeExecutor]\n  * ChallengeManager [via: UpgradeExecutor → ProxyAdmin]\n  * RollupEventInbox [via: UpgradeExecutor → ProxyAdmin]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability, DACs and the fastConfirmer role, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","accounts":[{"address":"eth:0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb","type":"Contract","isVerified":true,"name":"0xBeA2…9Bbb","url":"https://etherscan.io/address/0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x349f3839012DB2271e1BeC68F1668471D175Adb9","type":"EOA","isVerified":true,"name":"0x349f…Adb9","url":"https://etherscan.io/address/0x349f3839012DB2271e1BeC68F1668471D175Adb9"},{"address":"eth:0xB65540bBA534E88EB4a5062D0E6519C07063b259","type":"EOA","isVerified":true,"name":"0xB655…b259","url":"https://etherscan.io/address/0xB65540bBA534E88EB4a5062D0E6519C07063b259"},{"address":"eth:0x58edE8C66A15f23c61b8EadD1191FdaD904f7a87","type":"EOA","isVerified":true,"name":"0x58ed…7a87","url":"https://etherscan.io/address/0x58edE8C66A15f23c61b8EadD1191FdaD904f7a87"},{"address":"eth:0x28bB9385A588EF4747264D19B9A9F1603591680c","type":"EOA","isVerified":true,"name":"0x28bB…680c","url":"https://etherscan.io/address/0x28bB9385A588EF4747264D19B9A9F1603591680c"},{"address":"eth:0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2","type":"EOA","isVerified":true,"name":"0x691C…aAD2","url":"https://etherscan.io/address/0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2"},{"address":"eth:0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d","type":"EOA","isVerified":true,"name":"0x5bE3…A54d","url":"https://etherscan.io/address/0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d"},{"address":"eth:0x88De44422E1b1c30bc530c35aEdb9f5aD0e6fD52","type":"EOA","isVerified":true,"name":"0x88De…fD52","url":"https://etherscan.io/address/0x88De44422E1b1c30bc530c35aEdb9f5aD0e6fD52"},{"address":"eth:0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e","type":"EOA","isVerified":true,"name":"0x01a0…c32e","url":"https://etherscan.io/address/0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e"},{"address":"eth:0x547D0F472309e4239b296D01e03bEDc101241a26","type":"EOA","isVerified":true,"name":"0x547D…1a26","url":"https://etherscan.io/address/0x547D0F472309e4239b296D01e03bEDc101241a26"}],"discoveryDrivenData":true},{"name":"EverclearFastconfirmerMultisig","description":"A Multisig with 1/1 threshold. ","accounts":[{"address":"eth:0xE1Fc24fef87bC5Af6024a8A0c12d7B835E497501","type":"Contract","isVerified":true,"name":"0xE1Fc…7501","url":"https://etherscan.io/address/0xE1Fc24fef87bC5Af6024a8A0c12d7B835E497501"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f","type":"EOA","isVerified":true,"name":"0xe778…615f","url":"https://etherscan.io/address/0xe778F5Bf5dDB8614a1ab6321Cc557EDbC90e615f"}],"discoveryDrivenData":true}]}},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 12s. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.","risks":[{"category":"Funds can be stolen if","text":"none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.","isCritical":true}],"references":[{"title":"How is fraud proven - Arbitrum documentation FAQ","url":"https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.","references":[{"title":"Fraud Proof Wars: Arbitrum Classic","url":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]},{"title":"Fast confirmations","description":"Whitelisted validators can fast-confirm state-roots after the initial 12s minimum assertion period has passed on a state root and skip the 6d 8h challenge period. This finalizes the fast-confirmed state root an permits withdrawals based on it.","risks":[{"category":"Funds can be stolen if","text":"validators with the 'fast-confirmer' permission finalize a malicious state root before the challenge period has passed.","isCritical":true}],"references":[{"title":"Fast withdrawals for AnyTrust chains - Arbitrum documentation","url":"https://docs.arbitrum.io/launch-orbit-chain/how-tos/fast-withdrawals#fast-withdrawals-for-anytrust-chains"}]}]},"milestones":[{"title":"Mainnet Beta launch","url":"https://blog.everclear.org/everclears-mainnet-is-live-24dedd572d56?gi=2c5d29c1443a","date":"2024-09-18T00:00:00Z","description":"Everclear Hub, the first Clearing Layer, is Live on Mainnet Beta.","type":"general"}],"badges":[{"id":"Gelato","type":"RaaS","name":"Gelato","description":"This project was deployed via the rollup-as-a-service provider Gelato","action":{"type":"scalingFilter","id":"raas","value":"Gelato"}},{"id":"Orbit","type":"Stack","name":"Built on Arbitrum Orbit","description":"The project is built on Arbitrum Orbit","action":{"type":"scalingFilter","id":"stack","value":"Arbitrum"}},{"id":"DAC","type":"DA","name":"Data Availability Committee","description":"There is a Data Availability Committee that provides/attests to data availability","action":{"type":"selfDaHighlight"}},{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}}],"customDa":{"type":"Data Availability Committee","description":"Set of parties responsible for signing and attesting to the availability of data.","dac":{"membersCount":2,"requiredMembers":1},"technology":{"description":"\n## Architecture\n![Anytrust architecture](/images/da-layer-technology/anytrust/architecture2.png#center)\n\nThe DAC uses a data availability solution built on the AnyTrust protocol. It is composed of the following components:\n- **Sequencer Inbox**: Main entry point for the Sequencer submitting transaction batches.\n- **Data Availability Committee (DAC)**: A group of members responsible for storing and providing data on demand.\n- **Data Availability Certificate (DACert)**: A commitment ensuring that data blobs are available without needing full data posting on the L1 chain. \n\n\nCommittee members run servers that support APIs for storing and retrieving data blobs. \nThe Sequencer API allows the rollup Sequencer to submit data blobs for storage, while the REST API enables anyone to fetch data by hash. \nWhen the Sequencer produces a data batch, it sends the batch along with an expiration time to Committee members, who store it and sign it. \nOnce enough signatures are collected, the Sequencer aggregates them into a valid DACert and posts it to the L1 chain inbox. \nIf the Sequencer fails to collect enough signatures, it falls back to posting the full data to the L1 chain. \n\n\nA DACert includes a hash of the data block, an expiration time, and proof that the required threshold of Committee members have signed off on the data. \nThe proof consists of a hash of the Keyset used in signing, a bitmap indicating which members signed, and a BLS aggregated signature. \nL2 nodes reading from the sequencer inbox verify the certificate’s validity by checking the number of signers, the aggregated signature, and that the expiration time is at least two weeks ahead of the L2 timestamp. \nIf the DACert is valid, it provides a proof that the corresponding data is available from honest committee members.\n\n## DA Bridge Architecture\n![Anytrust bridge architecture](/images/da-bridge-technology/anytrust/architectureL2.png#center)\n\nThe DA commitments are posted to the destination chain through the sequencer inbox, using the inbox as a DA bridge.\nThe DA commitment consists of Data Availability Certificate (DACert), including a hash of the data block, an expiration time, and a proof that the required threshold of Committee members have signed off on the data.\nThe sequencer distributes the data and collects signatures from Committee members offchain. Only the DACert is posted by the sequencer to the destination chain inbox (the DA bridge), achieving destination chain transaction ordering finality in a single onchain transaction.\n    ","risks":[{"category":"Funds can be lost if","text":"a malicious committee attests to an invalid data availability certificate."},{"category":"Funds can be lost if","text":"the bridge contract or its dependencies receive a malicious code upgrade. There is no delay on code upgrades."}],"references":[{"title":"Inside AnyTrust - Arbitrum Docs","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-anytrust"}]},"risks":{"committeeSecurity":{"value":"1/2","sentiment":"bad","description":"The committee does not meet basic security standards, either due to insufficient size, lack of member diversity, or poorly defined threshold parameters. The system lacks an effective DA bridge and it is reliant on the assumption of an honest sequencer, creating significant risks to data integrity and availability.","orderHint":-0.02},"upgradeability":{"value":"No delay","sentiment":"bad","description":"There is no delay in the upgradeability of the bridge. Users have no time to exit the system before the bridge implementation update is completed."},"relayerFailure":{"value":"No mechanism","sentiment":"bad","description":"The relayer role is permissioned, and the DA bridge does not have a Security Council or a governance mechanism to propose new relayers. In case of relayer failure, the DA bridge will halt and be unable to recover without the intervention of a centralized entity."},"economicSecurity":{"value":{"value":"None","sentiment":"bad","description":"There are no onchain assets at risk of being slashed in case of a data withholding attack, and the committee members are not publicly known."},"adjustSecurityRisk":false},"fraudDetection":{"value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}},"fallback":{"value":"Ethereum","secondLine":"Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata.","projectId":"ethereum"}},"reasonsForBeingOther":[{"label":"Closed proofs","shortDescription":"There are less than 5 external actors that can submit challenges","description":"Projects without a sufficiently decentralized set of challengers rely on few entities to safely update the state. A small set of challengers can collude with the proposer to finalize an invalid state, which can cause loss of funds."},{"label":"Small DAC","shortDescription":"There are less than 5 external actors that can attest data availability","description":"Projects without a sufficiently decentralized data availability committee rely on few entities to safely attest data availability on Ethereum. A small set of entities can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"1/2 DAC Members","sentiment":"bad","description":"There is a threshold of 1/2 members that must sign and attest that the data is correct and available.","orderHint":-0.02},"mode":{"value":"Transaction data","secondLine":"Compressed"}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1752570455},"hasDiscoUi":false},"ecosystemInfo":{"id":"arbitrum-orbit"}}