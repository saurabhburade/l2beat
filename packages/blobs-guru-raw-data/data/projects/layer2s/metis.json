{"type":"layer2","id":"metis","capability":"universal","addedAt":1637945259,"badges":[{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}},{"id":"OVM","type":"Fork","name":"Fork of OVM","description":"The project is fork of the Optimistic Virtual Machine","action":{"type":"scalingFilter","id":"stack","value":"OVM"}},{"id":"EthereumBlobs","type":"DA","name":"Ethereum with blobs","description":"This project is posting its data to Ethereum as blobs","action":{"type":"publicDaHighlight","slug":"ethereum"}}],"reasonsForBeingOther":[{"label":"No proofs","shortDescription":"The proof system isn't fully functional","description":"Projects without a proper proof system fully rely on single entities to safely update the state. A malicious proposer can finalize an invalid state, which can cause loss of funds."}],"display":{"name":"Metis Andromeda","shortName":"Metis","slug":"metis","description":"Metis Andromeda is an EVM-equivalent solution originally forked from Optimism OVM. It uses a decentralized Sequencer pool running Tendermint consensus and MPC module to sign transaction batches.","purposes":["Universal"],"stacks":["OVM"],"links":{"websites":["https://metis.io"],"bridges":["https://bridge.metis.io"],"documentation":["https://docs.metis.io"],"explorers":["https://andromeda-explorer.metis.io","https://explorer.metis.io"],"repositories":["https://github.com/MetisProtocol"],"socialMedia":["https://metisl2.medium.com/","https://twitter.com/MetisL2","https://discord.com/invite/metis","https://youtube.com/@Metis_L2","https://t.me/MetisL2","https://instagram.com/metisl2/"]}},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["Users' withdrawals can be censored by the permissioned operators.","Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.","The Security Council is not properly set up."],"principle":"Compromising ≥75% of the Security Council should be the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal)."},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":false,"description":"The proof system is still under development."},{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":"UnderReview","description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/MetisProtocol/mvm)"}]},{"stage":"Stage 1","requirements":[{"satisfied":false,"description":"Users' withdrawals can be censored by the permissioned operators."},{"satisfied":false,"description":"Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."},{"satisfied":false,"description":"The Security Council is not properly set up."}],"principle":{"satisfied":false,"description":"Compromising ≥75% of the Security Council should be the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal)."}},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Upgrades unrelated to onchain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to onchain provable bugs."}]}],"message":{"type":"underReview","text":"The requirement for available node software is under review"}},"chainConfig":{"name":"metis","chainId":1088,"gasTokens":["METIS"],"explorerUrl":"https://explorer.metis.io","sinceTimestamp":1637270379,"multicallContracts":[{"address":"0xcA11bde05977b3631167028862bE2a173976CA11","batchSize":150,"sinceBlock":2338552,"version":"3","isNativeBalanceSupported":false}],"coingeckoPlatform":"metis","apis":[{"type":"rpc","url":"https://andromeda.metis.io/","callsPerMinute":1500},{"type":"routescan","url":"https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/api"}]},"config":{"associatedTokens":["Metis"],"escrows":[{"address":"0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b","sinceTimestamp":1637077208,"tokens":"*","chain":"ethereum","premintedTokens":["Metis"]}],"activityConfig":{"type":"block","startBlock":1},"daTracking":[{"type":"ethereum","daLayer":"ethereum","sinceBlock":22472728,"inbox":"0xFf00000000000000000000000000000000001088","sequencers":["0xaE4d46bD9117Cb017C5185844699c51107cB28a9"]}],"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"transfer","from":"0xaE4d46bD9117Cb017C5185844699c51107cB28a9","to":"0xFf00000000000000000000000000000000001088","sinceTimestamp":1747234799}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6","selector":"0x5b297172","functionSignature":"function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement, bytes32 _lastBatchBlockHash, uint256 _lastBatchBlockNumber)","sinceTimestamp":1710992939}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6","selector":"0x0a17d699","functionSignature":"function appendStateBatchByChainId(uint256 _chainId, bytes32[] _batch, uint256 _shouldStartAtElement, string _proposer, bytes32 _lastBatchBlockHash, uint256 _lastBatchBlockNumber)","sinceTimestamp":1710992939}}]},"dataAvailability":{"layer":{"value":"Ethereum","secondLine":"Blobs or Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata or blobs.","projectId":"ethereum"},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted onchain.","projectId":"ethereum"},"mode":{"value":"Transaction data"}},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. Only one entity is currently allowed to propose and submit challenges, as only permissioned games are currently allowed.","secondLine":"7d challenge period","sentiment":"bad","orderHint":null},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","orderHint":null},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":0},"sequencerFailure":{"value":"Enqueue via L1","description":"Users can submit transactions to an L1 queue, but can't force them. The sequencers cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencers censor or are down, they are so for everyone.","sentiment":"warning"},"proposerFailure":{"value":"Cannot withdraw","description":"Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.","sentiment":"bad","orderHint":null}},"stateValidation":{"categories":[{"title":"State root proposals","description":"Dispute game contracts for state validation are deployed but not used to propose state roots as in standard OP Stack chains. Instead, proposers submit state roots through the appendStateBatch function in the `StateCommitmentChain` contract. A state root gets confirmed if the challenge period has passed and the state batch is not disputed.","references":[{"title":"StateCommitmentChain - Etherscan source code","url":"https://etherscan.io/address/0x49A4D7ae835eA21c919B363fa88614b61d7985E7#code"}]},{"title":"Challenges","description":"Games are created on demand by the permissioned GameCreator should a dispute arise. Users can signal the need for a dispute through the dispute() function of the `DisputeGameFactory`. If a game is not created by the `GameCreator` within the dispute timeout period of 2d, anyone can call `disputeTimeout()`. This function calls `saveDisputedBatchTimeout()` on the `StateCommitmentChain`, which marks the batch as disputed. This blocks L2->L1 messaging and withdrawals for the disputed batch and any subsequent batches until the dispute is deleted. Should a game be created and resolved, disputed state batches can be marked as such in the `StateCommitmentChain`. Then, these flagged batches can be deleted (within the fraud proof window). Batches can only be deleted from the MVM_Verifier contract address, which currently corresponds to the `Metis Multisig`.","risks":[{"category":"Funds can be frozen if","text":"an invalid state root is successfully disputed but it is not deleted by the permissioned MVM_Verifier.","isCritical":true}],"references":[{"title":"DisputeGameFactory - No games are created to propose state roots","url":"https://etherscan.io/address/0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3"}]}]},"technology":{"dataAvailability":{"name":"All data required for proofs is published on chain","description":"Transaction data is posted to Ethereum using blobs. Initially, data was posted to the CanonicalTransactionChain contract, then it moved to just posting hashes to an EOA address, and as of May 2025, the system uses blobs for data availability.","risks":[],"references":[{"title":"Blobs batcher - Metis source code","url":"https://github.com/MetisProtocol/mvm/blob/e816c6c461a8e91db3a9ccaa33d2d0f6a60633d5/go/op-program/chainconfig/rollupcfg.go#L85"}]},"operator":{"name":"The system has a decentralized sequencer set","description":"As of April 2024 Metis uses a permissioned sequencer pool running a Tendermint consensus. Once consensus is reached on a block, an MPC address is used to submit a block hash to Ethereum. The infrastructure to manage the MPC is offchain and not trustless because Ethereum does not verify the validity of MPC address.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Decentralized Sequencer - Metis documentation","url":"https://docs.metis.io/andromeda/sequencer/architecture/mpc"}]},"forceTransactions":{"name":"Users can enqueue transactions","description":"Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.","risks":[{"category":"Users can be censored if","text":"the operator is offline or refuses to process the queue."}],"references":[{"title":"CanonicalTransactionChain - Etherscan source code","url":"https://etherscan.io/address/0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9#code"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[{"category":"Funds can be frozen if","text":"the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.","isCritical":true}],"references":[{"title":"Transaction finality - Metis documentation","url":"https://docs.metis.io/andromeda/sequencer/architecture/transaction"}]},{"name":"Forced messaging","description":"If the user experiences censorship from the operator with regular L2->L1 messaging they can submit their messages directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular message.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"Metis uses the Optimistic Virtual Machine (OVM) 2.0 to execute transactions.","risks":[{"category":"Funds can be lost if","text":"there are mistakes in the highly complex OVM implementation."}],"references":[{"title":"MVM repository - Metis source code","url":"https://github.com/MetisProtocol/mvm"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Proposer","description":"Allowed to post new state roots of the current layer to the host chain.","accounts":[{"address":"eth:0xf3CEB4C2ef996CdBc95C4E18c6D0CA988CC09040","type":"EOA","isVerified":true,"name":"0xf3CE…9040","url":"https://etherscan.io/address/0xf3CEB4C2ef996CdBc95C4E18c6D0CA988CC09040"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Sequencer","description":"Allowed to commit transactions from the current layer to the host chain.","accounts":[{"address":"eth:0xaE4d46bD9117Cb017C5185844699c51107cB28a9","type":"EOA","isVerified":true,"name":"0xaE4d…28a9","url":"https://etherscan.io/address/0xaE4d46bD9117Cb017C5185844699c51107cB28a9"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Game Creator","description":"Can create new dispute games.","accounts":[{"address":"eth:0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21","type":"Contract","isVerified":true,"name":"Metis Multisig","url":"#Metis Multisig"},{"address":"eth:0xAaaAA9A2e72753cE09915fee7c0AFa6f34745799","type":"EOA","isVerified":true,"name":"0xAaaA…5799","url":"https://etherscan.io/address/0xAaaAA9A2e72753cE09915fee7c0AFa6f34745799"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"State Deleter","description":"Can delete batches from the StateCommitmentChain.","accounts":[{"address":"eth:0xbf1752DE62d825aF0634F514226F881a449874b6","type":"Contract","isVerified":true,"name":"Metis Security Council","url":"#Metis Security Council"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"Metis Security Council","description":"A Multisig with 6/8 threshold. \n* Can upgrade **with no delay**\n  * L1CrossDomainMessenger \n  * LockingInfo [via: ProxyAdmin]\n  * DisputeGameFactory [via: ProxyAdmin]\n  * FaultProofLockingPool [via: ProxyAdmin]\n  * L1StandardBridge \n  * StateCommitmentChain \n  * LockingPool [via: ProxyAdmin]\n  * DelayedWMetis [via: ProxyAdmin]\n* A state deleter - acting directly","accounts":[{"address":"eth:0xbf1752DE62d825aF0634F514226F881a449874b6","type":"Contract","isVerified":true,"name":"0xbf17…74b6","url":"https://etherscan.io/address/0xbf1752DE62d825aF0634F514226F881a449874b6"}],"chain":"ethereum","references":[{"title":"Security Council members - Metis Docs","url":"https://docs.metis.io/andromeda/network/council"}],"participants":[{"address":"eth:0xc27896E7b4172D6B1C21177D91fd64A935EEc4EA","type":"EOA","isVerified":true,"name":"0xc278…c4EA","url":"https://etherscan.io/address/0xc27896E7b4172D6B1C21177D91fd64A935EEc4EA"},{"address":"eth:0xF81F0E3490cF754dFB3247e5BF202601aA9C49f4","type":"EOA","isVerified":true,"name":"0xF81F…49f4","url":"https://etherscan.io/address/0xF81F0E3490cF754dFB3247e5BF202601aA9C49f4"},{"address":"eth:0x9A73D57BB1fB280C5672A13f655675De25F13b70","type":"EOA","isVerified":true,"name":"0x9A73…3b70","url":"https://etherscan.io/address/0x9A73D57BB1fB280C5672A13f655675De25F13b70"},{"address":"eth:0x308400748938E14789A40222b45163D073167136","type":"EOA","isVerified":true,"name":"0x3084…7136","url":"https://etherscan.io/address/0x308400748938E14789A40222b45163D073167136"},{"address":"eth:0x4361eD603737246b36cABf27F26d63f2A691feD5","type":"EOA","isVerified":true,"name":"0x4361…feD5","url":"https://etherscan.io/address/0x4361eD603737246b36cABf27F26d63f2A691feD5"},{"address":"eth:0x671babD79cf53BE512F9549D3C30EB1A066aAeb8","type":"EOA","isVerified":true,"name":"0x671b…Aeb8","url":"https://etherscan.io/address/0x671babD79cf53BE512F9549D3C30EB1A066aAeb8"},{"address":"eth:0x886d5203cE6EDc8BA719ea5931E689606e84492B","type":"EOA","isVerified":true,"name":"0x886d…492B","url":"https://etherscan.io/address/0x886d5203cE6EDc8BA719ea5931E689606e84492B"},{"address":"eth:0xDEe0AE49547c50E6B687f9242333E39b904fb2af","type":"EOA","isVerified":true,"name":"0xDEe0…b2af","url":"https://etherscan.io/address/0xDEe0AE49547c50E6B687f9242333E39b904fb2af"}],"discoveryDrivenData":true},{"name":"Metis Multisig","description":"A Multisig with 4/9 threshold. \nCan pause, censor, instantly upgrade the bridge and upgrade other critical contracts in the system.\n* Can upgrade **with no delay**\n  * MVM_CanonicalTransaction \n  * MVM_Verifier \n  * MVM_L2ChainManagerOnL1 \n* A dispute game creator - acting directly","accounts":[{"address":"eth:0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21","type":"Contract","isVerified":true,"name":"0x48fE…cF21","url":"https://etherscan.io/address/0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x1577D2b835f561BD021E3219Cd786181D0e17ff5","type":"EOA","isVerified":true,"name":"0x1577…7ff5","url":"https://etherscan.io/address/0x1577D2b835f561BD021E3219Cd786181D0e17ff5"},{"address":"eth:0x36B892a31b311E5e9960739A69D2dF0aa0F81A01","type":"EOA","isVerified":true,"name":"0x36B8…1A01","url":"https://etherscan.io/address/0x36B892a31b311E5e9960739A69D2dF0aa0F81A01"},{"address":"eth:0x001088E383A00ff4ab36F37f7021Cb6d7B415751","type":"EOA","isVerified":true,"name":"0x0010…5751","url":"https://etherscan.io/address/0x001088E383A00ff4ab36F37f7021Cb6d7B415751"},{"address":"eth:0x217fD54d336f710F8aee19572dBfBf0B2297ed69","type":"EOA","isVerified":true,"name":"0x217f…ed69","url":"https://etherscan.io/address/0x217fD54d336f710F8aee19572dBfBf0B2297ed69"},{"address":"eth:0xB383E1331dEE29864b68f7D84b0dC289F770d846","type":"EOA","isVerified":true,"name":"0xB383…d846","url":"https://etherscan.io/address/0xB383E1331dEE29864b68f7D84b0dC289F770d846"},{"address":"eth:0x7a9059F4A6e50090e4f55994d465918200AB4454","type":"EOA","isVerified":true,"name":"0x7a90…4454","url":"https://etherscan.io/address/0x7a9059F4A6e50090e4f55994d465918200AB4454"},{"address":"eth:0x02058Bb1d98D88087008F2ac1273584591380e3F","type":"EOA","isVerified":true,"name":"0x0205…0e3F","url":"https://etherscan.io/address/0x02058Bb1d98D88087008F2ac1273584591380e3F"},{"address":"eth:0xB961047013F974C5b6B6F8dA4402379525316550","type":"EOA","isVerified":true,"name":"0xB961…6550","url":"https://etherscan.io/address/0xB961047013F974C5b6B6F8dA4402379525316550"},{"address":"eth:0xa6D8941F935932a531A856C2e48046DA73a1098E","type":"EOA","isVerified":true,"name":"0xa6D8…098E","url":"https://etherscan.io/address/0xa6D8941F935932a531A856C2e48046DA73a1098E"}],"discoveryDrivenData":true},{"name":"RewardEscrowerMultisig","description":"A Multisig with 2/4 threshold. \nEscrows staking rewards for Sequencers.\n","accounts":[{"address":"eth:0x62478E4eeb4070fE399866aB05e821AB97200947","type":"Contract","isVerified":true,"name":"0x6247…0947","url":"https://etherscan.io/address/0x62478E4eeb4070fE399866aB05e821AB97200947"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x36B892a31b311E5e9960739A69D2dF0aa0F81A01","type":"EOA","isVerified":true,"name":"0x36B8…1A01","url":"https://etherscan.io/address/0x36B892a31b311E5e9960739A69D2dF0aa0F81A01"},{"address":"eth:0x1577D2b835f561BD021E3219Cd786181D0e17ff5","type":"EOA","isVerified":true,"name":"0x1577…7ff5","url":"https://etherscan.io/address/0x1577D2b835f561BD021E3219Cd786181D0e17ff5"},{"address":"eth:0xa6D8941F935932a531A856C2e48046DA73a1098E","type":"EOA","isVerified":true,"name":"0xa6D8…098E","url":"https://etherscan.io/address/0xa6D8941F935932a531A856C2e48046DA73a1098E"},{"address":"eth:0x26eC4FF77DF305d5a9A7660E046dd1c06ce517f6","type":"EOA","isVerified":true,"name":"0x26eC…17f6","url":"https://etherscan.io/address/0x26eC4FF77DF305d5a9A7660E046dd1c06ce517f6"}],"discoveryDrivenData":true},{"name":"EOA 1","accounts":[{"address":"eth:0xDD6FFC7D9a4Fb420b637747edc6456340d12d377","type":"EOA","isVerified":true,"name":"0xDD6F…d377","url":"https://etherscan.io/address/0xDD6FFC7D9a4Fb420b637747edc6456340d12d377"}],"chain":"ethereum","description":"* Can interact with L1CrossDomainMessenger\n  * block (censor) specific L2->L1 messages (e.g. withdrawals), so that they cannot be relayed, pause the contract ","discoveryDrivenData":true}]}},"contracts":{"addresses":{"ethereum":[{"name":"L1CrossDomainMessenger","isVerified":true,"address":"eth:0x081D1101855bD523bA69A9794e0217F0DB6323ff","upgradeability":{"proxyType":"resolved delegate proxy","admins":["eth:0xbf1752DE62d825aF0634F514226F881a449874b6"],"implementations":["eth:0xc1Ce5240B42AB158027095f658d530F9989b414F"],"immutable":false},"chain":"ethereum","description":"The L1 Cross Domain Messenger (L1xDM) contract sends messages from L1 to Metis, and relays messages from Metis onto L1. In the event that a message sent from L1 to Metis is rejected for exceeding the Metis epoch gas limit, it can be resubmitted via this contract's replay function.\n* Roles:\n  * **admin**: Metis Security Council\n  * **owner**: EOA 1","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"CanonicalTransactionChain","isVerified":true,"address":"eth:0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"The Canonical Transaction Chain (CTC) contract is an append-only log of transactions which must be applied to the OVM state. Given that transactions batch hashes are sent to an EOA address, it allows any account to enqueue() a transaction, which the Sequencer must eventually append to the rollup state.\n","discoveryDrivenData":true},{"name":"StateCommitmentChain","isVerified":true,"address":"eth:0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xbf1752DE62d825aF0634F514226F881a449874b6"],"implementations":["eth:0x49A4D7ae835eA21c919B363fa88614b61d7985E7"]},"chain":"ethereum","description":"The State Commitment Chain (SCC) stores a list of proposed state roots in a linked ChainStorageContainer contract. Only a permissioned state root proposer (MVM_Proposer) can submit new state roots.\n* Roles:\n  * **admin**: Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"LockingInfo","isVerified":true,"address":"eth:0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],"implementations":["eth:0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC"]},"chain":"ethereum","description":"Contract acting as an escrow for METIS tokens managed by LockingPool.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"ChainStorageContainer-SCC-batches","isVerified":true,"address":"eth:0x10739F09f6e62689c0aA8A1878816de9e166d6f9","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Storage container for SCC batches.\n","discoveryDrivenData":true},{"name":"DisputeGameFactory","isVerified":true,"address":"eth:0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],"implementations":["eth:0x61B220bbfeF9A94163764928B039d85e94A509d9"]},"chain":"ethereum","description":"Factory contract for creating dispute games. Unlike in standard OP Stack chains, games are not created to propose state roots. Instead, games are created on demand by the permissioned `GameCreator` only should a dispute arise.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Metis Security Council\n  * **gameCreator**: EOA 2, Metis Multisig","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"MetisConfig","isVerified":true,"address":"eth:0x2aA4E192994757c5fAB87Ba13812B89564EA57Ff","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract used to manage configuration of global Metis values.\n","discoveryDrivenData":true},{"name":"FaultProofLockingPool","isVerified":true,"address":"eth:0x2CA48fF3bBC59Bff859543E63233116ecdA3DCBb","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],"implementations":["eth:0x1061528C33b8034952fb7355cC481e193b29FCa6"]},"chain":"ethereum","description":"The FaultProofLockingPool is a contract that allows sequencers to lock their funds for a certain period of time. The contract is used in the Metis protocol to ensure that sequencers have enough funds to cover the potential losses from disputes. It currently has a balance of 0 METIS.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"ChainStorageContainer-CTC-batches","isVerified":true,"address":"eth:0x38473Feb3A6366757A249dB2cA4fBB2C663416B7","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Storage container for CTC batches.\n","discoveryDrivenData":true},{"name":"FaultDisputeGame","isVerified":true,"address":"eth:0x388DEfE576077257074F77c727aA5F2e3B815E21","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract for handling fault disputes (should games be created). Successfully disputed batches are marked as disputed to the StateCommitmentChain.\n","discoveryDrivenData":true},{"name":"L1StandardBridge","isVerified":true,"address":"eth:0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xbf1752DE62d825aF0634F514226F881a449874b6"],"implementations":["eth:0xa0cfE8Af2AB5C9232714647702DbACf862EA4798"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens and ETH that do not require custom gateway.\n* Roles:\n  * **admin**: Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"BondManager","isVerified":true,"address":"eth:0x595801b85628ec6979C420988b8843A40F850528","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"The Bond Manager contract will handle deposits in the form of an ERC20 token from bonded Proposers. It will also handle the accounting of gas costs spent by a Verifier during the course of a challenge. In the event of a successful challenge, the faulty Proposer's bond will be slashed, and the Verifier's gas costs will be refunded. Current mock implementation allows only OVM_Proposer to propose new state roots. No slashing is implemented.\n","discoveryDrivenData":true},{"name":"MVM_CanonicalTransaction","isVerified":true,"address":"eth:0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],"implementations":["eth:0xC878771A4ff7466B7be8b59FB8766719AEa8d562"]},"chain":"ethereum","description":"MVM CanonicalTransaction is a wrapper of Canonical Transaction Chain that implements optimistic data availability scheme L1. If Sequencer is not malicious, it simply forwards appendSequencerBatch() calls to CanonicalTransactionChain.\n* Roles:\n  * **admin**: Metis Multisig","upgradableBy":[{"name":"Metis Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"PreimageOracle","isVerified":true,"address":"eth:0x789a64284e29d2225430606D3D89a9336870BBbC","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Oracle for providing preimages.\n","discoveryDrivenData":true},{"name":"MVM_DiscountOracle","isVerified":true,"address":"eth:0x7f6B0b7589febc40419a8646EFf9801b87397063","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Oracle specifying user fees for sending L1 -> Metis messages and other parameters for cross-chain communication.\n","discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: Metis Security Council","discoveryDrivenData":true},{"name":"Lib_AddressManager","isVerified":true,"address":"eth:0x918778e825747a892b17C66fe7D24C618262867d","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts.\n* Roles:\n  * **1088_MVM_FraudVerifier**: Metis Security Council\n  * **_1088_MVM_Proposer**: EOA 4\n  * **blobBatcher**: EOA 3","discoveryDrivenData":true},{"name":"Metis Token","isVerified":true,"address":"eth:0x9E32b13ce7f2E80A01932B42553652E053D6ed8e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Metis token contract.\n","discoveryDrivenData":true},{"name":"ChainStorageContainer-CTC-queue","isVerified":true,"address":"eth:0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Storage container for CTC queue.\n","discoveryDrivenData":true},{"name":"MIPS","isVerified":true,"address":"eth:0xAFD640204D73B02C3521eA8ea3771182527Ff057","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"LockingPool","isVerified":true,"address":"eth:0xD54c868362C2098E0E46F12E7D924C6A332952Dd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],"implementations":["eth:0xD8f38c831E5032d23065Eaaee8c0620e17c04D60"]},"chain":"ethereum","description":"Contract allowing users to lock tokens to apply to become a sequencer, receive rewards, unlock tokens to exit the sequencer, reward distribution.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true},{"name":"MVM_Verifier","isVerified":true,"address":"eth:0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],"implementations":["eth:0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E"]},"chain":"ethereum","description":"The MVM Verifier contract is responsible for verifying the state of the MVM.\n* Roles:\n  * **admin**: Metis Multisig","upgradableBy":[{"name":"Metis Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"MVM_L2ChainManagerOnL1","isVerified":true,"address":"eth:0xf3d58D1794f2634d6649a978f2dc093898FEEBc0","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],"implementations":["eth:0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5"]},"chain":"ethereum","description":"Contract that allows METIS_MANAGER to switch Sequencer.\n* Roles:\n  * **admin**: Metis Multisig","upgradableBy":[{"name":"Metis Multisig","delay":"no"}],"discoveryDrivenData":true},{"name":"DelayedWMetis","isVerified":true,"address":"eth:0xfA947f70c3509d5b70A606e871aE0C85397D0738","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],"implementations":["eth:0xa2033fbb6213B2233a6998391ccc8E070BcC1B51"]},"chain":"ethereum","description":"Delayed wrapped Metis token contract.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Metis Security Council","upgradableBy":[{"name":"Metis Security Council","delay":"no"}],"discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"milestones":[{"title":"Mainnet Launch","url":"https://metisdao.medium.com/metis-to-launch-andromeda-honoring-our-commitment-to-decentralization-fa2d03394398","date":"2021-11-19T00:00:00Z","description":"Public launch of Metis Layer 2 Andromeda, based on the Optimism codebase.","type":"general"},{"title":"Data availability change","url":"https://metisdao.medium.com/decentralized-storage-goes-live-da876dc6eb70","date":"2022-04-12T00:00:00Z","description":"Update moving data to an off-chain committee.","type":"general"},{"title":"Data hashes posted to EOA","url":"https://etherscan.io/tx/0x4dbb3a65f411b2319dc5c824804a6593d6bf6b482a76493e9089e1e055267123","date":"2023-03-15T00:00:00Z","description":"Hashes to data blobs are now posted to EOA address instead of CanonicalTransactionChain contract.","type":"general"},{"title":"Metis starts using blobs","url":"https://etherscan.io/tx/0x1c28c8e7b89c5da880a52c3e4e4ca6da332816e72c0600d55c18479be897c8b7","date":"2025-05-13T00:00:00Z","description":"Permissioned batcher is posting blobs to the inbox.","type":"general"}],"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1755157627},"hasDiscoUi":false}}