{"type":"layer2","id":"nova","addedAt":1660003200,"capability":"universal","display":{"architectureImage":"orbit-optimium","stateValidationImage":"bold","purposes":["Universal"],"name":"Arbitrum Nova","slug":"nova","description":"Arbitrum Nova is an AnyTrust Optimium, differing from Arbitrum One by not posting transaction data onchain.","links":{"websites":["https://nova.arbitrum.io/","https://arbitrum.io/","https://arbitrum.foundation/"],"bridges":["https://bridge.arbitrum.io/?destinationChain=arbitrum-nova&sourceChain=ethereum"],"documentation":["https://developer.arbitrum.io/","https://developer.arbitrum.io/inside-arbitrum-nitro/#inside-anytrust"],"explorers":["https://nova.arbiscan.io/","https://nova-explorer.arbitrum.io/"],"repositories":["https://github.com/ArbitrumFoundation/docs","https://github.com/ArbitrumFoundation/governance","https://github.com/OffchainLabs/nitro"],"socialMedia":["https://twitter.com/arbitrum","https://arbitrumfoundation.medium.com/","https://discord.gg/Arbitrum"]},"stacks":["Arbitrum"],"category":"Optimium"},"proofSystem":{"type":"Optimistic"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow 10 WHITELISTED actors watching the chain to prove that the state is incorrect. At least 5 Challengers are external to the Operator. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.","secondLine":"8d 8h challenge + execution delay","sentiment":"warning","orderHint":10},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/6 that is tasked with protecting and supplying the data.","sentiment":"warning","orderHint":0.8333333333333334},"exitWindow":{"value":"7d","description":"Non-emergency upgrades are initiated on L2 and go through a 8d delay. Since there is a 1d delay to force a tx (forcing the inclusion in the following state update), users have only 7d to exit. \n    \n  If users post a tx after that time, they would only be able to self propose a state root 28d after the last state root was proposed and then wait for the 6d 8h challenge window, while the upgrade would be confirmed just after the 6d 8h challenge window and the 3d L1 timelock.","sentiment":"warning","orderHint":604800,"warning":{"value":"The Security Council can upgrade with no delay.","sentiment":"bad"}},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There can be up to a 1d delay on this operation.","sentiment":"good","orderHint":86400,"secondLine":"1d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 28d of inactivity from the currently whitelisted Proposers.","sentiment":"good","orderHint":2419200,"secondLine":"28d delay"}},"stage":{"stage":"NotApplicable"},"config":{"associatedTokens":["ARB"],"escrows":[{"address":"0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","sinceTimestamp":1656050353,"tokens":["ETH"],"contract":{"isVerified":true,"address":"eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":[{"name":"ProxyAdmin","delay":"no"}]},"chain":"ethereum","includeInTotal":true},{"address":"0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3","sinceTimestamp":1659620187,"tokens":["DAI"],"contract":{"isVerified":true,"address":"eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"DAI Vault for custom DAI Gateway. Fully controlled by MakerDAO governance.","upgradableBy":[{"name":"SecurityCouncil","delay":"no"},{"name":"L1Timelock","delay":"17d 8h"}]},"chain":"ethereum","includeInTotal":true,"source":"external","bridgedUsing":{"bridges":[{"name":"Canonical (external escrow)"}]}},{"address":"0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf","sinceTimestamp":1656305583,"tokens":"*","contract":{"isVerified":true,"address":"eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, “wrapped” token will be minted.","upgradableBy":[{"name":"SecurityCouncil","delay":"no"},{"name":"L1Timelock","delay":"17d 8h"}]},"chain":"ethereum","includeInTotal":true},{"address":"0x23122da8C581AA7E0d07A36Ff1f16F799650232f","sinceTimestamp":1659620187,"tokens":"*","contract":{"isVerified":true,"address":"eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens that require minting a custom token on the L2.","upgradableBy":[{"name":"SecurityCouncil","delay":"no"},{"name":"L1Timelock","delay":"17d 8h"}]},"chain":"ethereum","includeInTotal":true}],"activityConfig":{"type":"block","startBlock":1,"adjustCount":{"type":"SubtractOne"}},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0xe0bc9729","functionSignature":"function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x8f111f3c","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x37501551","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes quote)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x3e5aa082","functionSignature":"function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x6e620055","functionSignature":"function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x917cf8ac","functionSignature":"function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","selector":"0x69cacded","functionSignature":"function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1656050353}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58","selector":"0xa04cee60","functionSignature":"function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external","sinceTimestamp":1656050353}}]},"contracts":{"addresses":{"ethereum":[{"name":"SequencerInbox","isVerified":true,"address":"eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil\n  * **batchPosterManager**: BatchPosterManagerMultisig\n  * **batchPosters**: EOA 1, EOA 2","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"Bridge","isVerified":true,"address":"eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupProxy","isVerified":true,"address":"eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd","upgradeability":{"proxyType":"Arbitrum proxy","admins":["eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"],"implementations":["eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17","eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new assertions (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both called Validators).\n* Roles:\n  * **admin**: UpgradeExecutor; ultimately L1Timelock, SecurityCouncil\n  * **owner**: UpgradeExecutor; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"EdgeChallengeManager","isVerified":true,"address":"eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea"]},"chain":"ethereum","description":"Contract that implements the main challenge protocol logic of the fraud proof system.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeExecutor","isVerified":true,"address":"eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],"implementations":["eth:0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]},"chain":"ethereum","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: ProxyAdmin 2; ultimately L1Timelock, SecurityCouncil\n  * **executors**: L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"ERC20Gateway","isVerified":true,"address":"eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]},"chain":"ethereum","description":"Escrows deposited ERC-20 assets for the canonical Bridge. Upon depositing, a generic token representation will be minted at the destination. Withdrawals are initiated by the Outbox contract.\n* Roles:\n  * **admin**: ProxyAdmin 3; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"Inbox","isVerified":true,"address":"eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"Outbox","isVerified":true,"address":"eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"CustomGateway","isVerified":true,"address":"eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]},"chain":"ethereum","description":"Escrows deposited assets for the canonical bridge that are externally governed or need custom token contracts with e.g. minting rights or upgradeability.\n* Roles:\n  * **admin**: ProxyAdmin 3; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"GatewayRouter","isVerified":true,"address":"eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]},"chain":"ethereum","description":"This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.\n* Roles:\n  * **admin**: ProxyAdmin 3; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupEventInbox","isVerified":true,"address":"eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately L1Timelock, SecurityCouncil","upgradableBy":[{"name":"L1Timelock","delay":"no"},{"name":"SecurityCouncil","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProver0","isVerified":true,"address":"eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProofEntry","isVerified":true,"address":"eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ProxyAdmin 2","isVerified":true,"address":"eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"ValidatorWallet","isVerified":true,"address":"eth:0x6Ab7A2f1a4febCD40A58b0205bFDA9CAf614b779","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"L1DaiGateway","isVerified":true,"address":"eth:0x97f63339374fCe157Aa8Ee27830172d2AF76A786","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"OneStepProverHostIo","isVerified":true,"address":"eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"L1Escrow","isVerified":true,"address":"eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Simple escrow that accepts tokens and allows to configure permissioned addresses that can access the tokens.\n","discoveryDrivenData":true},{"name":"ProxyAdmin 3","isVerified":true,"address":"eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"OneStepProverMath","isVerified":true,"address":"eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ValidatorWalletCreator","isVerified":true,"address":"eth:0xe05465Aab36ba1277dAE36aa27a7B74830e74DE4","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"","discoveryDrivenData":true},{"name":"OneStepProverMemory","isVerified":true,"address":"eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true}],"nova":[{"name":"L2UpgradeExecutor","isVerified":true,"address":"arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],"implementations":["arb-nova:0x3096EAEdcb3A3B665552660F4d921E565D0073cB"]},"chain":"nova","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency\n  * **executors**: L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true},{"name":"L2GatewayRouter","isVerified":true,"address":"arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["arb-nova:0x8f377770289863DF73Fe665B74460579F82321fb"]},"chain":"nova","description":"Router managing token <–> gateway mapping on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true},{"name":"L2WethGateway","isVerified":true,"address":"arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["arb-nova:0xbe04Ab2728c924D678f9FC833E379688c6eFA317"]},"chain":"nova","description":"Counterpart to the Bridge on L1. Mints and burns WETH on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true},{"name":"L2ERC20Gateway","isVerified":true,"address":"arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["arb-nova:0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8"]},"chain":"nova","description":"Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.\n* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true},{"name":"L2SurplusFee","isVerified":true,"address":"arb-nova:0x509386DbF5C0BE6fd68Df97A05fdB375136c32De","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients.\n","discoveryDrivenData":true},{"name":"StandardArbERC20","isVerified":true,"address":"arb-nova:0x53923A0d1f4805463584c91b2E55d6c600A94E91","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"","discoveryDrivenData":true},{"name":"L2BaseFee","isVerified":true,"address":"arb-nova:0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients.\n","discoveryDrivenData":true},{"name":"L2GatewaysProxyAdmin","isVerified":true,"address":"arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"* Roles:\n  * **owner**: L2UpgradeExecutor","discoveryDrivenData":true},{"name":"L2ARBGateway","isVerified":true,"address":"arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["arb-nova:0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f"]},"chain":"nova","description":"* Roles:\n  * **admin**: L2GatewaysProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeableBeacon","isVerified":true,"address":"arb-nova:0xd31Ed16a8CeCe0A5070AC26024674eB680E3e639","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"","discoveryDrivenData":true},{"name":"BeaconProxyFactory","isVerified":true,"address":"arb-nova:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"","discoveryDrivenData":true},{"name":"L2ProxyAdmin","isVerified":true,"address":"arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"nova","description":"* Roles:\n  * **owner**: L2UpgradeExecutor","discoveryDrivenData":true},{"name":"L2ArbitrumToken","isVerified":true,"address":"arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD","upgradeability":{"proxyType":"EIP1967 proxy","admins":["arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],"implementations":["arb-nova:0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d"]},"chain":"nova","description":"* Roles:\n  * **admin**: L2ProxyAdmin; ultimately L1Timelock, L2SecurityCouncilEmergency","upgradableBy":[{"name":"L2SecurityCouncilEmergency","delay":"no"},{"name":"L1Timelock","delay":"no"}],"discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"chainConfig":{"name":"nova","chainId":42170,"explorerUrl":"https://nova.arbiscan.io","sinceTimestamp":1656122488,"multicallContracts":[{"address":"0xcA11bde05977b3631167028862bE2a173976CA11","batchSize":150,"sinceBlock":1746963,"version":"3"}],"coingeckoPlatform":"arbitrum-nova","apis":[{"type":"rpc","url":"https://nova.arbitrum.io/rpc","callsPerMinute":1500},{"type":"etherscan","chainId":42170}],"gasTokens":["ETH"]},"technology":{"sequencing":{"name":"Buffered forced transactions","description":"To force transactions from the host chain, users must first enqueue \"delayed\" messages in the \"delayed\" inbox of the Bridge contract. Only authorized Inboxes are allowed to enqueue delayed messages, and the so-called Inbox contract is the one used as the entry point by calling the `sendMessage` or `sendMessageFromOrigin` functions. If the centralized sequencer doesn't process the request within some time bound, users can call the `forceInclusion` function on the SequencerInbox contract to include the message in the canonical chain. The time bound is defined to be the minimum between 1d and the time left in the delay buffer. The delay buffer gets replenished over time and gets consumed every time the sequencer doesn't timely process a message. Only messages processed with a delay greater than 1h consume the buffer. The buffer is capped at 2d. The replenish rate is currently set at 1m every 20m. Even if the buffer is fully consumed, messages are still allowed to be delayed up to 1h.","references":[{"title":"Sequencer and censorship resistance - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer"}],"risks":[]},"dataAvailability":{"name":"Data is not stored on chain","description":"Users transactions are not published onchain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 5 out of 6.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"title":"Inside AnyTrust - Arbitrum documentation","url":"https://developer.offchainlabs.com/inside-anytrust"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Sequencer - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"title":"SequencerInbox.sol - source code, forceInclusion function","url":"https://etherscan.io/address/0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7#code"},{"title":"Sequencer Isn't Doing Its Job - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[],"references":[{"title":"Transaction lifecycle - Arbitrum documentation","url":"https://developer.offchainlabs.com/tx-lifecycle"},{"title":"L2 to L1 Messages - Arbitrum documentation","url":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"title":"Mainnet for everyone - Arbitrum Blog","url":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible and Stylus smart contracts are supported","description":"Arbitrum One supports smart contracts written in Solidity and other programming languages (Rust, C++) that compile to WASM. Such smart contracts are executed by nodes using either a geth fork or [a fork of wasmer](https://github.com/OffchainLabs/wasmer) inside the Nitro node, and can be proven with the onchain WASM VM.","risks":[],"references":[{"title":"Inside Arbitrum Nitro","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"},{"title":"A gentle introduction: Stylus","url":"https://docs.arbitrum.io/stylus/stylus-gentle-introduction"}]},{"name":"Arbitrum DAO is in charge of upgrades","description":"Arbitrum DAO allows $ARB token holders to propose and vote on changes to the organization and the technologies it governs. The governance smart contracts are implemented on Arbitrum One rollup chain. The DAO can upgrade the Arbitrum One contracts on L2 with 8d delay and - using L2 --> L1 Governance Relay, update contracts on L1 with additional 3d delay + 6d 8h delay for all L2 --> L1 messages (in total a delay of 17d 8h). The Security Council can upgrade the contracts without any delay. It can also cancel any upgrades initiated by the DAO.","risks":[],"references":[{"title":"Arbitrum DAO","url":"https://docs.arbitrum.foundation/concepts/arbitrum-dao"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"eth:0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D","type":"EOA","isVerified":true,"name":"0x0C59…E32D","url":"https://etherscan.io/address/0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D"},{"address":"eth:0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc","type":"EOA","isVerified":true,"name":"0xC1b6…47cc","url":"https://etherscan.io/address/0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"L1Timelock","accounts":[{"address":"eth:0xE6841D92B0C345144506576eC13ECf5103aC7f49","type":"Contract","isVerified":true,"name":"0xE684…7f49","url":"https://etherscan.io/address/0xE6841D92B0C345144506576eC13ECf5103aC7f49"}],"chain":"ethereum","description":"A timelock with access control. The current minimum delay is 3d. Proposals that passed their minimum delay can be executed by the anyone.\n* Can upgrade **with no delay**\n  * SequencerInbox [via: UpgradeExecutor → ProxyAdmin]\n  * CustomGateway [via: UpgradeExecutor → ProxyAdmin 3]\n  * RollupEventInbox [via: UpgradeExecutor → ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → ProxyAdmin 2]\n  * ERC20Gateway [via: UpgradeExecutor → ProxyAdmin 3]\n  * Bridge [via: UpgradeExecutor → ProxyAdmin]\n  * Inbox [via: UpgradeExecutor → ProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → ProxyAdmin 3]\n  * Outbox [via: UpgradeExecutor → ProxyAdmin]\n  * L1Timelock [via: UpgradeExecutor → ProxyAdmin 2]\n  * RollupProxy [via: UpgradeExecutor]\n  * EdgeChallengeManager [via: UpgradeExecutor → ProxyAdmin]\n* Can interact with L1Timelock\n  * cancel queued transactions [via: UpgradeExecutor]\n  * update the minimum delay and manage all access control roles of the timelock [via: UpgradeExecutor]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","discoveryDrivenData":true},{"name":"SecurityCouncil","description":"A Multisig with 9/12 threshold. It uses the following modules: UpgradeExecutor (Central contract defining the access control permissions for upgrading the system contract implementations).\n* Can upgrade **with no delay**\n  * SequencerInbox [via: UpgradeExecutor → ProxyAdmin]\n  * CustomGateway [via: UpgradeExecutor → ProxyAdmin 3]\n  * RollupEventInbox [via: UpgradeExecutor → ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → ProxyAdmin 2]\n  * ERC20Gateway [via: UpgradeExecutor → ProxyAdmin 3]\n  * Bridge [via: UpgradeExecutor → ProxyAdmin]\n  * Inbox [via: UpgradeExecutor → ProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → ProxyAdmin 3]\n  * Outbox [via: UpgradeExecutor → ProxyAdmin]\n  * L1Timelock [via: UpgradeExecutor → ProxyAdmin 2]\n  * RollupProxy [via: UpgradeExecutor]\n  * EdgeChallengeManager [via: UpgradeExecutor → ProxyAdmin]\n* Can interact with L1Timelock\n  * cancel queued transactions [via: UpgradeExecutor]\n  * update the minimum delay and manage all access control roles of the timelock [via: UpgradeExecutor]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","accounts":[{"address":"eth:0xF06E95eF589D9c38af242a8AAee8375f14023F85","type":"Contract","isVerified":true,"name":"0xF06E…3F85","url":"https://etherscan.io/address/0xF06E95eF589D9c38af242a8AAee8375f14023F85"}],"chain":"ethereum","references":[{"title":"Security Council members - Arbitrum Foundation Docs","url":"https://docs.arbitrum.foundation/security-council-members"}],"participants":[{"address":"eth:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E","type":"EOA","isVerified":true,"name":"fred - Arbitrum 2","url":"https://etherscan.io/address/0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E"},{"address":"eth:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392","type":"EOA","isVerified":true,"name":"Michael Lewellen - blockaid","url":"https://etherscan.io/address/0xBBD2E01eFB88ce00F8f5b6B9a696966070089392"},{"address":"eth:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D","type":"EOA","isVerified":true,"name":"Certora 2","url":"https://etherscan.io/address/0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D"},{"address":"eth:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B","type":"EOA","isVerified":true,"name":"DennisonBertram-Tally","url":"https://etherscan.io/address/0x59c8535419BbCb8AdFFDB3C835435E907e3B183B"},{"address":"eth:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67","type":"EOA","isVerified":true,"name":"JohnMorrow-Gauntlet","url":"https://etherscan.io/address/0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67"},{"address":"eth:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8","type":"EOA","isVerified":true,"name":"GoncaloMagalhaes-Immunefi","url":"https://etherscan.io/address/0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8"},{"address":"eth:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33","type":"EOA","isVerified":true,"name":"gzeon-OffchainLabs","url":"https://etherscan.io/address/0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33"},{"address":"eth:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93","type":"EOA","isVerified":true,"name":"EmilianoBonassi-Conduit","url":"https://etherscan.io/address/0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93"},{"address":"eth:0x882c6FCb3D358b9d70B97c6999159cea64168B6F","type":"EOA","isVerified":true,"name":"GriffGreen-Giveth","url":"https://etherscan.io/address/0x882c6FCb3D358b9d70B97c6999159cea64168B6F"},{"address":"eth:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC","type":"EOA","isVerified":true,"name":"StevenThornton-OpenZeppelin","url":"https://etherscan.io/address/0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC"},{"address":"eth:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA","isVerified":true,"name":"bartek.eth-L2BEAT","url":"https://etherscan.io/address/0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae"},{"address":"eth:0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA","isVerified":true,"name":"yoav.eth-EF","url":"https://etherscan.io/address/0x475816ca2a31D601B4e336f5c2418A67978aBf09"}],"discoveryDrivenData":true},{"name":"BatchPosterManagerMultisig","description":"A Multisig with 4/6 threshold. \n* Can interact with SequencerInbox\n  * Add/remove batchPosters (Sequencers) ","accounts":[{"address":"eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B","type":"Contract","isVerified":true,"name":"0xd0FD…679B","url":"https://etherscan.io/address/0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x375906ADFD34D93236084F462BB2dB0D92129Fe1","type":"EOA","isVerified":true,"name":"0x3759…9Fe1","url":"https://etherscan.io/address/0x375906ADFD34D93236084F462BB2dB0D92129Fe1"},{"address":"eth:0xfE2bf40f2A9183774BF8E871d634A4E50255158B","type":"EOA","isVerified":true,"name":"0xfE2b…158B","url":"https://etherscan.io/address/0xfE2bf40f2A9183774BF8E871d634A4E50255158B"},{"address":"eth:0x64379Dee676ab442B48925Ed603771f386510Ee7","type":"EOA","isVerified":true,"name":"0x6437…0Ee7","url":"https://etherscan.io/address/0x64379Dee676ab442B48925Ed603771f386510Ee7"},{"address":"eth:0x290Aa3E7533c873B3326DabFe7579e86ed951428","type":"EOA","isVerified":true,"name":"0x290A…1428","url":"https://etherscan.io/address/0x290Aa3E7533c873B3326DabFe7579e86ed951428"},{"address":"eth:0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C","type":"EOA","isVerified":true,"name":"0x4d9A…f49C","url":"https://etherscan.io/address/0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C"},{"address":"eth:0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe","type":"EOA","isVerified":true,"name":"0x79D3…9fCe","url":"https://etherscan.io/address/0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe"}],"discoveryDrivenData":true}]},"nova":{"roles":[],"actors":[{"name":"L2SecurityCouncilEmergency","description":"A Multisig with 9/12 threshold. It uses the following modules: L2UpgradeExecutor (Central contract defining the access control permissions for upgrading the system contract implementations).\n* Can upgrade **with no delay**\n  * L2GatewayRouter [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2WethGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2UpgradeExecutor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ARBGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2ERC20Gateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2ArbitrumToken [via: L2UpgradeExecutor → L2ProxyAdmin]","accounts":[{"address":"arb-nova:0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3","type":"Contract","isVerified":true,"name":"0xc232…60F3","url":"https://nova.arbiscan.io/address/0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3"}],"chain":"nova","references":[],"participants":[{"address":"arb-nova:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E","type":"EOA","isVerified":true,"name":"fred - Arbitrum 2","url":"https://nova.arbiscan.io/address/0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E"},{"address":"arb-nova:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392","type":"EOA","isVerified":true,"name":"Michael Lewellen - blockaid","url":"https://nova.arbiscan.io/address/0xBBD2E01eFB88ce00F8f5b6B9a696966070089392"},{"address":"arb-nova:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D","type":"EOA","isVerified":true,"name":"Certora 2","url":"https://nova.arbiscan.io/address/0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D"},{"address":"arb-nova:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B","type":"EOA","isVerified":true,"name":"DennisonBertram-Tally","url":"https://nova.arbiscan.io/address/0x59c8535419BbCb8AdFFDB3C835435E907e3B183B"},{"address":"arb-nova:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67","type":"EOA","isVerified":true,"name":"JohnMorrow-Gauntlet","url":"https://nova.arbiscan.io/address/0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67"},{"address":"arb-nova:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8","type":"EOA","isVerified":true,"name":"GoncaloMagalhaes-Immunefi","url":"https://nova.arbiscan.io/address/0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8"},{"address":"arb-nova:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33","type":"EOA","isVerified":true,"name":"gzeon-OffchainLabs","url":"https://nova.arbiscan.io/address/0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33"},{"address":"arb-nova:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93","type":"EOA","isVerified":true,"name":"EmilianoBonassi-Conduit","url":"https://nova.arbiscan.io/address/0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93"},{"address":"arb-nova:0x882c6FCb3D358b9d70B97c6999159cea64168B6F","type":"EOA","isVerified":true,"name":"GriffGreen-Giveth","url":"https://nova.arbiscan.io/address/0x882c6FCb3D358b9d70B97c6999159cea64168B6F"},{"address":"arb-nova:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC","type":"EOA","isVerified":true,"name":"StevenThornton-OpenZeppelin","url":"https://nova.arbiscan.io/address/0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC"},{"address":"arb-nova:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA","isVerified":true,"name":"bartek.eth-L2BEAT","url":"https://nova.arbiscan.io/address/0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae"},{"address":"arb-nova:0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA","isVerified":true,"name":"yoav.eth-EF","url":"https://nova.arbiscan.io/address/0x475816ca2a31D601B4e336f5c2418A67978aBf09"}],"discoveryDrivenData":true},{"name":"L1Timelock","accounts":[{"address":"arb-nova:0xf7951D92B0C345144506576eC13Ecf5103aC905a","type":"EOA","isVerified":true,"name":"0xf795…905a","url":"https://nova.arbiscan.io/address/0xf7951D92B0C345144506576eC13Ecf5103aC905a"}],"chain":"nova","description":"* Can upgrade **with no delay**\n  * L2GatewayRouter [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2WethGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2UpgradeExecutor [via: L2UpgradeExecutor → L2ProxyAdmin]\n  * L2ARBGateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2ERC20Gateway [via: L2UpgradeExecutor → L2GatewaysProxyAdmin]\n  * L2ArbitrumToken [via: L2UpgradeExecutor → L2ProxyAdmin]","discoveryDrivenData":true}]}},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. State roots are referred to as \"assertions\" within the contracts. Each chain of assertions only requires one stake, and validators staked on assertions with a child are considered inactive and can either move their stake to a new node or withdraw it. The function used to propose a new assertion is the `stakeOnNewAssertion` function. The stake is currently set to 1.0 ETH, and it can be slashed if the proposal is proven incorrect via a fraud proof. The protocol allows such funds to be trustlessly pooled together if necessary. New nodes cannot be created faster than the minimum assertion period, currently set to 15m. An assertion without \"rivals\" can be confirmed after the challenge period has passed, currently set to 6d 8h. If a rival is present, then it is checked that the assertion is the winner in the challenge protocol.","risks":[],"references":[{"title":"BoLD paper","url":"https://arxiv.org/pdf/2404.10491"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `createLayerZeroEdge` function in the `ChallengeManager` contract. Edges represent assertions, or bisected assertions, within the challenge protocol. Challenges are played via a bisection game, where asserters and challengers play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner. An edge can only be bisected when rivaled. The bisection process requires no new stake as their validity is checked against a parent \"history root\" that contains all intermediate states. An edge can also be confirmed if itself or its descendants spend enough time being unrivaled. Such time is set to 6d 8h. If both actors play as slow as possible, the maximum time to confirm an edge is double such value, i.e. 12d 17h. Due to the complexities of maintaining the history root, the challenge protocol is divided into 3 levels, where the lowest level represents assertions over blocks, the highest level represents assertions over single WASM instructions, and intermediate levels represent assertions over chunks of WASM instructions. When moving between levels, a new stake is required. Level 0 (block level) requires a stake of 0.0 ETH, level 1 requires a stake of 1.0 ETH, level 2 requires a stake of 1.0 ETH. The ratio between such stakes can be exploited to perform resource exhaustion attacks.","risks":[{"category":"Funds can be stolen if","text":"an attacker successfully performs a resource exhaustion attack."}],"references":[{"title":"Fraud Proof Wars: Arbitrum BoLD","url":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"milestones":[{"title":"Bold deployed with a whitelist","url":"https://x.com/arbitrum/status/1889710151332245837","date":"2025-02-15T00:00:00Z","type":"general"},{"title":"ArbOS 32 Emergency upgrade","url":"https://github.com/OffchainLabs/nitro/releases/tag/v3.2.0","date":"2024-09-25T00:00:00Z","description":"SecurityCouncil emergency upgrades to fix attack vectors related to Stylus resource pricing.","type":"incident"},{"title":"ArbOS 31 Bianca upgrade","url":"https://www.tally.xyz/gov/arbitrum/proposal/108288822474129076868455956066667369439381709547570289793612729242368710728616","date":"2024-09-03T00:00:00Z","description":"Nova upgrades to ArbOS 31 activating Stylus (new languages for smart contracts).","type":"general"},{"title":"Arbitrum Nova Public Mainnet launch","description":"Whitelist got removed, there are no restrictions on who can transact with the network.","date":"2022-08-09T00:00:00Z","url":"https://medium.com/offchainlabs/its-time-for-a-new-dawn-nova-is-open-to-the-public-a081df1e4ad2","type":"general"}],"badges":[{"id":"Nitro","type":"Stack","name":"Built on Arbitrum Nitro","description":"The project is built on Arbitrum Nitro","action":{"type":"scalingFilter","id":"stack","value":"Arbitrum"}},{"id":"DAC","type":"DA","name":"Data Availability Committee","description":"There is a Data Availability Committee that provides/attests to data availability","action":{"type":"selfDaHighlight"}},{"id":"WasmVM","type":"VM","name":"WasmVM","description":"This project uses a WebAssembly Virtual Machine to run its smart contracts","action":{"type":"scalingFilter","id":"vm","value":"WasmVM"}},{"id":"Governance","type":"Other","name":"Governance","description":"This project features token voting","action":{"type":"scalingFilter","id":"other","value":"Governance"}},{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}}],"customDa":{"type":"Data Availability Committee","description":"Set of parties responsible for signing and attesting to the availability of data.","dac":{"requiredMembers":5,"membersCount":6,"knownMembers":[{"external":true,"name":"ConsenSys Software Inc.","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"},{"external":true,"name":"QuickNode, Inc.","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"},{"external":true,"name":"P2P.org","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"},{"external":true,"name":"Google Cloud","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"},{"external":false,"name":"Offchain Labs, Inc.","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"},{"external":true,"name":"Opensea Innovation Labs Private Limited","href":"https://docs.arbitrum.foundation/state-of-progressive-decentralization#data-availability-committee-members"}]},"technology":{"description":"\n## Architecture\n![Nova architecture](/images/da-layer-technology/nova/architecture.png#center)\n\nNova is a data availability solution for Arbitrum rollups built on the AnyTrust protocol. It is composed of the following components:\n- **Sequencer Inbox**: Main entry point for the Sequencer submitting transaction batches.\n- **Data Availability Committee (DAC)**: A group of members responsible for storing and providing data on demand.\n- **Data Availability Certificate (DACert)**: A commitment ensuring that data blobs are available without needing full data posting on the L1 chain. \n\nCommittee members run servers that support APIs for storing and retrieving data blobs. \nThe Sequencer API allows the rollup Sequencer to submit data blobs for storage, while the REST API enables anyone to fetch data by hash. \nWhen the Sequencer produces a data batch, it sends the batch along with an expiration time to Committee members, who store it and sign it. \nOnce enough signatures are collected, the Sequencer aggregates them into a valid DACert and posts it to the L1 chain inbox. \nIf the Sequencer fails to collect enough signatures, it falls back to posting the full data to the L1 chain. \n\n\nA DACert includes a hash of the data block, an expiration time, and proof that the required threshold of Committee members have signed off on the data. \nThe proof consists of a hash of the Keyset used in signing, a bitmap indicating which members signed, and a BLS aggregated signature. \nL2 nodes reading from the sequencer inbox verify the certificate’s validity by checking the number of signers, the aggregated signature, and that the expiration time is at least two weeks ahead of the L2 timestamp. \nIf the DACert is valid, it provides a proof that the corresponding data is available from honest committee members.\n\n## DA Bridge Architecture\n![Nova bridge architecture](/images/da-bridge-technology/nova/architecture.png#center)\n\nIn Nova architecture, the DA commitments are posted to the L1 through the sequencer inbox, using the inbox as a DA bridge.\nThe DA commitment consists of Data Availability Certificate (DACert), including a hash of the data block, an expiration time, and a proof that the required threshold of Committee members have signed off on the data.\nThe sequencer distributes the data and collects signatures from Committee members offchain. Only the DACert is posted by the sequencer to the L1 chain inbox (the DA bridge), achieving L2 transaction ordering finality in a single onchain transaction.\n\n## DA Bridge Upgradeability\n![Nova bridge architecture](/images/upgrades-and-governance/nova.png#center)\n\nThe Arbitrum DAO controls Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s. \nRegular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (proposer-) Security Council on Arbitrum One and pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs (one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts. These two general paths have the same destination: the respective UpgradeExecutor smart contract.\nRegular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a CoreGovernor-enforced 5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 3d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h. When that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited, and even cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner functions of the respective destination smart contracts through the UpgradeExecutor on Ethereum. If the predefined transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\nOperator roles like the Sequencers and Validators are managed using the same paths. Sequencer changes can be delegated to a Batch Poster Manager.\n"},"risks":{"committeeSecurity":{"value":"5/6","sentiment":"warning","description":"The committee requires an honest minority (less than 1/3) of members (or the network stake) to prevent the DA bridge from accepting an unavailable data commitment.\n        There are at least 5 external actors in the committee, but entry or exit of members is partially controlled by a centralized entity.","orderHint":-6.000000000000001e-10},"upgradeability":{"value":"17d 8h","sentiment":"warning","description":"For regular updates, there is a 17d 8h delay before the bridge implementation update is completed. The Security Council can upgrade the DA bridge without delay."},"relayerFailure":{"value":"Governance","sentiment":"warning","description":"The relayer role is permissioned, but the DA bridge has a Security Council or a governance mechanism to propose new relayers. In case of relayer failure, the DA bridge liveness can be restored by proposing a new relayer after a delay of 17d 8h via governance upgrade, or through a Security Council without delay."},"economicSecurity":{"value":{"value":"Public committee","sentiment":"warning","description":"There are no onchain assets at risk of being slashed in case of a data withholding attack. However, there is indirect economic security derived by the committee members being publicly known, and their reputation is at stake should they behave maliciously."},"adjustSecurityRisk":false},"fraudDetection":{"value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}}},"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"5/6 DAC Members","sentiment":"warning","description":"There is a threshold of 5/6 members that must sign and attest that the data is correct and available.","orderHint":-6.000000000000001e-10},"mode":{"value":"Transaction data","secondLine":"Compressed"}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1753344203,"nova":1753344203},"hasDiscoUi":false},"ecosystemInfo":{"id":"arbitrum-orbit"},"upgradesAndGovernance":"\nAll critical system smart contracts are upgradeable (can be arbitrarily changed). This permission is governed by the Arbitrum Decentralized Autonomous Organization (DAO)\nand their elected Security Council. The Arbitrum DAO controls Arbitrum One and Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s.\nWhile the DAO governs through token-weighted governance in their associated ARB token, the Security Council can directly act through\nmultisigs on all three chains. Although they are technically separate and connect to different target permissions,\ntheir member- and threshold configuration is kept in sync by a manager contract on Arbitrum One sending crosschain transactions.\n\nRegular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (Proposer-) Security Council on Arbitrum One\nand pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs\n(one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts.\nThese two general paths have the same destination: the respective UpgradeExecutor smart contract.\n\nRegular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a\nCoreGovernor-enforced 4.5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 8d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h.\nWhen that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited,\nand, in the case of the final L1 timelock, cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner restricted functions of the respective destination smart contracts\nthrough the UpgradeExecutor on Ethereum. If the predefined  transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\n\nOperator roles like the Sequencers and Validators are managed using the same paths.\nSequencer changes can be delegated to a Batch Poster Manager role.\n\nTransactions targeting the Arbitrum DAO Treasury can be scheduled in the 3d\nTreasury Timelock by meeting a TreasuryGovernor-enforced 3% threshold of votable ARB tokens. The Security Council cannot regularly cancel\nthese transactions or schedule different ones but can overwrite them anyway by having upgrade permissions for all the underlying smart contracts."}