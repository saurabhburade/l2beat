{"type":"layer2","id":"parallel","addedAt":1704289654,"capability":"universal","archivedAt":1733356800,"display":{"architectureImage":"orbit-rollup","stateValidationImage":"orbit","purposes":["Universal"],"name":"Parallel","slug":"parallel","redWarning":"Critical contracts can be upgraded by an EOA which could result in the loss of all funds.","headerWarning":"Parallel is [deprecating their Orbit stack Layer 2](https://medium.com/@ParallelFi/the-withdrawal-on-parallel-l2-is-now-available-c3b4b572864e).","description":"Parallel is an Ethereum L2 solution utilizing Arbitrum Nitro technology.","links":{"websites":["https://parallel.fi"],"bridges":["https://parallel.fi/airdrop"],"documentation":["https://docs.parallel.fi/parallel-chain/overview"],"explorers":["https://explorerl2new-surprised-harlequin-bonobo-fvcy2k9oqh.t.conduit.xyz/"],"socialMedia":["https://twitter.com/ParallelFi","https://discord.gg/rdjVz8zavF","https://t.me/parallelfi_community"]},"warning":"Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.","stacks":["Arbitrum"],"liveness":{"warnings":{"stateUpdates":"Please note, for Optimistic rollups the state is not finalized until the challenge period passes."},"explanation":"Parallel posts transaction data to the L1. For a transaction to be considered final, it has to be posted to the L1. Forced txs can be delayed up to 2d. The state root is settled 6d after it has been posted."}},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d challenge period.","challengeDelay":518400,"sentiment":"bad","orderHint":1},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","orderHint":null},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":-172800},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There can be up to a 2d delay on this operation.","sentiment":"good","orderHint":172800,"secondLine":"2d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 12d 8h of inactivity from the currently whitelisted Proposers.","sentiment":"good","orderHint":1068216,"secondLine":"12d 8h delay"}},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.","The Security Council is not properly set up."],"principle":"Compromising ≥75% of the Security Council should be the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal)."},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":false,"description":"Fraud proof submission is not sufficiently decentralized."},{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":"UnderReview","description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"Users are able to exit without the help of the permissioned operators."},{"satisfied":false,"description":"Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."},{"satisfied":false,"description":"The Security Council is not properly set up."}],"principle":{"satisfied":false,"description":"Compromising ≥75% of the Security Council should be the only way (other than bugs) for a rollup to indefinitely block an L2→L1 message (e.g. a withdrawal) or push an invalid L2→L1 message (e.g. an invalid withdrawal)."}},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Fraud proof submission is open only to whitelisted actors."},{"satisfied":false,"description":"Upgrades unrelated to onchain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to onchain provable bugs."}]}],"message":{"type":"underReview","text":"The requirement for available node software is under review"}},"config":{"escrows":[{"address":"0x5a961c7D162195a9Dc5a357Cc168b0694283382E","sinceTimestamp":1704125939,"tokens":["ETH"],"contract":{"isVerified":true,"address":"eth:0x5a961c7D162195a9Dc5a357Cc168b0694283382E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":[{"name":"ProxyAdmin","delay":"no"}]},"chain":"ethereum","includeInTotal":true},{"address":"0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d","sinceTimestamp":1704126935,"tokens":"*","contract":{"isVerified":true,"address":"eth:0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0xf43bce5D32742FFC862eA182b0b5544CbDBB0F02"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted."},"chain":"ethereum","includeInTotal":true},{"address":"0xa1c86E2362dba0525075622af6d5f739B1304D45","sinceTimestamp":1704126935,"tokens":"*","contract":{"isVerified":true,"address":"eth:0xa1c86E2362dba0525075622af6d5f739B1304D45","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0xedB05ED1a37750833fBE85b808c872D841d00859"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens that require minting custom token on L2."},"chain":"ethereum","includeInTotal":true,"source":"external"}],"activityConfig":{"type":"block","startBlock":1,"adjustCount":{"type":"SubtractOne"}},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0xe0bc9729","functionSignature":"function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x8f111f3c","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x37501551","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes quote)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x3e5aa082","functionSignature":"function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x6e620055","functionSignature":"function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x917cf8ac","functionSignature":"function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","selector":"0x69cacded","functionSignature":"function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1704125939}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xB6e0586616ebE79b2F86dDB32048c500D23b3AC3","selector":"0xa04cee60","functionSignature":"function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external","sinceTimestamp":1704125939}}]},"contracts":{"addresses":{"ethereum":[{"name":"ChallengeManager","isVerified":true,"address":"eth:0x28c32059d7e6147cf5257DFC127f7258beA1cdf4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]},"chain":"ethereum","description":"Contract that allows challenging state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Bridge","isVerified":true,"address":"eth:0x5a961c7D162195a9Dc5a357Cc168b0694283382E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupProxy","isVerified":true,"address":"eth:0x6594085ca55a2B3a5fAD1C57A270D060eEa99877","upgradeability":{"proxyType":"Arbitrum proxy","admins":["eth:0xD368b8dC5cB6fA26A53b7588db9A87E509A72d89"],"implementations":["eth:0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A","eth:0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both held by the Validators).\n* Roles:\n  * **admin**: UpgradeExecutor; ultimately EOA 1, ParallelMultisig\n  * **owner**: UpgradeExecutor; ultimately EOA 1, ParallelMultisig\n  * **validators**: EOA 2","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"SequencerInbox","isVerified":true,"address":"eth:0xb4795A0edae98d7820C37F06f6b858e7acb51DF8","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig\n  * **batchPosters**: EOA 3, EOA 4","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeExecutor","isVerified":true,"address":"eth:0xD368b8dC5cB6fA26A53b7588db9A87E509A72d89","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x6c21303F5986180B1394d2C89f3e883890E2867b"]},"chain":"ethereum","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig\n  * **executors**: EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Inbox","isVerified":true,"address":"eth:0x12485B9d469c1D51d05b5C39e009D50eF0170cF7","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x1162084C3C6575121146582Db5BE43189e8CEe6b"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"ERC20Gateway","isVerified":true,"address":"eth:0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0xf43bce5D32742FFC862eA182b0b5544CbDBB0F02"]},"chain":"ethereum","description":"Escrows deposited ERC-20 assets for the canonical Bridge. Upon depositing, a generic token representation will be minted at the destination. Withdrawals are initiated by the Outbox contract.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Outbox","isVerified":true,"address":"eth:0xB6e0586616ebE79b2F86dDB32048c500D23b3AC3","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"GatewayRouter","isVerified":true,"address":"eth:0x5D657b905275F36AD62C3d5C36966975613aFB96","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x6525137BfF366fbc0A89E3e5A4d244B5A0090a6D"]},"chain":"ethereum","description":"This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"CustomGateway","isVerified":true,"address":"eth:0xa1c86E2362dba0525075622af6d5f739B1304D45","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0xedB05ED1a37750833fBE85b808c872D841d00859"]},"chain":"ethereum","description":"Escrows deposited assets for the canonical bridge that are externally governed or need custom token contracts with e.g. minting rights or upgradeability.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"L1WethGateway","isVerified":true,"address":"eth:0x150286BdbE7C8Cd23D41a8e1e64438e0dc04dc3d","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0xa86996bED19547f7dEf22a087dD61b5F9Fb6C684"]},"chain":"ethereum","description":"* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProverHostIo","isVerified":true,"address":"eth:0x17e7F68ce50A77e55C7834ddF31AEf86403B8010","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ValidatorUtils","isVerified":true,"address":"eth:0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"This contract implements view only utilities for validators.\n","discoveryDrivenData":true},{"name":"RollupEventInbox","isVerified":true,"address":"eth:0x36E5DE57f862cf5bA28624845faB8c2fF6Aa41d2","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],"implementations":["eth:0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately EOA 1, ParallelMultisig","upgradableBy":[{"name":"ParallelMultisig","delay":"no"},{"name":"EOA 1","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProofEntry","isVerified":true,"address":"eth:0x57EA090Ac0554d174AE0e2855B460e84A1A7C221","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"OneStepProver0","isVerified":true,"address":"eth:0x72B166070781a552D7b95a907eF59ca05d3D5a62","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMemory","isVerified":true,"address":"eth:0x8b73Ef238ADaB31EBC7c05423d243c345241a22f","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMath","isVerified":true,"address":"eth:0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"chainConfig":{"name":"parallel","chainId":1024,"apis":[{"type":"rpc","url":"https://rpc.parallel.fi","callsPerMinute":120}],"gasTokens":["ETH"]},"technology":{"sequencing":{"name":"Delayed forced transactions","description":"To force transactions from the host chain, users must first enqueue \"delayed\" messages in the \"delayed\" inbox of the Bridge contract. Only authorized Inboxes are allowed to enqueue delayed messages, and the so-called Inbox contract is the one used as the entry point by calling the `sendMessage` or `sendMessageFromOrigin` functions. If the centralized sequencer doesn't process the request within some time bound, users can call the `forceInclusion` function on the SequencerInbox contract to include the message in the canonical chain. The time bound is hardcoded to be 2d.","references":[],"risks":[]},"dataAvailability":{"name":"All transaction data is recorded on chain","description":"All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.","risks":[],"references":[{"title":"Sequencing followed by deterministic execution - Arbitrum documentation","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"},{"title":"SequencerInbox.sol - source code, addSequencerL2BatchFromOrigin function","url":"https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Sequencer - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 2d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"title":"SequencerInbox.sol - source code, forceInclusion function","url":"https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"},{"title":"Sequencer Isn't Doing Its Job - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[],"references":[{"title":"Transaction lifecycle - Arbitrum documentation","url":"https://developer.offchainlabs.com/tx-lifecycle"},{"title":"L2 to L1 Messages - Arbitrum documentation","url":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"title":"Mainnet for everyone - Arbitrum Blog","url":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.","risks":[],"references":[{"title":"Inside Arbitrum Nitro","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"eth:0x40acDc94a00b33151B40763b3Fed7C46fF639Df4","type":"EOA","isVerified":true,"name":"0x40ac…9Df4","url":"https://etherscan.io/address/0x40acDc94a00b33151B40763b3Fed7C46fF639Df4"},{"address":"eth:0x7a6BD06483710252d807bE205255E69490efca3A","type":"EOA","isVerified":true,"name":"0x7a6B…ca3A","url":"https://etherscan.io/address/0x7a6BD06483710252d807bE205255E69490efca3A"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Validator","description":"Can propose new state roots (called nodes) and challenge state roots on the host chain.","accounts":[{"address":"eth:0xcCE420Beb5a68091572A1cd860e10aE3Ce286FeA","type":"EOA","isVerified":true,"name":"0xcCE4…6FeA","url":"https://etherscan.io/address/0xcCE420Beb5a68091572A1cd860e10aE3Ce286FeA"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"ParallelMultisig","description":"A Multisig with 3/3 threshold. \n* Can upgrade **with no delay**\n  * Inbox [via: UpgradeExecutor → ProxyAdmin]\n  * L1WethGateway [via: UpgradeExecutor → ProxyAdmin]\n  * ChallengeManager [via: UpgradeExecutor → ProxyAdmin]\n  * RollupEventInbox [via: UpgradeExecutor → ProxyAdmin]\n  * Bridge [via: UpgradeExecutor → ProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → ProxyAdmin]\n  * RollupProxy [via: UpgradeExecutor]\n  * ERC20Gateway [via: UpgradeExecutor → ProxyAdmin]\n  * CustomGateway [via: UpgradeExecutor → ProxyAdmin]\n  * SequencerInbox [via: UpgradeExecutor → ProxyAdmin]\n  * Outbox [via: UpgradeExecutor → ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → ProxyAdmin]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","accounts":[{"address":"eth:0x19293FBec52F94165f903708a74513Dd6dFedd0a","type":"Contract","isVerified":true,"name":"0x1929…dd0a","url":"https://etherscan.io/address/0x19293FBec52F94165f903708a74513Dd6dFedd0a"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x13E83b0423534Eb6D542237F590096CEE5077056","type":"EOA","isVerified":true,"name":"0x13E8…7056","url":"https://etherscan.io/address/0x13E83b0423534Eb6D542237F590096CEE5077056"},{"address":"eth:0x3968de97416c875F50FFC60A4A4E84378bF16Ad5","type":"EOA","isVerified":true,"name":"0x3968…6Ad5","url":"https://etherscan.io/address/0x3968de97416c875F50FFC60A4A4E84378bF16Ad5"},{"address":"eth:0x909e36B512Ed45250fdff513523119d825647695","type":"EOA","isVerified":true,"name":"0x909e…7695","url":"https://etherscan.io/address/0x909e36B512Ed45250fdff513523119d825647695"}],"discoveryDrivenData":true},{"name":"EOA 1","accounts":[{"address":"eth:0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C","type":"EOA","isVerified":true,"name":"0xefCf…dD5C","url":"https://etherscan.io/address/0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C"}],"chain":"ethereum","description":"* Can upgrade **with no delay**\n  * Inbox [via: UpgradeExecutor → ProxyAdmin]\n  * L1WethGateway [via: UpgradeExecutor → ProxyAdmin]\n  * ChallengeManager [via: UpgradeExecutor → ProxyAdmin]\n  * RollupEventInbox [via: UpgradeExecutor → ProxyAdmin]\n  * Bridge [via: UpgradeExecutor → ProxyAdmin]\n  * GatewayRouter [via: UpgradeExecutor → ProxyAdmin]\n  * RollupProxy [via: UpgradeExecutor]\n  * ERC20Gateway [via: UpgradeExecutor → ProxyAdmin]\n  * CustomGateway [via: UpgradeExecutor → ProxyAdmin]\n  * SequencerInbox [via: UpgradeExecutor → ProxyAdmin]\n  * Outbox [via: UpgradeExecutor → ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor → ProxyAdmin]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","discoveryDrivenData":true}]}},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.","risks":[{"category":"Funds can be stolen if","text":"none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.","isCritical":true}],"references":[{"title":"How is fraud proven - Arbitrum documentation FAQ","url":"https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.","references":[{"title":"Fraud Proof Wars: Arbitrum Classic","url":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"milestones":[{"title":"ArbOS v20 upgrade","url":"https://forum.arbitrum.foundation/t/aip-arbos-version-20-atlas/20957","date":"2024-04-10T00:00:00.00Z","description":"Introduces EIP-4844 data blobs for L1 data availability and Dencun-related opcodes on L2.","type":"general"},{"title":"Parallel Mainnet closed launch","url":"https://twitter.com/ParallelFi/status/1743048283684237574","date":"2024-01-05T00:00:00Z","description":"Parallel Mainnet is open for developers.","type":"general"}],"badges":[{"id":"Orbit","type":"Stack","name":"Built on Arbitrum Orbit","description":"The project is built on Arbitrum Orbit","action":{"type":"scalingFilter","id":"stack","value":"Arbitrum"}},{"id":"EthereumCalldata","type":"DA","name":"Ethereum with calldata","description":"This project is posting its data to Ethereum as calldata","action":{"type":"publicDaHighlight","slug":"ethereum"}},{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}}],"reasonsForBeingOther":[{"label":"No proofs","shortDescription":"The proof system isn't fully functional","description":"Projects without a proper proof system fully rely on single entities to safely update the state. A malicious proposer can finalize an invalid state, which can cause loss of funds."}],"dataAvailability":{"layer":{"value":"Ethereum","secondLine":"Calldata","sentiment":"good","description":"The data is posted to Ethereum as calldata.","projectId":"ethereum"},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted onchain.","projectId":"ethereum"},"mode":{"value":"Transaction data","secondLine":"Compressed"}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1746547031},"hasDiscoUi":false},"ecosystemInfo":{"id":"arbitrum-orbit"}}