{"type":"layer2","id":"powerloom","addedAt":1741768931,"capability":"universal","display":{"architectureImage":"orbit-optimium-fastconfirm","stateValidationImage":"orbit","purposes":["Universal","Information"],"name":"Powerloom","slug":"powerloom","description":"Powerloom Mainnet is the Layer-2 chain supporting Powerloomâ€™s composable data network where devs, orgs, and end-users get access to ready-to-consume, affordable, and verifiable onchain datasets.","stacks":["Arbitrum"],"links":{"websites":["https://powerloom.io/"],"bridges":["https://bridge-v2.powerloom.network/"],"documentation":["https://docs.powerloom.io/"],"explorers":["https://explorer.powerloom.network/"],"repositories":["https://github.com/powerLoom"],"socialMedia":["https://x.com/powerloom","https://t.me/PowerLoomProtocol","https://linkedin.com/company/powerloom/","https://youtube.com/@powerloom","https://discord.com/invite/powerloom"]},"warning":"Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted."},"proofSystem":{"type":"Optimistic"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow 10 WHITELISTED actors watching the chain to prove that the state is incorrect. There are fewer than 5 Challengers external to the Operator among these. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 5d 14h challenge period.","challengeDelay":483840,"sentiment":"bad","orderHint":10,"initialBond":"0.1"},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.","sentiment":"bad","orderHint":1},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","orderHint":-86400},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There can be up to a 1d delay on this operation.","sentiment":"good","orderHint":86400,"secondLine":"1d delay"},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.","sentiment":"good","orderHint":1033656,"secondLine":"11d 23h delay"}},"stage":{"stage":"NotApplicable"},"config":{"associatedTokens":["POWER"],"escrows":[{"address":"0x53b168016aA2E3469B5D76315311aAC4Ce0020DB","sinceTimestamp":1741768931,"tokens":["POWER"],"contract":{"isVerified":true,"address":"eth:0x53b168016aA2E3469B5D76315311aAC4Ce0020DB","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0xd7FD189F1652378f32dA3db7926e51a7b0344797"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows POWER sent to L2.","upgradableBy":[{"name":"ProxyAdmin","delay":"no"}]},"chain":"ethereum","includeInTotal":true},{"address":"0x23593421341152D5322F8869c0638DAAc4aED57C","sinceTimestamp":1741768931,"tokens":["USDC"],"contract":{"name":"L1OrbitUSDCGateway","isVerified":false,"address":"eth:0x23593421341152D5322F8869c0638DAAc4aED57C","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x2A7F4d60fE6dD63c4690Dd9f11C26D0BE53b3110"],"implementations":["eth:0xca8b6572477f5b5c5a2b1C7fEad58cF3DA5CD211"]},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true}],"activityConfig":{"type":"block","startBlock":1,"adjustCount":{"type":"SubtractOne"}},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0xe0bc9729","functionSignature":"function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x8f111f3c","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x37501551","functionSignature":"function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes quote)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x3e5aa082","functionSignature":"function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x6e620055","functionSignature":"function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x917cf8ac","functionSignature":"function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","selector":"0x69cacded","functionSignature":"function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)","sinceTimestamp":1741768931}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xc0dd0a059a8a948B7737D00bfC9024475C791259","selector":"0xa04cee60","functionSignature":"function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external","sinceTimestamp":1741768931}}]},"contracts":{"addresses":{"ethereum":[{"name":"ChallengeManager","isVerified":true,"address":"eth:0x0B5BbEedB3E8bc9a2352fFa0aED56b6fad8d3040","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0xDD9Dd7505a48c96D5De169Bec9573A5cc8e11A38"]},"chain":"ethereum","description":"Contract that allows challenging state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Bridge","isVerified":true,"address":"eth:0x53b168016aA2E3469B5D76315311aAC4Ce0020DB","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0xd7FD189F1652378f32dA3db7926e51a7b0344797"]},"chain":"ethereum","description":"Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"SequencerInbox","isVerified":true,"address":"eth:0x903Af716AA8C7C27Fd785F453D5a59C20E06bDeC","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0xaEd84B70Be8117112a5aa0d93a7fBff463A03b18"]},"chain":"ethereum","description":"A sequencer (registered in this contract) can submit transaction batches or commitments here.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1\n  * **batchPosters**: EOA 1, EOA 2, EOA 3, EOA 4, EOA 5, EOA 6, EOA 7, EOA 8, EOA 9","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupProxy","isVerified":true,"address":"eth:0x9f3dC4D1f6c6D9F2273d8b497E460E6E727210e8","upgradeability":{"proxyType":"Arbitrum proxy","admins":["eth:0x6a23390d8a086c1091188f8Db702E91DCA38805F"],"implementations":["eth:0x431cEb4EC80752304E7f19E72eb599074Cf5A202","eth:0x973Eb5A5993717A6b1C28Aa6D7b1dBF97a538e54"]},"chain":"ethereum","description":"Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both held by the Validators).\n* Roles:\n  * **admin**: UpgradeExecutor; ultimately Conduit Multisig 1\n  * **anyTrustFastConfirmer**: GnosisSafeL2; ultimately EOA 14\n  * **owner**: UpgradeExecutor; ultimately Conduit Multisig 1\n  * **validators**: EOA 10, EOA 11, EOA 12, EOA 13, EOA 14, EOA 15, EOA 16, EOA 17, EOA 18, GnosisSafeL2; ultimately EOA 14","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"UpgradeExecutor","isVerified":true,"address":"eth:0x6a23390d8a086c1091188f8Db702E91DCA38805F","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0x011d8F10fbC20C14B453768253CdFF7EB5B96917"]},"chain":"ethereum","description":"Central contract defining the access control permissions for upgrading the system contract implementations.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1\n  * **executors**: Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Inbox","isVerified":true,"address":"eth:0x7d4509336b154C17Df80D03A19C051ddAcdA2e7f","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0x6C051397fee2d79ccf92d1f3c5c6547fEBD838F4"]},"chain":"ethereum","description":"Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"Outbox","isVerified":true,"address":"eth:0xc0dd0a059a8a948B7737D00bfC9024475C791259","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0x1f24EDD5161f82588007f33B72b0b28e46cCE878"]},"chain":"ethereum","description":"Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"RollupEventInbox","isVerified":true,"address":"eth:0x02f3a60D25abF1844740a39cd9679227309a1Fa6","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e"],"implementations":["eth:0xb0f031Cd10598c6b4C33FcE1675F26CF937091da"]},"chain":"ethereum","description":"Helper contract sending configuration data over the bridge during the systems initialization.\n* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"OneStepProverMath","isVerified":true,"address":"eth:0x036147913eEb42E97790F9a693246c8444290AB6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverMemory","isVerified":true,"address":"eth:0x21c6F81b1063f09A6c26EDc74fBb9beb349A5E96","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"OneStepProverHostIo","isVerified":true,"address":"eth:0x231173CC90cB8486A7dbD1733B5105254316D50A","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"L1OrbitUSDCGateway","isVerified":false,"address":"eth:0x23593421341152D5322F8869c0638DAAc4aED57C","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0x2A7F4d60fE6dD63c4690Dd9f11C26D0BE53b3110"],"implementations":["eth:0xca8b6572477f5b5c5a2b1C7fEad58cF3DA5CD211"]},"chain":"ethereum","description":"* Roles:\n  * **admin**: ProxyAdmin; ultimately Conduit Multisig 1","upgradableBy":[{"name":"Conduit Multisig 1","delay":"no"}],"discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x256bBeDabDBa636a9Cd17890841C941a28e9437e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: UpgradeExecutor","discoveryDrivenData":true},{"name":"ProxyAdmin","isVerified":true,"address":"eth:0x2A7F4d60fE6dD63c4690Dd9f11C26D0BE53b3110","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"* Roles:\n  * **owner**: Conduit Multisig 1","discoveryDrivenData":true},{"name":"OneStepProver0","isVerified":true,"address":"eth:0x72b55c2C38EadE57C10047746632A369A060A46E","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true},{"name":"ValidatorUtils","isVerified":true,"address":"eth:0x84eA2523b271029FFAeB58fc6E6F1435a280db44","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"This contract implements view only utilities for validators.\n","discoveryDrivenData":true},{"name":"OneStepProofEntry","isVerified":true,"address":"eth:0x9f403f2054736884518E6D3f510C02f5959BDCC6","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.\n","discoveryDrivenData":true}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"chainConfig":{"name":"powerloom","gasTokens":["POWER"],"chainId":7869,"apis":[{"type":"rpc","url":"https://rpc-v2.powerloom.network","callsPerMinute":1500}]},"technology":{"sequencing":{"name":"Delayed forced transactions","description":"To force transactions from the host chain, users must first enqueue \"delayed\" messages in the \"delayed\" inbox of the Bridge contract. Only authorized Inboxes are allowed to enqueue delayed messages, and the so-called Inbox contract is the one used as the entry point by calling the `sendMessage` or `sendMessageFromOrigin` functions. If the centralized sequencer doesn't process the request within some time bound, users can call the `forceInclusion` function on the SequencerInbox contract to include the message in the canonical chain. The time bound is hardcoded to be 1d.","references":[],"risks":[]},"dataAvailability":{"name":"Data is not stored on chain","description":"Users transactions are not published onchain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"title":"Inside AnyTrust - Arbitrum documentation","url":"https://developer.offchainlabs.com/inside-anytrust"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"title":"Sequencer - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"title":"SequencerInbox.sol - source code, forceInclusion function","url":"https://etherscan.io/address/0xaEd84B70Be8117112a5aa0d93a7fBff463A03b18#code"},{"title":"Sequencer Isn't Doing Its Job - Arbitrum documentation","url":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. The process of block finalization usually takes several days to complete.","risks":[],"references":[{"title":"Transaction lifecycle - Arbitrum documentation","url":"https://developer.offchainlabs.com/tx-lifecycle"},{"title":"L2 to L1 Messages - Arbitrum documentation","url":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"title":"Mainnet for everyone - Arbitrum Blog","url":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.","risks":[],"references":[{"title":"Inside Arbitrum Nitro","url":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"}]}]},"permissions":{"ethereum":{"roles":[{"name":"Sequencer","description":"Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.","accounts":[{"address":"eth:0x17F187D978664C96ffD655996a45e085c403AD8b","type":"EOA","isVerified":true,"name":"0x17F1â€¦AD8b","url":"https://etherscan.io/address/0x17F187D978664C96ffD655996a45e085c403AD8b"},{"address":"eth:0x2E8C0869C173cC07c58186E9DeEA74314635b1E2","type":"EOA","isVerified":true,"name":"0x2E8Câ€¦b1E2","url":"https://etherscan.io/address/0x2E8C0869C173cC07c58186E9DeEA74314635b1E2"},{"address":"eth:0x4ed0f98FB4c331e672653E832c55E0f9F402C228","type":"EOA","isVerified":true,"name":"0x4ed0â€¦C228","url":"https://etherscan.io/address/0x4ed0f98FB4c331e672653E832c55E0f9F402C228"},{"address":"eth:0x74a0d46BA4F69cAB77A459f8B12dc531c7DaBf3C","type":"EOA","isVerified":true,"name":"0x74a0â€¦Bf3C","url":"https://etherscan.io/address/0x74a0d46BA4F69cAB77A459f8B12dc531c7DaBf3C"},{"address":"eth:0x85e70D857F6Fad7AD4ffc3fC95FD0fd8C396A09D","type":"EOA","isVerified":true,"name":"0x85e7â€¦A09D","url":"https://etherscan.io/address/0x85e70D857F6Fad7AD4ffc3fC95FD0fd8C396A09D"},{"address":"eth:0xA4f98Ac0E083C79BAB53A3895082e8a4fbf12CDe","type":"EOA","isVerified":true,"name":"0xA4f9â€¦2CDe","url":"https://etherscan.io/address/0xA4f98Ac0E083C79BAB53A3895082e8a4fbf12CDe"},{"address":"eth:0xb9B2AeAe8D160a5bF9cb7FE7B2c8B58c0293FD5e","type":"EOA","isVerified":true,"name":"0xb9B2â€¦FD5e","url":"https://etherscan.io/address/0xb9B2AeAe8D160a5bF9cb7FE7B2c8B58c0293FD5e"},{"address":"eth:0xc7ef93FE91D4658bb422B11C5f8Ae17ae3B86D36","type":"EOA","isVerified":true,"name":"0xc7efâ€¦6D36","url":"https://etherscan.io/address/0xc7ef93FE91D4658bb422B11C5f8Ae17ae3B86D36"},{"address":"eth:0xCEEAEC6b7e010fE1Ac253Ebd6f93eEBF9249Cd7e","type":"EOA","isVerified":true,"name":"0xCEEAâ€¦Cd7e","url":"https://etherscan.io/address/0xCEEAEC6b7e010fE1Ac253Ebd6f93eEBF9249Cd7e"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"Validator","description":"Can propose new state roots (called nodes) and challenge state roots on the host chain.","accounts":[{"address":"eth:0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf","type":"EOA","isVerified":true,"name":"0x401Bâ€¦04Bf","url":"https://etherscan.io/address/0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf"},{"address":"eth:0x006F5B7E2D58fb4E53DEdaB8802FCdf2a5441DC7","type":"EOA","isVerified":true,"name":"0x006Fâ€¦1DC7","url":"https://etherscan.io/address/0x006F5B7E2D58fb4E53DEdaB8802FCdf2a5441DC7"},{"address":"eth:0x11f563dDbF266484Dd910A401A7e44299d80b1d5","type":"EOA","isVerified":true,"name":"0x11f5â€¦b1d5","url":"https://etherscan.io/address/0x11f563dDbF266484Dd910A401A7e44299d80b1d5"},{"address":"eth:0x16C1D3b4aDB6f0F468FCE7b802cE5AA0A2B06d03","type":"EOA","isVerified":true,"name":"0x16C1â€¦6d03","url":"https://etherscan.io/address/0x16C1D3b4aDB6f0F468FCE7b802cE5AA0A2B06d03"},{"address":"eth:0x33Bf8bF5aF3579D0E2305302409A5b6b4173c779","type":"EOA","isVerified":true,"name":"0x33Bfâ€¦c779","url":"https://etherscan.io/address/0x33Bf8bF5aF3579D0E2305302409A5b6b4173c779"},{"address":"eth:0x8fbEf9f7554aec9CCf62b88D86aE1C91F1599F7C","type":"EOA","isVerified":true,"name":"0x8fbEâ€¦9F7C","url":"https://etherscan.io/address/0x8fbEf9f7554aec9CCf62b88D86aE1C91F1599F7C"},{"address":"eth:0x9DFaA1770bcE35EaB6a163D3cDE6cA1F3Ff7eA66","type":"EOA","isVerified":true,"name":"0x9DFaâ€¦eA66","url":"https://etherscan.io/address/0x9DFaA1770bcE35EaB6a163D3cDE6cA1F3Ff7eA66"},{"address":"eth:0xa017149a752BDd8723a09Cd6f40c388D38B8d202","type":"EOA","isVerified":true,"name":"0xa017â€¦d202","url":"https://etherscan.io/address/0xa017149a752BDd8723a09Cd6f40c388D38B8d202"},{"address":"eth:0xd1e56283216127E1F40A3752735C94A13d97bc92","type":"EOA","isVerified":true,"name":"0xd1e5â€¦bc92","url":"https://etherscan.io/address/0xd1e56283216127E1F40A3752735C94A13d97bc92"}],"chain":"ethereum","discoveryDrivenData":true},{"name":"AnyTrust FastConfirmer","description":"Can finalize a state root before the challenge period has passed. This allows withdrawing from the bridge based on the state root.","accounts":[{"address":"eth:0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf","type":"EOA","isVerified":true,"name":"0x401Bâ€¦04Bf","url":"https://etherscan.io/address/0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf"}],"chain":"ethereum","discoveryDrivenData":true}],"actors":[{"name":"Conduit Multisig 1","description":"A Multisig with 4/11 threshold. \n* Can upgrade **with no delay**\n  * RollupEventInbox [via: UpgradeExecutor â†’ ProxyAdmin]\n  * ChallengeManager [via: UpgradeExecutor â†’ ProxyAdmin]\n  * L1OrbitUSDCGateway [via: ProxyAdmin]\n  * Bridge [via: UpgradeExecutor â†’ ProxyAdmin]\n  * UpgradeExecutor [via: UpgradeExecutor â†’ ProxyAdmin]\n  * Inbox [via: UpgradeExecutor â†’ ProxyAdmin]\n  * SequencerInbox [via: UpgradeExecutor â†’ ProxyAdmin]\n  * RollupProxy [via: UpgradeExecutor]\n  * Outbox [via: UpgradeExecutor â†’ ProxyAdmin]\n* Can interact with RollupProxy\n  * Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability, DACs and the fastConfirmer role, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes [via: UpgradeExecutor]","accounts":[{"address":"eth:0x4a4962275DF8C60a80d3a25faEc5AA7De116A746","type":"Contract","isVerified":true,"name":"0x4a49â€¦A746","url":"https://etherscan.io/address/0x4a4962275DF8C60a80d3a25faEc5AA7De116A746"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0xFe0ab87ebE03DD0bF52DaF34Dfda6639c335e2d4","type":"EOA","isVerified":true,"name":"0xFe0aâ€¦e2d4","url":"https://etherscan.io/address/0xFe0ab87ebE03DD0bF52DaF34Dfda6639c335e2d4"},{"address":"eth:0x81175155D85377C337d92f1FA52Da166C3A4E7Ac","type":"EOA","isVerified":true,"name":"0x8117â€¦E7Ac","url":"https://etherscan.io/address/0x81175155D85377C337d92f1FA52Da166C3A4E7Ac"},{"address":"eth:0x50930d652266EF4127FA3A1906B7Cb9951076628","type":"EOA","isVerified":true,"name":"0x5093â€¦6628","url":"https://etherscan.io/address/0x50930d652266EF4127FA3A1906B7Cb9951076628"},{"address":"eth:0xA0737fea60F0601A192E3d2c98865A883ab0bda2","type":"EOA","isVerified":true,"name":"0xA073â€¦bda2","url":"https://etherscan.io/address/0xA0737fea60F0601A192E3d2c98865A883ab0bda2"},{"address":"eth:0xF3313C48BD8E17b823d5498D62F37019dFEA647D","type":"EOA","isVerified":true,"name":"0xF331â€¦647D","url":"https://etherscan.io/address/0xF3313C48BD8E17b823d5498D62F37019dFEA647D"},{"address":"eth:0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0","type":"EOA","isVerified":true,"name":"0xF0B7â€¦A4f0","url":"https://etherscan.io/address/0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0"},{"address":"eth:0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4","type":"EOA","isVerified":true,"name":"0xa400â€¦e6e4","url":"https://etherscan.io/address/0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4"},{"address":"eth:0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f","type":"EOA","isVerified":true,"name":"0x3840â€¦Fd5f","url":"https://etherscan.io/address/0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f"},{"address":"eth:0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038","type":"EOA","isVerified":true,"name":"0xa0C6â€¦9038","url":"https://etherscan.io/address/0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038"},{"address":"eth:0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C","type":"EOA","isVerified":true,"name":"0xefCfâ€¦dD5C","url":"https://etherscan.io/address/0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C"},{"address":"eth:0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe","type":"EOA","isVerified":true,"name":"0x4D80â€¦5BAe","url":"https://etherscan.io/address/0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe"}],"discoveryDrivenData":true},{"name":"GnosisSafeL2","description":"A Multisig with 1/1 threshold. ","accounts":[{"address":"eth:0xA7A2cc389aFCcDE8A1F47F14dA88e82e7D99b68F","type":"Contract","isVerified":true,"name":"0xA7A2â€¦b68F","url":"https://etherscan.io/address/0xA7A2cc389aFCcDE8A1F47F14dA88e82e7D99b68F"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf","type":"EOA","isVerified":true,"name":"0x401Bâ€¦04Bf","url":"https://etherscan.io/address/0x401Ba2e5037e3d8D1c32E77Dfd371501618604Bf"}],"discoveryDrivenData":true}]}},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 12s. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.","risks":[{"category":"Funds can be stolen if","text":"none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.","isCritical":true}],"references":[{"title":"How is fraud proven - Arbitrum documentation FAQ","url":"https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.","references":[{"title":"Fraud Proof Wars: Arbitrum Classic","url":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]},{"title":"Fast confirmations","description":"Whitelisted validators can fast-confirm state-roots after the initial 12s minimum assertion period has passed on a state root and skip the 5d 14h challenge period. This finalizes the fast-confirmed state root an permits withdrawals based on it.","risks":[{"category":"Funds can be stolen if","text":"validators with the 'fast-confirmer' permission finalize a malicious state root before the challenge period has passed.","isCritical":true}],"references":[{"title":"Fast withdrawals for AnyTrust chains - Arbitrum documentation","url":"https://docs.arbitrum.io/launch-orbit-chain/how-tos/fast-withdrawals#fast-withdrawals-for-anytrust-chains"}]}]},"milestones":[],"badges":[{"id":"Conduit","type":"RaaS","name":"Conduit","description":"This project was deployed via the rollup-as-a-service provider Conduit","action":{"type":"scalingFilter","id":"raas","value":"Conduit"}},{"id":"Orbit","type":"Stack","name":"Built on Arbitrum Orbit","description":"The project is built on Arbitrum Orbit","action":{"type":"scalingFilter","id":"stack","value":"Arbitrum"}},{"id":"DAC","type":"DA","name":"Data Availability Committee","description":"There is a Data Availability Committee that provides/attests to data availability","action":{"type":"selfDaHighlight"}},{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}}],"reasonsForBeingOther":[{"label":"Closed proofs","shortDescription":"There are less than 5 external actors that can submit challenges","description":"Projects without a sufficiently decentralized set of challengers rely on few entities to safely update the state. A small set of challengers can collude with the proposer to finalize an invalid state, which can cause loss of funds."},{"label":"Small DAC","shortDescription":"There are less than 5 external actors that can attest data availability","description":"Projects without a sufficiently decentralized data availability committee rely on few entities to safely attest data availability on Ethereum. A small set of entities can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"1/1 DAC Members","sentiment":"bad","description":"There is a threshold of 1/1 members that must sign and attest that the data is correct and available.","orderHint":-0.01},"mode":{"value":"Transaction data","secondLine":"Compressed"}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"baseTimestamp":1757506676,"hasDiscoUi":false},"ecosystemInfo":{"id":"arbitrum-orbit"}}