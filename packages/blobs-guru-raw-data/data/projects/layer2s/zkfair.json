{"type":"layer2","id":"zkfair","capability":"universal","addedAt":1690815262,"badges":[{"id":"EVM","type":"VM","name":"EVM","description":"This project uses the Ethereum Virtual Machine to run its smart contracts and supports the Solidity programming language","action":{"type":"scalingFilter","id":"vm","value":"EVM"}},{"id":"DAC","type":"DA","name":"Data Availability Committee","description":"There is a Data Availability Committee that provides/attests to data availability","action":{"type":"selfDaHighlight"}},{"id":"CDKErigon","type":"Stack","name":"Built on the CDK Erigon stack","description":"The project is built using the multistack Agglayer CDK, and is based on the Erigon stack","action":{"type":"scalingFilter","id":"stack","value":"Agglayer CDK"}}],"reasonsForBeingOther":[{"label":"No proofs","shortDescription":"The proof system isn't fully functional","description":"Projects without a proper proof system fully rely on single entities to safely update the state. A malicious proposer can finalize an invalid state, which can cause loss of funds."},{"label":"No DA bridge","shortDescription":"There is no data availability bridge","description":"Projects without a data availability bridge fully rely on single entities (the sequencer) to honestly rely available data roots on Ethereum. A malicious sequencer can collude with the proposer to finalize an unavailable state, which can cause loss of funds."}],"display":{"name":"ZKFair","slug":"zkfair","purposes":["Universal"],"redWarning":"The canonical bridge escrow was upgraded to an unverified implementation and user funds were moved to [an EOA, then deposited to AAVE](https://etherscan.io/tx/0x0f1ca15e92757dc08e1ac62ef5cfc45a37735c589c655f521f0fd99fb0d5a5d2). They were subsequently withdrawn and [moved to a new contract](https://etherscan.io/tx/0x59304b6420a556c303b4fbcc0608c14d57d06b7aa13366f3851b3be3d6e167ed). Related [tweet by the ZKFair team](https://x.com/ZKFCommunity/status/1910329561105252694).","warning":"The forced transaction mechanism is currently disabled. The project claims to use CelestiaDA but smart contracts on L1 use DAC. Arbitrary messaging passing is removed from the bridge.","description":"ZKFair is a Validium based on Polygon CDK and Celestia DA.","category":"Other","stacks":["Agglayer CDK"],"links":{"websites":["https://zkfair.io/"],"bridges":["https://wallet.zkfair.io/"],"documentation":["https://docs.zkfair.io/"],"explorers":["https://scan.zkfair.io/"],"repositories":["https://github.com/ZKFair"],"socialMedia":["https://twitter.com/ZKFCommunity"]}},"config":{"escrows":[{"address":"0xb10f60B4Ea978CA02aFBAC57fa84907e8439766e","sinceTimestamp":1744292087,"tokens":"*","contract":{"isVerified":false,"address":"eth:0xb10f60B4Ea978CA02aFBAC57fa84907e8439766e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true},{"address":"0x9cb4706e20A18E59a48ffa7616d700A3891e1861","sinceTimestamp":1702879283,"tokens":"*","contract":{"isVerified":false,"address":"eth:0x9cb4706e20A18E59a48ffa7616d700A3891e1861","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],"implementations":["eth:0x58371687dc997A7A11154bBcA72aEb15e4Db8F46"]},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true,"untilTimestamp":1744292087}],"associatedTokens":["ZKF"],"activityConfig":{"type":"block","startBlock":1}},"chainConfig":{"name":"zkfair","chainId":42766,"explorerUrl":"https://scan.zkfair.io","sinceTimestamp":1703016000,"multicallContracts":[{"sinceBlock":6330383,"batchSize":150,"address":"0xcA11bde05977b3631167028862bE2a173976CA11","version":"3"}],"coingeckoPlatform":"zkfair","apis":[{"type":"rpc","url":"https://rpc.zkfair.io","callsPerMinute":1500,"retryStrategy":"UNRELIABLE"},{"type":"blockscout","url":"https://scan.zkfair.io/api/"}]},"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"3/5 DAC Members","sentiment":"bad","description":"There is a threshold of 3/5 members that must sign and attest that the data is correct and available.","orderHint":-0.000010000000000000003},"mode":{"value":"State diffs"}},"riskView":{"stateValidation":{"value":"Validity proofs (SN)","description":"SNARKs are succinct zero knowledge proofs that ensure state correctness, but require trusted setup.","sentiment":"good","orderHint":null},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 3/5 that is tasked with protecting and supplying the data.","sentiment":"bad","orderHint":0.6},"exitWindow":{"value":"None","description":"Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.","sentiment":"bad","orderHint":-1209600,"warning":{"value":"The ZkFair Owner can upgrade with no delay.","sentiment":"bad"}},"sequencerFailure":{"value":"No mechanism","description":"There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.","sentiment":"bad"},"proposerFailure":{"value":"Self propose","description":"If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.","sentiment":"good"}},"stage":{"stage":"NotApplicable"},"stateValidation":{"categories":[{"title":"Validity proofs","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","risks":[],"references":[{"title":"ZKFairValidium.sol#L758 - Etherscan source code, _verifyAndRewardBatches function","url":"https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L758"}]}]},"technology":{"dataAvailability":{"name":"Data is not stored on chain","description":"The transaction data is not recorded on the Ethereum main chain.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true}],"references":[{"title":"ZKFairValidium.sol#L494 - Etherscan source code, sequencedBatches mapping","url":"https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L494"}]},"operator":{"name":"The system has a centralized sequencer","description":"Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."},{"category":"Funds can be frozen if","text":"the sequencer refuses to include an exit transaction.","isCritical":true}],"references":[{"title":"ZKFairValidium.sol#L61 - Etherscan source code, onlyTrustedSequencer modifier","url":"https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L461"}]},"forceTransactions":{"name":"Users can't force any transaction","description":"The mechanism for allowing users to submit their own transactions is currently disabled.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions."}],"references":[{"title":"ZKFairValidium.sol#L475 - Etherscan source code, isForceBatchAllowed modifier","url":"https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L475"}]},"exitMechanisms":[{"name":"Regular messaging","description":"The user initiates L2->L1 messages by submitting a regular transaction on this chain. When the block containing that transaction is settled, the message becomes available for processing on L1. ZK proofs are required to settle blocks.","risks":[],"references":[]}]},"permissions":{"ethereum":{"actors":[{"name":"Sequencer","accounts":[{"address":"eth:0x9eed06d1566F0cAfdA3df624E2376864cA84Db6c","type":"EOA","isVerified":true,"name":"0x9eed…Db6c","url":"https://etherscan.io/address/0x9eed06d1566F0cAfdA3df624E2376864cA84Db6c"}],"description":"Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled.","chain":"ethereum"},{"name":"Proposer","accounts":[{"address":"eth:0xd6888c41EeAcc94f4A1CEe7A99E1557aa41FA027","type":"EOA","isVerified":true,"name":"0xd688…A027","url":"https://etherscan.io/address/0xd6888c41EeAcc94f4A1CEe7A99E1557aa41FA027"}],"description":"The trusted proposer (called Aggregator) provides the ZKFairValidium contract with ZK proofs of the new system state. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.","chain":"ethereum"},{"name":"ZKFairAdmin","description":"A Multisig with 3/4 threshold. \nAdmin of the ZKFairValidium, can set core system parameters like timeouts, sequencer and aggregator as well as deactivate emergency state.","accounts":[{"address":"eth:0x0110B1B231aA3b96a94c900eb3056297526AB725","type":"Contract","isVerified":true,"name":"0x0110…B725","url":"https://etherscan.io/address/0x0110B1B231aA3b96a94c900eb3056297526AB725"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x39FcAEb9870cB015f2165e93c51f4663AE970953","type":"EOA","isVerified":true,"name":"0x39Fc…0953","url":"https://etherscan.io/address/0x39FcAEb9870cB015f2165e93c51f4663AE970953"},{"address":"eth:0x3226ECf79dc7007063599A334832d015B48aBDBc","type":"EOA","isVerified":true,"name":"0x3226…BDBc","url":"https://etherscan.io/address/0x3226ECf79dc7007063599A334832d015B48aBDBc"},{"address":"eth:0x4dba6F06597Ea29A330C06806FA284610c810295","type":"EOA","isVerified":true,"name":"0x4dba…0295","url":"https://etherscan.io/address/0x4dba6F06597Ea29A330C06806FA284610c810295"},{"address":"eth:0xe1229a2716D19eC9aF74017418Fc9E165b80c7aF","type":"EOA","isVerified":true,"name":"0xe122…c7aF","url":"https://etherscan.io/address/0xe1229a2716D19eC9aF74017418Fc9E165b80c7aF"}]},{"name":"ZKFairOwner","description":"A Multisig with 3/4 threshold. \nThe ZkFair Owner is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.","accounts":[{"address":"eth:0x8933Fa0A97f39cd38f56b1887d5cc56cF04F3A88","type":"Contract","isVerified":true,"name":"0x8933…3A88","url":"https://etherscan.io/address/0x8933Fa0A97f39cd38f56b1887d5cc56cF04F3A88"}],"chain":"ethereum","references":[],"participants":[{"address":"eth:0x9fAe81C21be8D1Ad91c3617A7b0140dfe0DCe6C7","type":"EOA","isVerified":true,"name":"0x9fAe…e6C7","url":"https://etherscan.io/address/0x9fAe81C21be8D1Ad91c3617A7b0140dfe0DCe6C7"},{"address":"eth:0x540C913ad8b197152EB041bC56f9c6Ab314D25Ba","type":"EOA","isVerified":true,"name":"0x540C…25Ba","url":"https://etherscan.io/address/0x540C913ad8b197152EB041bC56f9c6Ab314D25Ba"},{"address":"eth:0xcf6226d0264496abB69eF8BC1DF366c9E00f5b87","type":"EOA","isVerified":true,"name":"0xcf62…5b87","url":"https://etherscan.io/address/0xcf6226d0264496abB69eF8BC1DF366c9E00f5b87"},{"address":"eth:0x4B7f09f4D658638d81Bb2023674B80a9Dd7e9976","type":"EOA","isVerified":true,"name":"0x4B7f…9976","url":"https://etherscan.io/address/0x4B7f09f4D658638d81Bb2023674B80a9Dd7e9976"}]},{"name":"DAC members","accounts":[{"address":"eth:0x033A75B6B0fc26eDf60e99c4172eB5f87E733ca2","type":"EOA","isVerified":true,"name":"0x033A…3ca2","url":"https://etherscan.io/address/0x033A75B6B0fc26eDf60e99c4172eB5f87E733ca2"},{"address":"eth:0x061D273bEf947BD0ef2B828526e710eEa0f297ae","type":"EOA","isVerified":true,"name":"0x061D…97ae","url":"https://etherscan.io/address/0x061D273bEf947BD0ef2B828526e710eEa0f297ae"},{"address":"eth:0x9231622437bD57349cC9a15CDEc5383627DEbA17","type":"EOA","isVerified":true,"name":"0x9231…bA17","url":"https://etherscan.io/address/0x9231622437bD57349cC9a15CDEc5383627DEbA17"},{"address":"eth:0x9d8616545C9941138832EebC58Cb498E0ef21a13","type":"EOA","isVerified":true,"name":"0x9d86…1a13","url":"https://etherscan.io/address/0x9d8616545C9941138832EebC58Cb498E0ef21a13"},{"address":"eth:0xFe1da7CAd939805d4A889822357c348177a5118d","type":"EOA","isVerified":true,"name":"0xFe1d…118d","url":"https://etherscan.io/address/0xFe1da7CAd939805d4A889822357c348177a5118d"}],"description":"Members of the Data Availability Committee. The setup is equivalent to a 3/5 multisig.","chain":"ethereum"},{"name":"DAC Owner","accounts":[{"address":"eth:0xa57c2B747193fe3F9CC8bea89103B7d76B8A0c70","type":"EOA","isVerified":true,"name":"0xa57c…0c70","url":"https://etherscan.io/address/0xa57c2B747193fe3F9CC8bea89103B7d76B8A0c70"}],"description":"The owner of the Data Availability Committee, can update the member set at any time.","chain":"ethereum"},{"name":"TimelockExecutor","accounts":[{"address":"eth:0x75575Dc1adD71eA794A52D83f836a13F7891C527","type":"EOA","isVerified":true,"name":"0x7557…C527","url":"https://etherscan.io/address/0x75575Dc1adD71eA794A52D83f836a13F7891C527"},{"address":"eth:0x9412eCbEE1e8dd25F347D6d8002f62eF540ddDAa","type":"EOA","isVerified":true,"name":"0x9412…dDAa","url":"https://etherscan.io/address/0x9412eCbEE1e8dd25F347D6d8002f62eF540ddDAa"}],"description":"Controls the upgrades to the ZKFairValidiumDAC and ZKFairValidium contracts through the Timelock. ","chain":"ethereum"}]}},"contracts":{"addresses":{"ethereum":[{"name":"ZKFairValidium","isVerified":true,"address":"eth:0x1CbC08bf0D48b18F9f97796c61352b192d1850A5","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],"implementations":["eth:0x668965757127549f8755D2eEd10494B06420213b"]},"chain":"ethereum","references":[{"title":"State injections - stateRoot and exitRoot are part of the validity proof input.","url":"https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L809"}],"description":"The main contract of the Polygon CDK Validium. It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the ZkFair Owner, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives transaction roots, L2 state roots as well as ZK proofs. It also holds the address of ZKFairValidiumDAC.","upgradableBy":[{"name":"ZKFairAdmin","delay":"None"}],"upgradeConsiderations":"Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"Bridge","isVerified":false,"address":"eth:0xb10f60B4Ea978CA02aFBAC57fa84907e8439766e","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"The current escrow contract for user funds."},{"name":"OldBridge","isVerified":false,"address":"eth:0x9cb4706e20A18E59a48ffa7616d700A3891e1861","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],"implementations":["eth:0x58371687dc997A7A11154bBcA72aEb15e4Db8F46"]},"chain":"ethereum","description":"Deprecated! Was the escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer ERC20 assets. To transfer funds a user initiated transaction on both sides is required.","upgradableBy":[{"name":"ZKFairAdmin","delay":"None"}],"upgradeConsiderations":"Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"GlobalExitRoot","isVerified":true,"address":"eth:0x72abD6416Ea2d99ad30C86B90e7409Dc2d1ba40b","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],"implementations":["eth:0xC4CD3D0b31904969a397A98AcE8bDF2A94ba8615"]},"chain":"ethereum","description":"Synchronizes deposit and withdraw merkle trees across L1 and L2. The global root from this contract is injected into the L2 contract.","upgradableBy":[{"name":"ZKFairAdmin","delay":"None"}],"upgradeConsiderations":"Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"FflonkVerifier","isVerified":true,"address":"eth:0x769E285d2120472c3400A09684B82A842012F46d","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"An autogenerated contract that verifies ZK proofs in the ZKFairValidium system."},{"name":"ZKFairValidiumDAC","isVerified":true,"address":"eth:0x997CfB0838544f68E59f877EDc905001456F125b","upgradeability":{"proxyType":"EIP1967 proxy","admins":["eth:0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],"implementations":["eth:0x63150fA72c1c9fF8Fe4438f8355927D3415b0FDc"]},"chain":"ethereum","description":"Committee attesting that data for a given dataRoot has been published. The DAC Owner can update the member set at any time.","upgradableBy":[{"name":"ZKFairAdmin","delay":"None"}],"upgradeConsiderations":"Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"Timelock","isVerified":true,"address":"eth:0x52882c7564fAca480549145fAc4d0b09eD0D9c17","upgradeability":{"proxyType":"immutable","admins":[],"implementations":[],"immutable":true},"chain":"ethereum","description":"Contract upgrades have to go through a 1d timelock unless the Emergency State is activated. It is controlled by the TimelockExecutor."}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 1d delay on code upgrades."}]},"milestones":[{"title":"ZKFair Mainnet is Live","url":"https://twitter.com/ZKFCommunity/status/1737307444181869017","date":"2023-12-20T00:00:00Z","description":"ZKFair launched.","type":"general"}],"customDa":{"type":"Data Availability Committee","description":"Set of parties responsible for signing and attesting to the availability of data.","dac":{"requiredMembers":3,"membersCount":5},"technology":{"description":"\n## Architecture\n![polygoncdk architecture](/images/da-layer-technology/polygoncdk/architecture5.png#center)\n\nPolygon CDK validiums utilize a data availability solution that relies on a Data Availability Committee (DAC) to ensure data integrity and manage off-chain transaction data. \nThis architecture comprises the following components:\n- **Operator**: A trusted entity that collects transactions, computes hash values for the transaction batch, and then requests and collects signatures from Committee members.\n- **Data Availability Committee (DAC)**: A group of nodes responsible for validating batch data against the hash values provided by the operator (sequencer), ensuring the data accurately represents the transactions.\n- **PolygonCommittee Contract**: Contract responsible for managing the data committee members list.\n\nEach DAC node independently validates the batch data, ensuring it matches the received hash values. \nUpon successful validation, DAC members store the hash values locally and generate signatures endorsing the batch's integrity. \nThe sequencer collects these signatures and submits the transactions batch hash together with the aggregated signature on Ethereum.\nThe PolygonCommittee contract is used during batch sequencing to verify that the signature posted by the sequencer was signed off by the DAC members stored in the contract.\n\n## DA Bridge Architecture\n![polygoncdk bridge architecture](/images/da-bridge-technology/polygoncdk/architectureL2.png#center)\n\nThe DA commitments are posted to the destination chain through the sequencer inbox, using the inbox as a DA bridge.\nThe DA commitment consists of a data availability message provided as transaction input, made up of a byte array containing the signatures and all the addresses of the committee in ascending order.\nThe sequencer distributes the data and collects signatures from Committee members offchain. Only the DA message is posted by the sequencer to the destination chain inbox (the DA bridge).\nA separate contract, the PolygonCommittee contract, is used to manage the committee members list and verify the signatures before accepting the DA commitment.\n    ","risks":[{"category":"Funds can be lost if","text":"a malicious committee signs a data availability attestation for an unavailable transaction batch."},{"category":"Funds can be lost if","text":"the bridge contract or its dependencies receive a malicious code upgrade. There is no delay on code upgrades."}],"references":[{"title":"Polygon CDK Validium Documentation","url":"https://docs.polygon.technology/cdk/architecture/cdk-validium/#data-availability-committee-dac"}]},"risks":{"committeeSecurity":{"value":"3/5","sentiment":"bad","description":"The committee does not meet basic security standards, either due to insufficient size, lack of member diversity, or poorly defined threshold parameters. The system lacks an effective DA bridge and it is reliant on the assumption of an honest sequencer, creating significant risks to data integrity and availability.","orderHint":-0.000010000000000000003},"upgradeability":{"value":"No delay","sentiment":"bad","description":"There is no delay in the upgradeability of the bridge. Users have no time to exit the system before the bridge implementation update is completed."},"relayerFailure":{"value":"No mechanism","sentiment":"bad","description":"The relayer role is permissioned, and the DA bridge does not have a Security Council or a governance mechanism to propose new relayers. In case of relayer failure, the DA bridge will halt and be unable to recover without the intervention of a centralized entity."},"economicSecurity":{"value":{"value":"None","sentiment":"bad","description":"There are no onchain assets at risk of being slashed in case of a data withholding attack, and the committee members are not publicly known."},"adjustSecurityRisk":false},"fraudDetection":{"value":"None","sentiment":"bad","description":"There is no fraud detection mechanism in place. A data withholding attack can only be detected by nodes downloading the full data from the DA layer."}}},"discoveryInfo":{"isDiscoDriven":false,"permissionsDiscoDriven":false,"contractsDiscoDriven":false,"timestampPerChain":{"ethereum":1745306051},"hasDiscoUi":false}}